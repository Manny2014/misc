/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import 'isomorphic-fetch';
import * as url from 'url';
// Below--> original code generated by generator
// import * as isomorphicFetch from "isomorphic-fetch";

import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:2746/".replace(/\/+$/, "");

// TODO: Circle back to understand why i had to this/ensure no issues.
const isomorphicFetch = fetch;

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }else {
            this.configuration = {}
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {

    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError";
    }
}

/**
 * 
 * @export
 * @interface EventsourceCreateEventSourceRequest
 */
export interface EventsourceCreateEventSourceRequest {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSource}
     * @memberof EventsourceCreateEventSourceRequest
     */
    eventSource?: IoArgoprojEventsV1alpha1EventSource;
    /**
     * 
     * @type {string}
     * @memberof EventsourceCreateEventSourceRequest
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface EventsourceEventSourceDeletedResponse
 */
export interface EventsourceEventSourceDeletedResponse {
}
/**
 * 
 * @export
 * @interface EventsourceEventSourceWatchEvent
 */
export interface EventsourceEventSourceWatchEvent {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSource}
     * @memberof EventsourceEventSourceWatchEvent
     */
    object?: IoArgoprojEventsV1alpha1EventSource;
    /**
     * 
     * @type {string}
     * @memberof EventsourceEventSourceWatchEvent
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface EventsourceLogEntry
 */
export interface EventsourceLogEntry {
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    eventName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    eventSourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    eventSourceType?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    level?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceLogEntry
     */
    namespace?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof EventsourceLogEntry
     */
    time?: IoK8sApimachineryPkgApisMetaV1Time;
}
/**
 * 
 * @export
 * @interface EventsourceUpdateEventSourceRequest
 */
export interface EventsourceUpdateEventSourceRequest {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSource}
     * @memberof EventsourceUpdateEventSourceRequest
     */
    eventSource?: IoArgoprojEventsV1alpha1EventSource;
    /**
     * 
     * @type {string}
     * @memberof EventsourceUpdateEventSourceRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EventsourceUpdateEventSourceRequest
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    typeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeError
     */
    code?: number;
    /**
     * 
     * @type {Array<GoogleProtobufAny>}
     * @memberof GrpcGatewayRuntimeError
     */
    details?: Array<GoogleProtobufAny>;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeStreamError
 */
export interface GrpcGatewayRuntimeStreamError {
    /**
     * 
     * @type {Array<GoogleProtobufAny>}
     * @memberof GrpcGatewayRuntimeStreamError
     */
    details?: Array<GoogleProtobufAny>;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeStreamError
     */
    grpcCode?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeStreamError
     */
    httpCode?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeStreamError
     */
    httpStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeStreamError
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AMQPConsumeConfig
 */
export interface IoArgoprojEventsV1alpha1AMQPConsumeConfig {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPConsumeConfig
     */
    autoAck?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPConsumeConfig
     */
    consumerTag?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPConsumeConfig
     */
    exclusive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPConsumeConfig
     */
    noLocal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPConsumeConfig
     */
    noWait?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AMQPEventSource
 */
export interface IoArgoprojEventsV1alpha1AMQPEventSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1BasicAuth}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    auth?: IoArgoprojEventsV1alpha1BasicAuth;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AMQPConsumeConfig}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    consume?: IoArgoprojEventsV1alpha1AMQPConsumeConfig;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    exchangeDeclare?: IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    exchangeName?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    exchangeType?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AMQPQueueBindConfig}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    queueBind?: IoArgoprojEventsV1alpha1AMQPQueueBindConfig;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    queueDeclare?: IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    routingKey?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    url?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AMQPEventSource
     */
    urlSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
 */
export interface IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
     */
    autoDelete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
     */
    durable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
     */
    internal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig
     */
    noWait?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AMQPQueueBindConfig
 */
export interface IoArgoprojEventsV1alpha1AMQPQueueBindConfig {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueBindConfig
     */
    noWait?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
 */
export interface IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    arguments?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    autoDelete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    durable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    exclusive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig
     */
    noWait?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AWSLambdaTrigger
 */
export interface IoArgoprojEventsV1alpha1AWSLambdaTrigger {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    accessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * FunctionName refers to the name of the function to invoke.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    functionName?: string;
    /**
     * Choose from the following options.     * RequestResponse (default) - Invoke the function synchronously. Keep    the connection open until the function returns a response or times out.    The API response includes the function response and additional data.     * Event - Invoke the function asynchronously. Send events that fail multiple    times to the function's dead-letter queue (if it's configured). The API    response only includes a status code.     * DryRun - Validate parameter values and verify that the user or role    has permission to invoke the function. +optional
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    invocationType?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    roleARN?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AWSLambdaTrigger
     */
    secretKey?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * Amount represent a numeric amount.
 * @export
 * @interface IoArgoprojEventsV1alpha1Amount
 */
export interface IoArgoprojEventsV1alpha1Amount {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Amount
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
 */
export interface IoArgoprojEventsV1alpha1ArgoWorkflowTrigger {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
     */
    args?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
     */
    operation?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ArtifactLocation}
     * @memberof IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
     */
    source?: IoArgoprojEventsV1alpha1ArtifactLocation;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ArtifactLocation
 */
export interface IoArgoprojEventsV1alpha1ArtifactLocation {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    configmap?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1FileArtifact}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    file?: IoArgoprojEventsV1alpha1FileArtifact;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1GitArtifact}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    git?: IoArgoprojEventsV1alpha1GitArtifact;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    inline?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Resource}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    resource?: IoArgoprojEventsV1alpha1Resource;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1S3Artifact}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    s3?: IoArgoprojEventsV1alpha1S3Artifact;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1URLArtifact}
     * @memberof IoArgoprojEventsV1alpha1ArtifactLocation
     */
    url?: IoArgoprojEventsV1alpha1URLArtifact;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AzureEventHubsTrigger
 */
export interface IoArgoprojEventsV1alpha1AzureEventHubsTrigger {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    fqdn?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    hubName?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    sharedAccessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AzureEventHubsTrigger
     */
    sharedAccessKeyName?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1AzureEventsHubEventSource
 */
export interface IoArgoprojEventsV1alpha1AzureEventsHubEventSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    fqdn?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    hubName?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    sharedAccessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1AzureEventsHubEventSource
     */
    sharedAccessKeyName?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Backoff
 */
export interface IoArgoprojEventsV1alpha1Backoff {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Int64OrString}
     * @memberof IoArgoprojEventsV1alpha1Backoff
     */
    duration?: IoArgoprojEventsV1alpha1Int64OrString;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Amount}
     * @memberof IoArgoprojEventsV1alpha1Backoff
     */
    factor?: IoArgoprojEventsV1alpha1Amount;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Amount}
     * @memberof IoArgoprojEventsV1alpha1Backoff
     */
    jitter?: IoArgoprojEventsV1alpha1Amount;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1Backoff
     */
    steps?: number;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BasicAuth
 */
export interface IoArgoprojEventsV1alpha1BasicAuth {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BasicAuth
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BasicAuth
     */
    username?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketAuth
 */
export interface IoArgoprojEventsV1alpha1BitbucketAuth {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1BitbucketBasicAuth}
     * @memberof IoArgoprojEventsV1alpha1BitbucketAuth
     */
    basic?: IoArgoprojEventsV1alpha1BitbucketBasicAuth;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BitbucketAuth
     */
    oauthToken?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketBasicAuth
 */
export interface IoArgoprojEventsV1alpha1BitbucketBasicAuth {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BitbucketBasicAuth
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BitbucketBasicAuth
     */
    username?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketEventSource
 */
export interface IoArgoprojEventsV1alpha1BitbucketEventSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1BitbucketAuth}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    auth?: IoArgoprojEventsV1alpha1BitbucketAuth;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    deleteHookOnFinish?: boolean;
    /**
     * Events this webhook is subscribed to.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    projectKey?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1BitbucketRepository>}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    repositories?: Array<IoArgoprojEventsV1alpha1BitbucketRepository>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    repositorySlug?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1BitbucketEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketRepository
 */
export interface IoArgoprojEventsV1alpha1BitbucketRepository {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketRepository
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketRepository
     */
    repositorySlug?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketServerEventSource
 */
export interface IoArgoprojEventsV1alpha1BitbucketServerEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    accessToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    bitbucketserverBaseURL?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    deleteHookOnFinish?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    projectKey?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1BitbucketServerRepository>}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    repositories?: Array<IoArgoprojEventsV1alpha1BitbucketServerRepository>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    repositorySlug?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerEventSource
     */
    webhookSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1BitbucketServerRepository
 */
export interface IoArgoprojEventsV1alpha1BitbucketServerRepository {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerRepository
     */
    projectKey?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1BitbucketServerRepository
     */
    repositorySlug?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1CalendarEventSource
 */
export interface IoArgoprojEventsV1alpha1CalendarEventSource {
    /**
     * ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    exclusionDates?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    interval?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventPersistence}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    persistence?: IoArgoprojEventsV1alpha1EventPersistence;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    schedule?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CalendarEventSource
     */
    timezone?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1CatchupConfiguration
 */
export interface IoArgoprojEventsV1alpha1CatchupConfiguration {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1CatchupConfiguration
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CatchupConfiguration
     */
    maxDuration?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Condition
 */
export interface IoArgoprojEventsV1alpha1Condition {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojEventsV1alpha1Condition
     */
    lastTransitionTime?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Condition
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Condition
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Condition
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Condition
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ConditionsResetByTime
 */
export interface IoArgoprojEventsV1alpha1ConditionsResetByTime {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ConditionsResetByTime
     */
    cron?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ConditionsResetByTime
     */
    timezone?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ConditionsResetCriteria
 */
export interface IoArgoprojEventsV1alpha1ConditionsResetCriteria {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ConditionsResetByTime}
     * @memberof IoArgoprojEventsV1alpha1ConditionsResetCriteria
     */
    byTime?: IoArgoprojEventsV1alpha1ConditionsResetByTime;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ConfigMapPersistence
 */
export interface IoArgoprojEventsV1alpha1ConfigMapPersistence {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1ConfigMapPersistence
     */
    createIfNotExist?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ConfigMapPersistence
     */
    name?: string;
}
/**
 * CustomTrigger refers to the specification of the custom trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1CustomTrigger
 */
export interface IoArgoprojEventsV1alpha1CustomTrigger {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    certSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Parameters is the list of parameters that is applied to resolved custom trigger trigger object.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    secure?: boolean;
    /**
     * ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    serverNameOverride?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    serverURL?: string;
    /**
     * Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1CustomTrigger
     */
    spec?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1DataFilter
 */
export interface IoArgoprojEventsV1alpha1DataFilter {
    /**
     * Comparator compares the event data with a user given value. Can be \">=\", \">\", \"=\", \"!=\", \"<\", or \"<=\". Is optional, and if left blank treated as equality \"=\".
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1DataFilter
     */
    comparator?: string;
    /**
     * Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1DataFilter
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1DataFilter
     */
    template?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1DataFilter
     */
    type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1DataFilter
     */
    value?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EmitterEventSource
 */
export interface IoArgoprojEventsV1alpha1EmitterEventSource {
    /**
     * Broker URI to connect to.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    broker?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    channelKey?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    channelName?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1EmitterEventSource
     */
    username?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventContext
 */
export interface IoArgoprojEventsV1alpha1EventContext {
    /**
     * DataContentType - A MIME (RFC2046) string describing the media type of `data`.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    datacontenttype?: string;
    /**
     * ID of the event; must be non-empty and unique within the scope of the producer.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    id?: string;
    /**
     * Source - A URI describing the event producer.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    source?: string;
    /**
     * SpecVersion - The version of the CloudEvents specification used by the io.argoproj.workflow.v1alpha1.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    specversion?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    subject?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    time?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * Type - The type of the occurrence which has happened.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventContext
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventDependency
 */
export interface IoArgoprojEventsV1alpha1EventDependency {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    eventName?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    eventSourceName?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventDependencyFilter}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    filters?: IoArgoprojEventsV1alpha1EventDependencyFilter;
    /**
     * FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    filtersLogicalOperator?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    name?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventDependencyTransformer}
     * @memberof IoArgoprojEventsV1alpha1EventDependency
     */
    transform?: IoArgoprojEventsV1alpha1EventDependencyTransformer;
}
/**
 * EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.
 * @export
 * @interface IoArgoprojEventsV1alpha1EventDependencyFilter
 */
export interface IoArgoprojEventsV1alpha1EventDependencyFilter {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventContext}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    context?: IoArgoprojEventsV1alpha1EventContext;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1DataFilter>}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    data?: Array<IoArgoprojEventsV1alpha1DataFilter>;
    /**
     * DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    dataLogicalOperator?: string;
    /**
     * ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    exprLogicalOperator?: string;
    /**
     * Exprs contains the list of expressions evaluated against the event payload.
     * @type {Array<IoArgoprojEventsV1alpha1ExprFilter>}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    exprs?: Array<IoArgoprojEventsV1alpha1ExprFilter>;
    /**
     * Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    script?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TimeFilter}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyFilter
     */
    time?: IoArgoprojEventsV1alpha1TimeFilter;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventDependencyTransformer
 */
export interface IoArgoprojEventsV1alpha1EventDependencyTransformer {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyTransformer
     */
    jq?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventDependencyTransformer
     */
    script?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventPersistence
 */
export interface IoArgoprojEventsV1alpha1EventPersistence {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1CatchupConfiguration}
     * @memberof IoArgoprojEventsV1alpha1EventPersistence
     */
    catchup?: IoArgoprojEventsV1alpha1CatchupConfiguration;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ConfigMapPersistence}
     * @memberof IoArgoprojEventsV1alpha1EventPersistence
     */
    configMap?: IoArgoprojEventsV1alpha1ConfigMapPersistence;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventSource
 */
export interface IoArgoprojEventsV1alpha1EventSource {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojEventsV1alpha1EventSource
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceSpec}
     * @memberof IoArgoprojEventsV1alpha1EventSource
     */
    spec?: IoArgoprojEventsV1alpha1EventSourceSpec;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceStatus}
     * @memberof IoArgoprojEventsV1alpha1EventSource
     */
    status?: IoArgoprojEventsV1alpha1EventSourceStatus;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventSourceFilter
 */
export interface IoArgoprojEventsV1alpha1EventSourceFilter {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventSourceFilter
     */
    expression?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventSourceList
 */
export interface IoArgoprojEventsV1alpha1EventSourceList {
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1EventSource>}
     * @memberof IoArgoprojEventsV1alpha1EventSourceList
     */
    items?: Array<IoArgoprojEventsV1alpha1EventSource>;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojEventsV1alpha1EventSourceList
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventSourceSpec
 */
export interface IoArgoprojEventsV1alpha1EventSourceSpec {
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1AMQPEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    amqp?: { [key: string]: IoArgoprojEventsV1alpha1AMQPEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1AzureEventsHubEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    azureEventsHub?: { [key: string]: IoArgoprojEventsV1alpha1AzureEventsHubEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1BitbucketEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    bitbucket?: { [key: string]: IoArgoprojEventsV1alpha1BitbucketEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1BitbucketServerEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    bitbucketserver?: { [key: string]: IoArgoprojEventsV1alpha1BitbucketServerEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1CalendarEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    calendar?: { [key: string]: IoArgoprojEventsV1alpha1CalendarEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1EmitterEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    emitter?: { [key: string]: IoArgoprojEventsV1alpha1EmitterEventSource; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    eventBusName?: string;
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1FileEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    file?: { [key: string]: IoArgoprojEventsV1alpha1FileEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1GenericEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    generic?: { [key: string]: IoArgoprojEventsV1alpha1GenericEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1GithubEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    github?: { [key: string]: IoArgoprojEventsV1alpha1GithubEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1GitlabEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    gitlab?: { [key: string]: IoArgoprojEventsV1alpha1GitlabEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1HDFSEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    hdfs?: { [key: string]: IoArgoprojEventsV1alpha1HDFSEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1KafkaEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    kafka?: { [key: string]: IoArgoprojEventsV1alpha1KafkaEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1S3Artifact; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    minio?: { [key: string]: IoArgoprojEventsV1alpha1S3Artifact; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1MQTTEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    mqtt?: { [key: string]: IoArgoprojEventsV1alpha1MQTTEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1NATSEventsSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    nats?: { [key: string]: IoArgoprojEventsV1alpha1NATSEventsSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1NSQEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    nsq?: { [key: string]: IoArgoprojEventsV1alpha1NSQEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1PubSubEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    pubSub?: { [key: string]: IoArgoprojEventsV1alpha1PubSubEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1PulsarEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    pulsar?: { [key: string]: IoArgoprojEventsV1alpha1PulsarEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1RedisEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    redis?: { [key: string]: IoArgoprojEventsV1alpha1RedisEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1RedisStreamEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    redisStream?: { [key: string]: IoArgoprojEventsV1alpha1RedisStreamEventSource; };
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    replicas?: number;
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1ResourceEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    resource?: { [key: string]: IoArgoprojEventsV1alpha1ResourceEventSource; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Service}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    service?: IoArgoprojEventsV1alpha1Service;
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1SlackEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    slack?: { [key: string]: IoArgoprojEventsV1alpha1SlackEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1SNSEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    sns?: { [key: string]: IoArgoprojEventsV1alpha1SNSEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1SQSEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    sqs?: { [key: string]: IoArgoprojEventsV1alpha1SQSEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1StorageGridEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    storageGrid?: { [key: string]: IoArgoprojEventsV1alpha1StorageGridEventSource; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1StripeEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    stripe?: { [key: string]: IoArgoprojEventsV1alpha1StripeEventSource; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Template}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    template?: IoArgoprojEventsV1alpha1Template;
    /**
     * 
     * @type {{ [key: string]: IoArgoprojEventsV1alpha1WebhookEventSource; }}
     * @memberof IoArgoprojEventsV1alpha1EventSourceSpec
     */
    webhook?: { [key: string]: IoArgoprojEventsV1alpha1WebhookEventSource; };
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1EventSourceStatus
 */
export interface IoArgoprojEventsV1alpha1EventSourceStatus {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Status}
     * @memberof IoArgoprojEventsV1alpha1EventSourceStatus
     */
    status?: IoArgoprojEventsV1alpha1Status;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ExprFilter
 */
export interface IoArgoprojEventsV1alpha1ExprFilter {
    /**
     * Expr refers to the expression that determines the outcome of the filter.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ExprFilter
     */
    expr?: string;
    /**
     * Fields refers to set of keys that refer to the paths within event payload.
     * @type {Array<IoArgoprojEventsV1alpha1PayloadField>}
     * @memberof IoArgoprojEventsV1alpha1ExprFilter
     */
    fields?: Array<IoArgoprojEventsV1alpha1PayloadField>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1FileArtifact
 */
export interface IoArgoprojEventsV1alpha1FileArtifact {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1FileArtifact
     */
    path?: string;
}
/**
 * FileEventSource describes an event-source for file related events.
 * @export
 * @interface IoArgoprojEventsV1alpha1FileEventSource
 */
export interface IoArgoprojEventsV1alpha1FileEventSource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1FileEventSource
     */
    eventType?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1FileEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1FileEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1FileEventSource
     */
    polling?: boolean;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WatchPathConfig}
     * @memberof IoArgoprojEventsV1alpha1FileEventSource
     */
    watchPathConfig?: IoArgoprojEventsV1alpha1WatchPathConfig;
}
/**
 * GenericEventSource refers to a generic event source. It can be used to implement a custom event source.
 * @export
 * @interface IoArgoprojEventsV1alpha1GenericEventSource
 */
export interface IoArgoprojEventsV1alpha1GenericEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    authSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    config?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * Insecure determines the type of connection.
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    insecure?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * URL of the gRPC server that implements the event source.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GenericEventSource
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GitArtifact
 */
export interface IoArgoprojEventsV1alpha1GitArtifact {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    branch?: string;
    /**
     * Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    cloneDirectory?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1GitCreds}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    creds?: IoArgoprojEventsV1alpha1GitCreds;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    filePath?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    insecureIgnoreHostKey?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    ref?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1GitRemoteConfig}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    remote?: IoArgoprojEventsV1alpha1GitRemoteConfig;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    sshKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitArtifact
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GitCreds
 */
export interface IoArgoprojEventsV1alpha1GitCreds {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GitCreds
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GitCreds
     */
    username?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GitRemoteConfig
 */
export interface IoArgoprojEventsV1alpha1GitRemoteConfig {
    /**
     * Name of the remote to fetch from.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitRemoteConfig
     */
    name?: string;
    /**
     * URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1GitRemoteConfig
     */
    urls?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GithubAppCreds
 */
export interface IoArgoprojEventsV1alpha1GithubAppCreds {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubAppCreds
     */
    appID?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubAppCreds
     */
    installationID?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GithubAppCreds
     */
    privateKey?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GithubEventSource
 */
export interface IoArgoprojEventsV1alpha1GithubEventSource {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    active?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    apiToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    contentType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    deleteHookOnFinish?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1GithubAppCreds}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    githubApp?: IoArgoprojEventsV1alpha1GithubAppCreds;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    githubBaseURL?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    githubUploadURL?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    insecure?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    organizations?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    owner?: string;
    /**
     * Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
     * @type {Array<IoArgoprojEventsV1alpha1OwnedRepositories>}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    repositories?: Array<IoArgoprojEventsV1alpha1OwnedRepositories>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    repository?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GithubEventSource
     */
    webhookSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1GitlabEventSource
 */
export interface IoArgoprojEventsV1alpha1GitlabEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    accessToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    deleteHookOnFinish?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    enableSSLVerification?: boolean;
    /**
     * Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    gitlabBaseURL?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    projectID?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    projects?: Array<string>;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    secretToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1GitlabEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1HDFSEventSource
 */
export interface IoArgoprojEventsV1alpha1HDFSEventSource {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    addresses?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    checkInterval?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    hdfsUser?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbCCacheSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbConfigConfigMap?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbKeytabSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbRealm?: string;
    /**
     * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbServicePrincipalName?: string;
    /**
     * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    krbUsername?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    type?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WatchPathConfig}
     * @memberof IoArgoprojEventsV1alpha1HDFSEventSource
     */
    watchPathConfig?: IoArgoprojEventsV1alpha1WatchPathConfig;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1HTTPTrigger
 */
export interface IoArgoprojEventsV1alpha1HTTPTrigger {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1BasicAuth}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    basicAuth?: IoArgoprojEventsV1alpha1BasicAuth;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    headers?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    method?: string;
    /**
     * Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1SecureHeader>}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    secureHeaders?: Array<IoArgoprojEventsV1alpha1SecureHeader>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    timeout?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * URL refers to the URL to send HTTP request to.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1HTTPTrigger
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Int64OrString
 */
export interface IoArgoprojEventsV1alpha1Int64OrString {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Int64OrString
     */
    int64Val?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Int64OrString
     */
    strVal?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Int64OrString
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1K8SResourcePolicy
 */
export interface IoArgoprojEventsV1alpha1K8SResourcePolicy {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1K8SResourcePolicy
     */
    backoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1K8SResourcePolicy
     */
    errorOnBackoffTimeout?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1K8SResourcePolicy
     */
    labels?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1KafkaConsumerGroup
 */
export interface IoArgoprojEventsV1alpha1KafkaConsumerGroup {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaConsumerGroup
     */
    groupName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1KafkaConsumerGroup
     */
    oldest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaConsumerGroup
     */
    rebalanceStrategy?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1KafkaEventSource
 */
export interface IoArgoprojEventsV1alpha1KafkaEventSource {
    /**
     * Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/Shopify/sarama/blob/main/config.go e.g.  consumer:   fetch:     min: 1 net:   MaxOpenRequests: 5  +optional
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    config?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1KafkaConsumerGroup}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    consumerGroup?: IoArgoprojEventsV1alpha1KafkaConsumerGroup;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    limitEventsPerSecond?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    partition?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1SASLConfig}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    sasl?: IoArgoprojEventsV1alpha1SASLConfig;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    topic?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaEventSource
     */
    version?: string;
}
/**
 * KafkaTrigger refers to the specification of the Kafka trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1KafkaTrigger
 */
export interface IoArgoprojEventsV1alpha1KafkaTrigger {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    compress?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    flushFrequency?: number;
    /**
     * Parameters is the list of parameters that is applied to resolved Kafka trigger object.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Partition to write data to.
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    partition?: number;
    /**
     * The partitioning key for the messages put on the Kafka topic. Defaults to broker url. +optional.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    partitioningKey?: string;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    requiredAcks?: number;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1SASLConfig}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    sasl?: IoArgoprojEventsV1alpha1SASLConfig;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    topic?: string;
    /**
     * URL of the Kafka broker, multiple URLs separated by comma.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1KafkaTrigger
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1LogTrigger
 */
export interface IoArgoprojEventsV1alpha1LogTrigger {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1LogTrigger
     */
    intervalSeconds?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1MQTTEventSource
 */
export interface IoArgoprojEventsV1alpha1MQTTEventSource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    clientId?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    topic?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1MQTTEventSource
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Metadata
 */
export interface IoArgoprojEventsV1alpha1Metadata {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1Metadata
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1Metadata
     */
    labels?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1NATSAuth
 */
export interface IoArgoprojEventsV1alpha1NATSAuth {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1BasicAuth}
     * @memberof IoArgoprojEventsV1alpha1NATSAuth
     */
    basic?: IoArgoprojEventsV1alpha1BasicAuth;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1NATSAuth
     */
    credential?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1NATSAuth
     */
    nkey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1NATSAuth
     */
    token?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1NATSEventsSource
 */
export interface IoArgoprojEventsV1alpha1NATSEventsSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1NATSAuth}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    auth?: IoArgoprojEventsV1alpha1NATSAuth;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    subject?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NATSEventsSource
     */
    url?: string;
}
/**
 * NATSTrigger refers to the specification of the NATS trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1NATSTrigger
 */
export interface IoArgoprojEventsV1alpha1NATSTrigger {
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1NATSTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1NATSTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Name of the subject to put message on.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NATSTrigger
     */
    subject?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1NATSTrigger
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * URL of the NATS cluster.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NATSTrigger
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1NSQEventSource
 */
export interface IoArgoprojEventsV1alpha1NSQEventSource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    channel?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    hostAddress?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * Topic to subscribe to.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1NSQEventSource
     */
    topic?: string;
}
/**
 * OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1OpenWhiskTrigger
 */
export interface IoArgoprojEventsV1alpha1OpenWhiskTrigger {
    /**
     * Name of the action/function.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    actionName?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    authToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Host URL of the OpenWhisk.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    host?: string;
    /**
     * Namespace for the action. Defaults to \"_\". +optional.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    namespace?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1OpenWhiskTrigger
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1OwnedRepositories
 */
export interface IoArgoprojEventsV1alpha1OwnedRepositories {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1OwnedRepositories
     */
    names?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1OwnedRepositories
     */
    owner?: string;
}
/**
 * PayloadField binds a value at path within the event payload against a name.
 * @export
 * @interface IoArgoprojEventsV1alpha1PayloadField
 */
export interface IoArgoprojEventsV1alpha1PayloadField {
    /**
     * Name acts as key that holds the value at the path.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PayloadField
     */
    name?: string;
    /**
     * Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PayloadField
     */
    path?: string;
}
/**
 * PubSubEventSource refers to event-source for GCP PubSub related events.
 * @export
 * @interface IoArgoprojEventsV1alpha1PubSubEventSource
 */
export interface IoArgoprojEventsV1alpha1PubSubEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    credentialSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    deleteSubscriptionOnFinish?: boolean;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    projectID?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    subscriptionID?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    topic?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PubSubEventSource
     */
    topicProjectID?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1PulsarEventSource
 */
export interface IoArgoprojEventsV1alpha1PulsarEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    authTokenSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    tlsAllowInsecureConnection?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    tlsTrustCertsSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    tlsValidateHostname?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    topics?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PulsarEventSource
     */
    url?: string;
}
/**
 * PulsarTrigger refers to the specification of the Pulsar trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1PulsarTrigger
 */
export interface IoArgoprojEventsV1alpha1PulsarTrigger {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    authTokenSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    connectionBackoff?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * Parameters is the list of parameters that is applied to resolved Kafka trigger object.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * Payload is the list of key-value extracted from an event payload to construct the request payload.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    payload?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    tlsAllowInsecureConnection?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    tlsTrustCertsSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    tlsValidateHostname?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    topic?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1PulsarTrigger
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1RateLimit
 */
export interface IoArgoprojEventsV1alpha1RateLimit {
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1RateLimit
     */
    requestsPerUnit?: number;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RateLimit
     */
    unit?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1RedisEventSource
 */
export interface IoArgoprojEventsV1alpha1RedisEventSource {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    channels?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    db?: number;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    hostAddress?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    namespace?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisEventSource
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1RedisStreamEventSource
 */
export interface IoArgoprojEventsV1alpha1RedisStreamEventSource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    consumerGroup?: string;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    db?: number;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    hostAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    maxMsgCountPerRead?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    streams?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TLSConfig}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    tls?: IoArgoprojEventsV1alpha1TLSConfig;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1RedisStreamEventSource
     */
    username?: string;
}
/**
 * Resource represent arbitrary structured data.
 * @export
 * @interface IoArgoprojEventsV1alpha1Resource
 */
export interface IoArgoprojEventsV1alpha1Resource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Resource
     */
    value?: string;
}
/**
 * ResourceEventSource refers to a event-source for K8s resource related events.
 * @export
 * @interface IoArgoprojEventsV1alpha1ResourceEventSource
 */
export interface IoArgoprojEventsV1alpha1ResourceEventSource {
    /**
     * EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE.
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1ResourceEventSource
     */
    eventTypes?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ResourceFilter}
     * @memberof IoArgoprojEventsV1alpha1ResourceEventSource
     */
    filter?: IoArgoprojEventsV1alpha1ResourceFilter;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1GroupVersionResource}
     * @memberof IoArgoprojEventsV1alpha1ResourceEventSource
     */
    groupVersionResource?: IoK8sApimachineryPkgApisMetaV1GroupVersionResource;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1ResourceEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ResourceEventSource
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ResourceFilter
 */
export interface IoArgoprojEventsV1alpha1ResourceFilter {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1ResourceFilter
     */
    afterStart?: boolean;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojEventsV1alpha1ResourceFilter
     */
    createdBy?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1Selector>}
     * @memberof IoArgoprojEventsV1alpha1ResourceFilter
     */
    fields?: Array<IoArgoprojEventsV1alpha1Selector>;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1Selector>}
     * @memberof IoArgoprojEventsV1alpha1ResourceFilter
     */
    labels?: Array<IoArgoprojEventsV1alpha1Selector>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1ResourceFilter
     */
    prefix?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1S3Artifact
 */
export interface IoArgoprojEventsV1alpha1S3Artifact {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    accessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1S3Bucket}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    bucket?: IoArgoprojEventsV1alpha1S3Bucket;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    endpoint?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1S3Filter}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    filter?: IoArgoprojEventsV1alpha1S3Filter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    insecure?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    region?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1S3Artifact
     */
    secretKey?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1S3Bucket
 */
export interface IoArgoprojEventsV1alpha1S3Bucket {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Bucket
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Bucket
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1S3Filter
 */
export interface IoArgoprojEventsV1alpha1S3Filter {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Filter
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1S3Filter
     */
    suffix?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SASLConfig
 */
export interface IoArgoprojEventsV1alpha1SASLConfig {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SASLConfig
     */
    mechanism?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SASLConfig
     */
    password?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SASLConfig
     */
    user?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SNSEventSource
 */
export interface IoArgoprojEventsV1alpha1SNSEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    accessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    endpoint?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    roleARN?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    secretKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    topicArn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    validateSignature?: boolean;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1SNSEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SQSEventSource
 */
export interface IoArgoprojEventsV1alpha1SQSEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    accessKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    dlq?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    endpoint?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    jsonBody?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    queue?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    queueAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    roleARN?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    secretKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    sessionToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SQSEventSource
     */
    waitTimeSeconds?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SecureHeader
 */
export interface IoArgoprojEventsV1alpha1SecureHeader {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SecureHeader
     */
    name?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ValueFromSource}
     * @memberof IoArgoprojEventsV1alpha1SecureHeader
     */
    valueFrom?: IoArgoprojEventsV1alpha1ValueFromSource;
}
/**
 * Selector represents conditional operation to select K8s objects.
 * @export
 * @interface IoArgoprojEventsV1alpha1Selector
 */
export interface IoArgoprojEventsV1alpha1Selector {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Selector
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Selector
     */
    operation?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Selector
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Sensor
 */
export interface IoArgoprojEventsV1alpha1Sensor {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojEventsV1alpha1Sensor
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1SensorSpec}
     * @memberof IoArgoprojEventsV1alpha1Sensor
     */
    spec?: IoArgoprojEventsV1alpha1SensorSpec;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1SensorStatus}
     * @memberof IoArgoprojEventsV1alpha1Sensor
     */
    status?: IoArgoprojEventsV1alpha1SensorStatus;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SensorList
 */
export interface IoArgoprojEventsV1alpha1SensorList {
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1Sensor>}
     * @memberof IoArgoprojEventsV1alpha1SensorList
     */
    items?: Array<IoArgoprojEventsV1alpha1Sensor>;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojEventsV1alpha1SensorList
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SensorSpec
 */
export interface IoArgoprojEventsV1alpha1SensorSpec {
    /**
     * Dependencies is a list of the events that this sensor is dependent on.
     * @type {Array<IoArgoprojEventsV1alpha1EventDependency>}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    dependencies?: Array<IoArgoprojEventsV1alpha1EventDependency>;
    /**
     * ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    errorOnFailedRound?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    eventBusName?: string;
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    replicas?: number;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Template}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    template?: IoArgoprojEventsV1alpha1Template;
    /**
     * Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
     * @type {Array<IoArgoprojEventsV1alpha1Trigger>}
     * @memberof IoArgoprojEventsV1alpha1SensorSpec
     */
    triggers?: Array<IoArgoprojEventsV1alpha1Trigger>;
}
/**
 * SensorStatus contains information about the status of a sensor.
 * @export
 * @interface IoArgoprojEventsV1alpha1SensorStatus
 */
export interface IoArgoprojEventsV1alpha1SensorStatus {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Status}
     * @memberof IoArgoprojEventsV1alpha1SensorStatus
     */
    status?: IoArgoprojEventsV1alpha1Status;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Service
 */
export interface IoArgoprojEventsV1alpha1Service {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Service
     */
    clusterIP?: string;
    /**
     * 
     * @type {Array<IoK8sApiCoreV1ServicePort>}
     * @memberof IoArgoprojEventsV1alpha1Service
     */
    ports?: Array<IoK8sApiCoreV1ServicePort>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1SlackEventSource
 */
export interface IoArgoprojEventsV1alpha1SlackEventSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1SlackEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1SlackEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SlackEventSource
     */
    signingSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SlackEventSource
     */
    token?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1SlackEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * SlackTrigger refers to the specification of the slack notification trigger.
 * @export
 * @interface IoArgoprojEventsV1alpha1SlackTrigger
 */
export interface IoArgoprojEventsV1alpha1SlackTrigger {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SlackTrigger
     */
    channel?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1SlackTrigger
     */
    message?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1SlackTrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1SlackTrigger
     */
    slackToken?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1StandardK8STrigger
 */
export interface IoArgoprojEventsV1alpha1StandardK8STrigger {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1StandardK8STrigger
     */
    liveObject?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StandardK8STrigger
     */
    operation?: string;
    /**
     * Parameters is the list of parameters that is applied to resolved K8s trigger object.
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1StandardK8STrigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StandardK8STrigger
     */
    patchStrategy?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ArtifactLocation}
     * @memberof IoArgoprojEventsV1alpha1StandardK8STrigger
     */
    source?: IoArgoprojEventsV1alpha1ArtifactLocation;
}
/**
 * Status is a common structure which can be used for Status field.
 * @export
 * @interface IoArgoprojEventsV1alpha1Status
 */
export interface IoArgoprojEventsV1alpha1Status {
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1Condition>}
     * @memberof IoArgoprojEventsV1alpha1Status
     */
    conditions?: Array<IoArgoprojEventsV1alpha1Condition>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1StatusPolicy
 */
export interface IoArgoprojEventsV1alpha1StatusPolicy {
    /**
     * 
     * @type {Array<number>}
     * @memberof IoArgoprojEventsV1alpha1StatusPolicy
     */
    allow?: Array<number>;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1StorageGridEventSource
 */
export interface IoArgoprojEventsV1alpha1StorageGridEventSource {
    /**
     * APIURL is the url of the storagegrid api.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    apiURL?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    authToken?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Name of the bucket to register notifications for.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    bucket?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    events?: Array<string>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1StorageGridFilter}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    filter?: IoArgoprojEventsV1alpha1StorageGridFilter;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    topicArn?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1StorageGridEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1StorageGridFilter
 */
export interface IoArgoprojEventsV1alpha1StorageGridFilter {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridFilter
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1StorageGridFilter
     */
    suffix?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1StripeEventSource
 */
export interface IoArgoprojEventsV1alpha1StripeEventSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1StripeEventSource
     */
    apiKey?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1StripeEventSource
     */
    createWebhook?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojEventsV1alpha1StripeEventSource
     */
    eventFilter?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1StripeEventSource
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1StripeEventSource
     */
    webhook?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * TLSConfig refers to TLS configuration for a client.
 * @export
 * @interface IoArgoprojEventsV1alpha1TLSConfig
 */
export interface IoArgoprojEventsV1alpha1TLSConfig {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1TLSConfig
     */
    caCertSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1TLSConfig
     */
    clientCertSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1TLSConfig
     */
    clientKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1TLSConfig
     */
    insecureSkipVerify?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Template
 */
export interface IoArgoprojEventsV1alpha1Template {
    /**
     * 
     * @type {IoK8sApiCoreV1Affinity}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    affinity?: IoK8sApiCoreV1Affinity;
    /**
     * 
     * @type {IoK8sApiCoreV1Container}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    container?: IoK8sApiCoreV1Container;
    /**
     * 
     * @type {Array<IoK8sApiCoreV1LocalObjectReference>}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    imagePullSecrets?: Array<IoK8sApiCoreV1LocalObjectReference>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Metadata}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    metadata?: IoArgoprojEventsV1alpha1Metadata;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    priorityClassName?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1PodSecurityContext}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    securityContext?: IoK8sApiCoreV1PodSecurityContext;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    serviceAccountName?: string;
    /**
     * 
     * @type {Array<IoK8sApiCoreV1Toleration>}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    tolerations?: Array<IoK8sApiCoreV1Toleration>;
    /**
     * 
     * @type {Array<IoK8sApiCoreV1Volume>}
     * @memberof IoArgoprojEventsV1alpha1Template
     */
    volumes?: Array<IoK8sApiCoreV1Volume>;
}
/**
 * TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.
 * @export
 * @interface IoArgoprojEventsV1alpha1TimeFilter
 */
export interface IoArgoprojEventsV1alpha1TimeFilter {
    /**
     * Start is the beginning of a time window in UTC. Before this time, events for this dependency are ignored. Format is hh:mm:ss.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TimeFilter
     */
    start?: string;
    /**
     * Stop is the end of a time window in UTC. After or equal to this time, events for this dependency are ignored and Format is hh:mm:ss. If it is smaller than Start, it is treated as next day of Start (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TimeFilter
     */
    stop?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1Trigger
 */
export interface IoArgoprojEventsV1alpha1Trigger {
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1TriggerParameter>}
     * @memberof IoArgoprojEventsV1alpha1Trigger
     */
    parameters?: Array<IoArgoprojEventsV1alpha1TriggerParameter>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TriggerPolicy}
     * @memberof IoArgoprojEventsV1alpha1Trigger
     */
    policy?: IoArgoprojEventsV1alpha1TriggerPolicy;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1RateLimit}
     * @memberof IoArgoprojEventsV1alpha1Trigger
     */
    rateLimit?: IoArgoprojEventsV1alpha1RateLimit;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Backoff}
     * @memberof IoArgoprojEventsV1alpha1Trigger
     */
    retryStrategy?: IoArgoprojEventsV1alpha1Backoff;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TriggerTemplate}
     * @memberof IoArgoprojEventsV1alpha1Trigger
     */
    template?: IoArgoprojEventsV1alpha1TriggerTemplate;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1TriggerParameter
 */
export interface IoArgoprojEventsV1alpha1TriggerParameter {
    /**
     * Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameter
     */
    dest?: string;
    /**
     * Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameter
     */
    operation?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1TriggerParameterSource}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameter
     */
    src?: IoArgoprojEventsV1alpha1TriggerParameterSource;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1TriggerParameterSource
 */
export interface IoArgoprojEventsV1alpha1TriggerParameterSource {
    /**
     * ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    contextKey?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    contextTemplate?: string;
    /**
     * DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    dataKey?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    dataTemplate?: string;
    /**
     * DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    dependencyName?: string;
    /**
     * Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerParameterSource
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1TriggerPolicy
 */
export interface IoArgoprojEventsV1alpha1TriggerPolicy {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1K8SResourcePolicy}
     * @memberof IoArgoprojEventsV1alpha1TriggerPolicy
     */
    k8s?: IoArgoprojEventsV1alpha1K8SResourcePolicy;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1StatusPolicy}
     * @memberof IoArgoprojEventsV1alpha1TriggerPolicy
     */
    status?: IoArgoprojEventsV1alpha1StatusPolicy;
}
/**
 * TriggerTemplate is the template that describes trigger specification.
 * @export
 * @interface IoArgoprojEventsV1alpha1TriggerTemplate
 */
export interface IoArgoprojEventsV1alpha1TriggerTemplate {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1ArgoWorkflowTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    argoWorkflow?: IoArgoprojEventsV1alpha1ArgoWorkflowTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AWSLambdaTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    awsLambda?: IoArgoprojEventsV1alpha1AWSLambdaTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1AzureEventHubsTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    azureEventHubs?: IoArgoprojEventsV1alpha1AzureEventHubsTrigger;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    conditions?: string;
    /**
     * 
     * @type {Array<IoArgoprojEventsV1alpha1ConditionsResetCriteria>}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    conditionsReset?: Array<IoArgoprojEventsV1alpha1ConditionsResetCriteria>;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1CustomTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    custom?: IoArgoprojEventsV1alpha1CustomTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1HTTPTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    http?: IoArgoprojEventsV1alpha1HTTPTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1StandardK8STrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    k8s?: IoArgoprojEventsV1alpha1StandardK8STrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1KafkaTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    kafka?: IoArgoprojEventsV1alpha1KafkaTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1LogTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    log?: IoArgoprojEventsV1alpha1LogTrigger;
    /**
     * Name is a unique name of the action to take.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    name?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1NATSTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    nats?: IoArgoprojEventsV1alpha1NATSTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1OpenWhiskTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    openWhisk?: IoArgoprojEventsV1alpha1OpenWhiskTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1PulsarTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    pulsar?: IoArgoprojEventsV1alpha1PulsarTrigger;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1SlackTrigger}
     * @memberof IoArgoprojEventsV1alpha1TriggerTemplate
     */
    slack?: IoArgoprojEventsV1alpha1SlackTrigger;
}
/**
 * URLArtifact contains information about an artifact at an http endpoint.
 * @export
 * @interface IoArgoprojEventsV1alpha1URLArtifact
 */
export interface IoArgoprojEventsV1alpha1URLArtifact {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1URLArtifact
     */
    path?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojEventsV1alpha1URLArtifact
     */
    verifyCert?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1ValueFromSource
 */
export interface IoArgoprojEventsV1alpha1ValueFromSource {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojEventsV1alpha1ValueFromSource
     */
    configMapKeyRef?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1ValueFromSource
     */
    secretKeyRef?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1WatchPathConfig
 */
export interface IoArgoprojEventsV1alpha1WatchPathConfig {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WatchPathConfig
     */
    directory?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WatchPathConfig
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WatchPathConfig
     */
    pathRegexp?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1WebhookContext
 */
export interface IoArgoprojEventsV1alpha1WebhookContext {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    authSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    maxPayloadSize?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    method?: string;
    /**
     * Port on which HTTP server is listening for incoming events.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    port?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    serverCertSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    serverKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * URL is the url of the server.
     * @type {string}
     * @memberof IoArgoprojEventsV1alpha1WebhookContext
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojEventsV1alpha1WebhookEventSource
 */
export interface IoArgoprojEventsV1alpha1WebhookEventSource {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1EventSourceFilter}
     * @memberof IoArgoprojEventsV1alpha1WebhookEventSource
     */
    filter?: IoArgoprojEventsV1alpha1EventSourceFilter;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1WebhookContext}
     * @memberof IoArgoprojEventsV1alpha1WebhookEventSource
     */
    webhookContext?: IoArgoprojEventsV1alpha1WebhookContext;
}
/**
 * Amount represent a numeric amount.
 * @export
 */
export type IoArgoprojWorkflowV1alpha1Amount = number
/**
 * ArchiveStrategy describes how to archive files/directory when saving artifacts
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArchiveStrategy
 */
export interface IoArgoprojWorkflowV1alpha1ArchiveStrategy {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1NoneStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1ArchiveStrategy
     */
    none?: IoArgoprojWorkflowV1alpha1NoneStrategy;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TarStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1ArchiveStrategy
     */
    tar?: IoArgoprojWorkflowV1alpha1TarStrategy;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ZipStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1ArchiveStrategy
     */
    zip?: IoArgoprojWorkflowV1alpha1ZipStrategy;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArchivedWorkflowDeletedResponse
 */
export interface IoArgoprojWorkflowV1alpha1ArchivedWorkflowDeletedResponse {
}
/**
 * Arguments to a template
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Arguments
 */
export interface IoArgoprojWorkflowV1alpha1Arguments {
    /**
     * Artifacts is the list of artifacts to pass to the template or workflow
     * @type {Array<IoArgoprojWorkflowV1alpha1Artifact>}
     * @memberof IoArgoprojWorkflowV1alpha1Arguments
     */
    artifacts?: Array<IoArgoprojWorkflowV1alpha1Artifact>;
    /**
     * Parameters is the list of parameters to pass to the template or workflow
     * @type {Array<IoArgoprojWorkflowV1alpha1Parameter>}
     * @memberof IoArgoprojWorkflowV1alpha1Arguments
     */
    parameters?: Array<IoArgoprojWorkflowV1alpha1Parameter>;
}
/**
 * ArtGCStatus maintains state related to ArtifactGC
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtGCStatus
 */
export interface IoArgoprojWorkflowV1alpha1ArtGCStatus {
    /**
     * if this is true, we already checked to see if we need to do it and we don't
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtGCStatus
     */
    notSpecified?: boolean;
    /**
     * have completed Pods been processed? (mapped by Pod name) used to prevent re-processing the Status of a Pod more than once
     * @type {{ [key: string]: boolean; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtGCStatus
     */
    podsRecouped?: { [key: string]: boolean; };
    /**
     * have Pods been started to perform this strategy? (enables us not to re-process what we've already done)
     * @type {{ [key: string]: boolean; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtGCStatus
     */
    strategiesProcessed?: { [key: string]: boolean; };
}
/**
 * Artifact indicates an artifact to place at a specified path
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Artifact
 */
export interface IoArgoprojWorkflowV1alpha1Artifact {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArchiveStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    archive?: IoArgoprojWorkflowV1alpha1ArchiveStrategy;
    /**
     * ArchiveLogs indicates if the container logs should be archived
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactGC}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    artifactGC?: IoArgoprojWorkflowV1alpha1ArtifactGC;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactoryArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    artifactory?: IoArgoprojWorkflowV1alpha1ArtifactoryArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1AzureArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    azure?: IoArgoprojWorkflowV1alpha1AzureArtifact;
    /**
     * Has this been deleted?
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    deleted?: boolean;
    /**
     * From allows an artifact to reference an artifact from a previous step
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    from?: string;
    /**
     * FromExpression, if defined, is evaluated to specify the value for the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    fromExpression?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GCSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    gcs?: IoArgoprojWorkflowV1alpha1GCSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GitArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    git?: IoArgoprojWorkflowV1alpha1GitArtifact;
    /**
     * GlobalName exports an output artifact to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    globalName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HDFSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    hdfs?: IoArgoprojWorkflowV1alpha1HDFSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    http?: IoArgoprojWorkflowV1alpha1HTTPArtifact;
    /**
     * mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    mode?: number;
    /**
     * name of the artifact. must be unique within a template's inputs/outputs.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    name: string;
    /**
     * Make Artifacts optional, if Artifacts doesn't generate or exist
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    optional?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    oss?: IoArgoprojWorkflowV1alpha1OSSArtifact;
    /**
     * Path is the container path to the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    path?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RawArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    raw?: IoArgoprojWorkflowV1alpha1RawArtifact;
    /**
     * If mode is set, apply the permission recursively into the artifact if it is a folder
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    recurseMode?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3Artifact}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    s3?: IoArgoprojWorkflowV1alpha1S3Artifact;
    /**
     * SubPath allows an artifact to be sourced from a subpath within the specified source
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Artifact
     */
    subPath?: string;
}
/**
 * ArtifactGC describes how to delete artifacts from completed Workflows - this is embedded into the WorkflowLevelArtifactGC, and also used for individual Artifacts to override that as needed
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactGC
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactGC {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metadata}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactGC
     */
    podMetadata?: IoArgoprojWorkflowV1alpha1Metadata;
    /**
     * ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactGC
     */
    serviceAccountName?: string;
    /**
     * Strategy is the strategy to use.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactGC
     */
    strategy?: string;
}
/**
 * ArtifactGCSpec specifies the Artifacts that need to be deleted
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactGCSpec
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactGCSpec {
    /**
     * ArtifactsByNode maps Node name to information pertaining to Artifacts on that Node
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1ArtifactNodeSpec; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactGCSpec
     */
    artifactsByNode?: { [key: string]: IoArgoprojWorkflowV1alpha1ArtifactNodeSpec; };
}
/**
 * ArtifactGCStatus describes the result of the deletion
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactGCStatus
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactGCStatus {
    /**
     * ArtifactResultsByNode maps Node name to result
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1ArtifactResultNodeStatus; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactGCStatus
     */
    artifactResultsByNode?: { [key: string]: IoArgoprojWorkflowV1alpha1ArtifactResultNodeStatus; };
}
/**
 * ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactLocation
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactLocation {
    /**
     * ArchiveLogs indicates if the container logs should be archived
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactoryArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    artifactory?: IoArgoprojWorkflowV1alpha1ArtifactoryArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1AzureArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    azure?: IoArgoprojWorkflowV1alpha1AzureArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GCSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    gcs?: IoArgoprojWorkflowV1alpha1GCSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GitArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    git?: IoArgoprojWorkflowV1alpha1GitArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HDFSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    hdfs?: IoArgoprojWorkflowV1alpha1HDFSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    http?: IoArgoprojWorkflowV1alpha1HTTPArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    oss?: IoArgoprojWorkflowV1alpha1OSSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RawArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    raw?: IoArgoprojWorkflowV1alpha1RawArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3Artifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactLocation
     */
    s3?: IoArgoprojWorkflowV1alpha1S3Artifact;
}
/**
 * ArtifactNodeSpec specifies the Artifacts that need to be deleted for a given Node
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactNodeSpec
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactNodeSpec {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactLocation}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactNodeSpec
     */
    archiveLocation?: IoArgoprojWorkflowV1alpha1ArtifactLocation;
    /**
     * Artifacts maps artifact name to Artifact description
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1Artifact; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactNodeSpec
     */
    artifacts?: { [key: string]: IoArgoprojWorkflowV1alpha1Artifact; };
}
/**
 * ArtifactPaths expands a step from a collection of artifacts
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactPaths
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactPaths {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArchiveStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    archive?: IoArgoprojWorkflowV1alpha1ArchiveStrategy;
    /**
     * ArchiveLogs indicates if the container logs should be archived
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactGC}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    artifactGC?: IoArgoprojWorkflowV1alpha1ArtifactGC;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactoryArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    artifactory?: IoArgoprojWorkflowV1alpha1ArtifactoryArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1AzureArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    azure?: IoArgoprojWorkflowV1alpha1AzureArtifact;
    /**
     * Has this been deleted?
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    deleted?: boolean;
    /**
     * From allows an artifact to reference an artifact from a previous step
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    from?: string;
    /**
     * FromExpression, if defined, is evaluated to specify the value for the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    fromExpression?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GCSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    gcs?: IoArgoprojWorkflowV1alpha1GCSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GitArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    git?: IoArgoprojWorkflowV1alpha1GitArtifact;
    /**
     * GlobalName exports an output artifact to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    globalName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HDFSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    hdfs?: IoArgoprojWorkflowV1alpha1HDFSArtifact;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    http?: IoArgoprojWorkflowV1alpha1HTTPArtifact;
    /**
     * mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    mode?: number;
    /**
     * name of the artifact. must be unique within a template's inputs/outputs.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    name: string;
    /**
     * Make Artifacts optional, if Artifacts doesn't generate or exist
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    optional?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    oss?: IoArgoprojWorkflowV1alpha1OSSArtifact;
    /**
     * Path is the container path to the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    path?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RawArtifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    raw?: IoArgoprojWorkflowV1alpha1RawArtifact;
    /**
     * If mode is set, apply the permission recursively into the artifact if it is a folder
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    recurseMode?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3Artifact}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    s3?: IoArgoprojWorkflowV1alpha1S3Artifact;
    /**
     * SubPath allows an artifact to be sourced from a subpath within the specified source
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactPaths
     */
    subPath?: string;
}
/**
 * ArtifactRepository represents an artifact repository in which a controller will store its artifacts
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactRepository {
    /**
     * ArchiveLogs enables log archiving
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    artifactory?: IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1AzureArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    azure?: IoArgoprojWorkflowV1alpha1AzureArtifactRepository;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1GCSArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    gcs?: IoArgoprojWorkflowV1alpha1GCSArtifactRepository;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HDFSArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    hdfs?: IoArgoprojWorkflowV1alpha1HDFSArtifactRepository;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    oss?: IoArgoprojWorkflowV1alpha1OSSArtifactRepository;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3ArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepository
     */
    s3?: IoArgoprojWorkflowV1alpha1S3ArtifactRepository;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef {
    /**
     * The name of the config map. Defaults to \"artifact-repositories\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef
     */
    configMap?: string;
    /**
     * The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef
     */
    key?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactRepository}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
     */
    artifactRepository?: IoArgoprojWorkflowV1alpha1ArtifactRepository;
    /**
     * The name of the config map. Defaults to \"artifact-repositories\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
     */
    configMap?: string;
    /**
     * If this ref represents the default artifact repository, rather than a config map.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
     */
    _default?: boolean;
    /**
     * The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
     */
    key?: string;
    /**
     * The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found).
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
     */
    namespace?: string;
}
/**
 * ArtifactResult describes the result of attempting to delete a given Artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactResult
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactResult {
    /**
     * Error is an optional error message which should be set if Success==false
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactResult
     */
    error?: string;
    /**
     * Name is the name of the Artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactResult
     */
    name: string;
    /**
     * Success describes whether the deletion succeeded
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactResult
     */
    success?: boolean;
}
/**
 * ArtifactResultNodeStatus describes the result of the deletion on a given node
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactResultNodeStatus
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactResultNodeStatus {
    /**
     * ArtifactResults maps Artifact name to result of the deletion
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1ArtifactResult; }}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactResultNodeStatus
     */
    artifactResults?: { [key: string]: IoArgoprojWorkflowV1alpha1ArtifactResult; };
}
/**
 * ArtifactoryArtifact is the location of an artifactory artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactoryArtifact {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
     */
    passwordSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * URL of the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
     */
    url: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
     */
    usernameSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository {
    /**
     * KeyFormat defines the format of how to store keys and can reference workflow variables.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
     */
    keyFormat?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
     */
    passwordSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * RepoURL is the url for artifactory repo.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
     */
    repoURL?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
     */
    usernameSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * AzureArtifact is the location of a an Azure Storage artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1AzureArtifact
 */
export interface IoArgoprojWorkflowV1alpha1AzureArtifact {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifact
     */
    accountKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Blob is the blob name (i.e., path) in the container where the artifact resides
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifact
     */
    blob: string;
    /**
     * Container is the container where resources will be stored
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifact
     */
    container: string;
    /**
     * Endpoint is the service url associated with an account. It is most likely \"https://<ACCOUNT_NAME>.blob.core.windows.net\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifact
     */
    endpoint: string;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifact
     */
    useSDKCreds?: boolean;
}
/**
 * AzureArtifactRepository defines the controller configuration for an Azure Blob Storage artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1AzureArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1AzureArtifactRepository {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifactRepository
     */
    accountKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * BlobNameFormat is defines the format of how to store blob names. Can reference workflow variables
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifactRepository
     */
    blobNameFormat?: string;
    /**
     * Container is the container where resources will be stored
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifactRepository
     */
    container: string;
    /**
     * Endpoint is the service url associated with an account. It is most likely \"https://<ACCOUNT_NAME>.blob.core.windows.net\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifactRepository
     */
    endpoint: string;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1AzureArtifactRepository
     */
    useSDKCreds?: boolean;
}
/**
 * Backoff is a backoff strategy to use within retryStrategy
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Backoff
 */
export interface IoArgoprojWorkflowV1alpha1Backoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Backoff
     */
    duration?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1Backoff
     */
    factor?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * MaxDuration is the maximum amount of time allowed for a workflow in the backoff strategy
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Backoff
     */
    maxDuration?: string;
}
/**
 * BasicAuth describes the secret selectors required for basic authentication
 * @export
 * @interface IoArgoprojWorkflowV1alpha1BasicAuth
 */
export interface IoArgoprojWorkflowV1alpha1BasicAuth {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1BasicAuth
     */
    passwordSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1BasicAuth
     */
    usernameSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * Cache is the configuration for the type of cache to be used
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Cache
 */
export interface IoArgoprojWorkflowV1alpha1Cache {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1Cache
     */
    configMap: IoK8sApiCoreV1ConfigMapKeySelector;
}
/**
 * ClientCertAuth holds necessary information for client authentication via certificates
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClientCertAuth
 */
export interface IoArgoprojWorkflowV1alpha1ClientCertAuth {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ClientCertAuth
     */
    clientCertSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ClientCertAuth
     */
    clientKeySecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * ClusterWorkflowTemplate is the definition of a workflow template resource in cluster scope
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
     */
    spec: IoArgoprojWorkflowV1alpha1WorkflowSpec;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest
     */
    template?: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateDeleteResponse
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateDeleteResponse {
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest
     */
    template?: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate;
}
/**
 * ClusterWorkflowTemplateList is list of ClusterWorkflowTemplate resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
     */
    apiVersion?: string;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate>}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
     */
    items: Array<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest
 */
export interface IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest {
    /**
     * DEPRECATED: This field is ignored.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest
     */
    template?: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CollectEventRequest
 */
export interface IoArgoprojWorkflowV1alpha1CollectEventRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CollectEventRequest
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CollectEventResponse
 */
export interface IoArgoprojWorkflowV1alpha1CollectEventResponse {
}
/**
 * Column is a custom column that will be exposed in the Workflow List View.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Column
 */
export interface IoArgoprojWorkflowV1alpha1Column {
    /**
     * The key of the label or annotation, e.g., \"workflows.argoproj.io/completed\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Column
     */
    key: string;
    /**
     * The name of this column, e.g., \"Workflow Completed\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Column
     */
    name: string;
    /**
     * The type of this column, \"label\" or \"annotation\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Column
     */
    type: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Condition
 */
export interface IoArgoprojWorkflowV1alpha1Condition {
    /**
     * Message is the condition message
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Condition
     */
    message?: string;
    /**
     * Status is the status of the condition
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Condition
     */
    status?: string;
    /**
     * Type is the type of condition
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Condition
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ContainerNode
 */
export interface IoArgoprojWorkflowV1alpha1ContainerNode {
    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    args?: Array<string>;
    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    command?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    dependencies?: Array<string>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvVar>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    env?: Array<IoK8sApiCoreV1EnvVar>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvFromSource>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    envFrom?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    imagePullPolicy?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1Lifecycle}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    lifecycle?: IoK8sApiCoreV1Lifecycle;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    livenessProbe?: IoK8sApiCoreV1Probe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1ContainerPort>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    ports?: Array<IoK8sApiCoreV1ContainerPort>;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    readinessProbe?: IoK8sApiCoreV1Probe;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceRequirements}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    resources?: IoK8sApiCoreV1ResourceRequirements;
    /**
     * 
     * @type {IoK8sApiCoreV1SecurityContext}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    securityContext?: IoK8sApiCoreV1SecurityContext;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    startupProbe?: IoK8sApiCoreV1Probe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    terminationMessagePath?: string;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    terminationMessagePolicy?: string;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    tty?: boolean;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     * @type {Array<IoK8sApiCoreV1VolumeDevice>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    volumeDevices?: Array<IoK8sApiCoreV1VolumeDevice>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1VolumeMount>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    volumeMounts?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerNode
     */
    workingDir?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy
 */
export interface IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy {
    /**
     * Duration is the time between each retry, examples values are \"300ms\", \"1s\" or \"5m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy
     */
    duration?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy
     */
    retries: IoK8sApimachineryPkgUtilIntstrIntOrString;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ContainerSetTemplate
 */
export interface IoArgoprojWorkflowV1alpha1ContainerSetTemplate {
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1ContainerNode>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerSetTemplate
     */
    containers: Array<IoArgoprojWorkflowV1alpha1ContainerNode>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerSetTemplate
     */
    retryStrategy?: IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy;
    /**
     * 
     * @type {Array<IoK8sApiCoreV1VolumeMount>}
     * @memberof IoArgoprojWorkflowV1alpha1ContainerSetTemplate
     */
    volumeMounts?: Array<IoK8sApiCoreV1VolumeMount>;
}
/**
 * ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ContinueOn
 */
export interface IoArgoprojWorkflowV1alpha1ContinueOn {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ContinueOn
     */
    error?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ContinueOn
     */
    failed?: boolean;
}
/**
 * Counter is a Counter prometheus metric
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Counter
 */
export interface IoArgoprojWorkflowV1alpha1Counter {
    /**
     * Value is the value of the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Counter
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest
 */
export interface IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CronWorkflow}
     * @memberof IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest
     */
    cronWorkflow?: IoArgoprojWorkflowV1alpha1CronWorkflow;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest
     */
    namespace?: string;
}
/**
 * CreateS3BucketOptions options used to determine automatic automatic bucket-creation process
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CreateS3BucketOptions
 */
export interface IoArgoprojWorkflowV1alpha1CreateS3BucketOptions {
    /**
     * ObjectLocking Enable object locking
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1CreateS3BucketOptions
     */
    objectLocking?: boolean;
}
/**
 * CronWorkflow is the definition of a scheduled workflow resource
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflow
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflow {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflow
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflow
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflow
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CronWorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflow
     */
    spec: IoArgoprojWorkflowV1alpha1CronWorkflowSpec;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CronWorkflowStatus}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflow
     */
    status?: IoArgoprojWorkflowV1alpha1CronWorkflowStatus;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowDeletedResponse
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowDeletedResponse {
}
/**
 * CronWorkflowList is list of CronWorkflow resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowList
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowList
     */
    apiVersion?: string;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1CronWorkflow>}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowList
     */
    items: Array<IoArgoprojWorkflowV1alpha1CronWorkflow>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowList
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowList
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest
     */
    namespace?: string;
}
/**
 * CronWorkflowSpec is the specification of a CronWorkflow
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowSpec
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
    /**
     * ConcurrencyPolicy is the K8s-style concurrency policy that will be used
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    concurrencyPolicy?: string;
    /**
     * FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    failedJobsHistoryLimit?: number;
    /**
     * Schedule is a schedule to run the Workflow in Cron format
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    schedule: string;
    /**
     * StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    startingDeadlineSeconds?: number;
    /**
     * SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    successfulJobsHistoryLimit?: number;
    /**
     * Suspend is a flag that will stop new CronWorkflows from running if set to true
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    suspend?: boolean;
    /**
     * Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    timezone?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    workflowMetadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSpec
     */
    workflowSpec: IoArgoprojWorkflowV1alpha1WorkflowSpec;
}
/**
 * CronWorkflowStatus is the status of a CronWorkflow
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowStatus
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
    /**
     * Active is a list of active workflows stemming from this CronWorkflow
     * @type {Array<IoK8sApiCoreV1ObjectReference>}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowStatus
     */
    active: Array<IoK8sApiCoreV1ObjectReference>;
    /**
     * Conditions is a list of conditions the CronWorkflow may have
     * @type {Array<IoArgoprojWorkflowV1alpha1Condition>}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowStatus
     */
    conditions: Array<IoArgoprojWorkflowV1alpha1Condition>;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowStatus
     */
    lastScheduledTime: IoK8sApimachineryPkgApisMetaV1Time;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest
 */
export interface IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest
     */
    namespace?: string;
}
/**
 * DAGTask represents a node in the graph during DAG execution
 * @export
 * @interface IoArgoprojWorkflowV1alpha1DAGTask
 */
export interface IoArgoprojWorkflowV1alpha1DAGTask {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Arguments}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    arguments?: IoArgoprojWorkflowV1alpha1Arguments;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ContinueOn}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    continueOn?: IoArgoprojWorkflowV1alpha1ContinueOn;
    /**
     * Dependencies are name of other targets which this depends on
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    dependencies?: Array<string>;
    /**
     * Depends are name of other targets which this depends on
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    depends?: string;
    /**
     * Hooks hold the lifecycle hook which is invoked at lifecycle of task, irrespective of the success, failure, or error status of the primary task
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; }}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    hooks?: { [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; };
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Template}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    inline?: IoArgoprojWorkflowV1alpha1Template;
    /**
     * Name is the name of the target
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    name: string;
    /**
     * OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    onExit?: string;
    /**
     * Name of template to execute
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    template?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    templateRef?: IoArgoprojWorkflowV1alpha1TemplateRef;
    /**
     * When is an expression in which the task should conditionally execute
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    when?: string;
    /**
     * WithItems expands a task into multiple parallel tasks from the items in the list
     * @type {Array<IoArgoprojWorkflowV1alpha1Item>}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    withItems?: Array<IoArgoprojWorkflowV1alpha1Item>;
    /**
     * WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    withParam?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Sequence}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTask
     */
    withSequence?: IoArgoprojWorkflowV1alpha1Sequence;
}
/**
 * DAGTemplate is a template subtype for directed acyclic graph templates
 * @export
 * @interface IoArgoprojWorkflowV1alpha1DAGTemplate
 */
export interface IoArgoprojWorkflowV1alpha1DAGTemplate {
    /**
     * This flag is for DAG logic. The DAG logic has a built-in \"fail fast\" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTemplate
     */
    failFast?: boolean;
    /**
     * Target are one or more names of targets to execute in a DAG
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTemplate
     */
    target?: string;
    /**
     * Tasks are a list of DAG tasks
     * @type {Array<IoArgoprojWorkflowV1alpha1DAGTask>}
     * @memberof IoArgoprojWorkflowV1alpha1DAGTemplate
     */
    tasks: Array<IoArgoprojWorkflowV1alpha1DAGTask>;
}
/**
 * Data is a data template
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Data
 */
export interface IoArgoprojWorkflowV1alpha1Data {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1DataSource}
     * @memberof IoArgoprojWorkflowV1alpha1Data
     */
    source: IoArgoprojWorkflowV1alpha1DataSource;
    /**
     * Transformation applies a set of transformations
     * @type {Array<IoArgoprojWorkflowV1alpha1TransformationStep>}
     * @memberof IoArgoprojWorkflowV1alpha1Data
     */
    transformation: Array<IoArgoprojWorkflowV1alpha1TransformationStep>;
}
/**
 * DataSource sources external data into a data template
 * @export
 * @interface IoArgoprojWorkflowV1alpha1DataSource
 */
export interface IoArgoprojWorkflowV1alpha1DataSource {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactPaths}
     * @memberof IoArgoprojWorkflowV1alpha1DataSource
     */
    artifactPaths?: IoArgoprojWorkflowV1alpha1ArtifactPaths;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Event
 */
export interface IoArgoprojWorkflowV1alpha1Event {
    /**
     * Selector (https://github.com/antonmedv/expr) that we must must match the io.argoproj.workflow.v1alpha1. E.g. `payload.message == \"test\"`
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Event
     */
    selector: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1EventResponse
 */
export interface IoArgoprojWorkflowV1alpha1EventResponse {
}
/**
 * ExecutorConfig holds configurations of an executor container.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ExecutorConfig
 */
export interface IoArgoprojWorkflowV1alpha1ExecutorConfig {
    /**
     * ServiceAccountName specifies the service account name of the executor container.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ExecutorConfig
     */
    serviceAccountName?: string;
}
/**
 * GCSArtifact is the location of a GCS artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1GCSArtifact
 */
export interface IoArgoprojWorkflowV1alpha1GCSArtifact {
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifact
     */
    bucket?: string;
    /**
     * Key is the path in the bucket where the artifact resides
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifact
     */
    key: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifact
     */
    serviceAccountKeySecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * GCSArtifactRepository defines the controller configuration for a GCS artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1GCSArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1GCSArtifactRepository {
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifactRepository
     */
    bucket?: string;
    /**
     * KeyFormat defines the format of how to store keys and can reference workflow variables.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifactRepository
     */
    keyFormat?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1GCSArtifactRepository
     */
    serviceAccountKeySecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * Gauge is a Gauge prometheus metric
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Gauge
 */
export interface IoArgoprojWorkflowV1alpha1Gauge {
    /**
     * Operation defines the operation to apply with value and the metrics' current value
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Gauge
     */
    operation?: string;
    /**
     * Realtime emits this metric in real time if applicable
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Gauge
     */
    realtime: boolean;
    /**
     * Value is the value to be used in the operation with the metric's current value. If no operation is set, value is the value of the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Gauge
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1GetUserInfoResponse
 */
export interface IoArgoprojWorkflowV1alpha1GetUserInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    emailVerified?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    groups?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    issuer?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    serviceAccountName?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    serviceAccountNamespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GetUserInfoResponse
     */
    subject?: string;
}
/**
 * GitArtifact is the location of an git artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1GitArtifact
 */
export interface IoArgoprojWorkflowV1alpha1GitArtifact {
    /**
     * Branch is the branch to fetch when `SingleBranch` is enabled
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    branch?: string;
    /**
     * Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    depth?: number;
    /**
     * DisableSubmodules disables submodules during git clone
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    disableSubmodules?: boolean;
    /**
     * Fetch specifies a number of refs that should be fetched before checkout
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    fetch?: Array<string>;
    /**
     * InsecureIgnoreHostKey disables SSH strict host key checking during git clone
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    insecureIgnoreHostKey?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    passwordSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Repo is the git repository
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    repo: string;
    /**
     * Revision is the git commit, tag, branch to checkout
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    revision?: string;
    /**
     * SingleBranch enables single branch clone, using the `branch` parameter
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    singleBranch?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    sshPrivateKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1GitArtifact
     */
    usernameSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * HDFSArtifact is the location of an HDFS artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HDFSArtifact
 */
export interface IoArgoprojWorkflowV1alpha1HDFSArtifact {
    /**
     * Addresses is accessible addresses of HDFS name nodes
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    addresses?: Array<string>;
    /**
     * Force copies a file forcibly even if it exists
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    force?: boolean;
    /**
     * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    hdfsUser?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbCCacheSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbConfigConfigMap?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbKeytabSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbRealm?: string;
    /**
     * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbServicePrincipalName?: string;
    /**
     * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    krbUsername?: string;
    /**
     * Path is a file path in HDFS
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifact
     */
    path: string;
}
/**
 * HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1HDFSArtifactRepository {
    /**
     * Addresses is accessible addresses of HDFS name nodes
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    addresses?: Array<string>;
    /**
     * Force copies a file forcibly even if it exists
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    force?: boolean;
    /**
     * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    hdfsUser?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbCCacheSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbConfigConfigMap?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbKeytabSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbRealm?: string;
    /**
     * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbServicePrincipalName?: string;
    /**
     * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    krbUsername?: string;
    /**
     * PathFormat is defines the format of path to store a file. Can reference workflow variables
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
     */
    pathFormat?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTP
 */
export interface IoArgoprojWorkflowV1alpha1HTTP {
    /**
     * Body is content of the HTTP Request
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    body?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPBodySource}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    bodyFrom?: IoArgoprojWorkflowV1alpha1HTTPBodySource;
    /**
     * Headers are an optional list of headers to send with HTTP requests
     * @type {Array<IoArgoprojWorkflowV1alpha1HTTPHeader>}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    headers?: Array<IoArgoprojWorkflowV1alpha1HTTPHeader>;
    /**
     * InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    insecureSkipVerify?: boolean;
    /**
     * Method is HTTP methods for HTTP Request
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    method?: string;
    /**
     * SuccessCondition is an expression if evaluated to true is considered successful
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    successCondition?: string;
    /**
     * TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    timeoutSeconds?: number;
    /**
     * URL of the HTTP Request
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTP
     */
    url: string;
}
/**
 * HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTPArtifact
 */
export interface IoArgoprojWorkflowV1alpha1HTTPArtifact {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPAuth}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPArtifact
     */
    auth?: IoArgoprojWorkflowV1alpha1HTTPAuth;
    /**
     * Headers are an optional list of headers to send with HTTP requests for artifacts
     * @type {Array<IoArgoprojWorkflowV1alpha1Header>}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPArtifact
     */
    headers?: Array<IoArgoprojWorkflowV1alpha1Header>;
    /**
     * URL of the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPArtifact
     */
    url: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTPAuth
 */
export interface IoArgoprojWorkflowV1alpha1HTTPAuth {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1BasicAuth}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPAuth
     */
    basicAuth?: IoArgoprojWorkflowV1alpha1BasicAuth;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ClientCertAuth}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPAuth
     */
    clientCert?: IoArgoprojWorkflowV1alpha1ClientCertAuth;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OAuth2Auth}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPAuth
     */
    oauth2?: IoArgoprojWorkflowV1alpha1OAuth2Auth;
}
/**
 * HTTPBodySource contains the source of the HTTP body.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTPBodySource
 */
export interface IoArgoprojWorkflowV1alpha1HTTPBodySource {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPBodySource
     */
    bytes?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTPHeader
 */
export interface IoArgoprojWorkflowV1alpha1HTTPHeader {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPHeader
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPHeader
     */
    value?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTPHeaderSource}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPHeader
     */
    valueFrom?: IoArgoprojWorkflowV1alpha1HTTPHeaderSource;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1HTTPHeaderSource
 */
export interface IoArgoprojWorkflowV1alpha1HTTPHeaderSource {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1HTTPHeaderSource
     */
    secretKeyRef?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * Header indicate a key-value request header to be used when fetching artifacts over HTTP
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Header
 */
export interface IoArgoprojWorkflowV1alpha1Header {
    /**
     * Name is the header name
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Header
     */
    name: string;
    /**
     * Value is the literal value to use for the header
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Header
     */
    value: string;
}
/**
 * Histogram is a Histogram prometheus metric
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Histogram
 */
export interface IoArgoprojWorkflowV1alpha1Histogram {
    /**
     * Buckets is a list of bucket divisors for the histogram
     * @type {Array<IoArgoprojWorkflowV1alpha1Amount>}
     * @memberof IoArgoprojWorkflowV1alpha1Histogram
     */
    buckets: Array<IoArgoprojWorkflowV1alpha1Amount>;
    /**
     * Value is the value of the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Histogram
     */
    value: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1InfoResponse
 */
export interface IoArgoprojWorkflowV1alpha1InfoResponse {
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1Column>}
     * @memberof IoArgoprojWorkflowV1alpha1InfoResponse
     */
    columns?: Array<IoArgoprojWorkflowV1alpha1Column>;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1Link>}
     * @memberof IoArgoprojWorkflowV1alpha1InfoResponse
     */
    links?: Array<IoArgoprojWorkflowV1alpha1Link>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1InfoResponse
     */
    managedNamespace?: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof IoArgoprojWorkflowV1alpha1InfoResponse
     */
    modals?: { [key: string]: boolean; };
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1InfoResponse
     */
    navColor?: string;
}
/**
 * Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Inputs
 */
export interface IoArgoprojWorkflowV1alpha1Inputs {
    /**
     * Artifact are a list of artifacts passed as inputs
     * @type {Array<IoArgoprojWorkflowV1alpha1Artifact>}
     * @memberof IoArgoprojWorkflowV1alpha1Inputs
     */
    artifacts?: Array<IoArgoprojWorkflowV1alpha1Artifact>;
    /**
     * Parameters are a list of parameters passed as inputs
     * @type {Array<IoArgoprojWorkflowV1alpha1Parameter>}
     * @memberof IoArgoprojWorkflowV1alpha1Inputs
     */
    parameters?: Array<IoArgoprojWorkflowV1alpha1Parameter>;
}
/**
 * Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Item
 */
export interface IoArgoprojWorkflowV1alpha1Item {
}
/**
 * LabelKeys is list of keys
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LabelKeys
 */
export interface IoArgoprojWorkflowV1alpha1LabelKeys {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1LabelKeys
     */
    items?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LabelValueFrom
 */
export interface IoArgoprojWorkflowV1alpha1LabelValueFrom {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LabelValueFrom
     */
    expression: string;
}
/**
 * Labels is list of workflow labels
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LabelValues
 */
export interface IoArgoprojWorkflowV1alpha1LabelValues {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1LabelValues
     */
    items?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LifecycleHook
 */
export interface IoArgoprojWorkflowV1alpha1LifecycleHook {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Arguments}
     * @memberof IoArgoprojWorkflowV1alpha1LifecycleHook
     */
    arguments?: IoArgoprojWorkflowV1alpha1Arguments;
    /**
     * Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LifecycleHook
     */
    expression?: string;
    /**
     * Template is the name of the template to execute by the hook
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LifecycleHook
     */
    template?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1LifecycleHook
     */
    templateRef?: IoArgoprojWorkflowV1alpha1TemplateRef;
}
/**
 * A link to another app.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Link
 */
export interface IoArgoprojWorkflowV1alpha1Link {
    /**
     * The name of the link, E.g. \"Workflow Logs\" or \"Pod Logs\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Link
     */
    name: string;
    /**
     * \"workflow\", \"pod\", \"pod-logs\", \"event-source-logs\", \"sensor-logs\", \"workflow-list\" or \"chat\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Link
     */
    scope: string;
    /**
     * The URL. Can contain \"${metadata.namespace}\", \"${metadata.name}\", \"${status.startedAt}\", \"${status.finishedAt}\" or any other element in workflow yaml, e.g. \"${io.argoproj.workflow.v1alpha1.metadata.annotations.userDefinedKey}\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Link
     */
    url: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest
 */
export interface IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CronWorkflow}
     * @memberof IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest
     */
    cronWorkflow?: IoArgoprojWorkflowV1alpha1CronWorkflow;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1LogEntry
 */
export interface IoArgoprojWorkflowV1alpha1LogEntry {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LogEntry
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1LogEntry
     */
    podName?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ManifestFrom
 */
export interface IoArgoprojWorkflowV1alpha1ManifestFrom {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Artifact}
     * @memberof IoArgoprojWorkflowV1alpha1ManifestFrom
     */
    artifact: IoArgoprojWorkflowV1alpha1Artifact;
}
/**
 * MemoizationStatus is the status of this memoized node
 * @export
 * @interface IoArgoprojWorkflowV1alpha1MemoizationStatus
 */
export interface IoArgoprojWorkflowV1alpha1MemoizationStatus {
    /**
     * Cache is the name of the cache that was used
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MemoizationStatus
     */
    cacheName: string;
    /**
     * Hit indicates whether this node was created from a cache entry
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1MemoizationStatus
     */
    hit: boolean;
    /**
     * Key is the name of the key used for this node's cache
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MemoizationStatus
     */
    key: string;
}
/**
 * Memoization enables caching for the Outputs of the template
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Memoize
 */
export interface IoArgoprojWorkflowV1alpha1Memoize {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Cache}
     * @memberof IoArgoprojWorkflowV1alpha1Memoize
     */
    cache: IoArgoprojWorkflowV1alpha1Cache;
    /**
     * Key is the key to use as the caching key
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Memoize
     */
    key: string;
    /**
     * MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Memoize
     */
    maxAge: string;
}
/**
 * Pod metdata
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Metadata
 */
export interface IoArgoprojWorkflowV1alpha1Metadata {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1Metadata
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1Metadata
     */
    labels?: { [key: string]: string; };
}
/**
 * MetricLabel is a single label for a prometheus metric
 * @export
 * @interface IoArgoprojWorkflowV1alpha1MetricLabel
 */
export interface IoArgoprojWorkflowV1alpha1MetricLabel {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MetricLabel
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MetricLabel
     */
    value: string;
}
/**
 * Metrics are a list of metrics emitted from a Workflow/Template
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Metrics
 */
export interface IoArgoprojWorkflowV1alpha1Metrics {
    /**
     * Prometheus is a list of prometheus metrics to be emitted
     * @type {Array<IoArgoprojWorkflowV1alpha1Prometheus>}
     * @memberof IoArgoprojWorkflowV1alpha1Metrics
     */
    prometheus: Array<IoArgoprojWorkflowV1alpha1Prometheus>;
}
/**
 * Mutex holds Mutex configuration
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Mutex
 */
export interface IoArgoprojWorkflowV1alpha1Mutex {
    /**
     * name of the mutex
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Mutex
     */
    name?: string;
    /**
     * Namespace is the namespace of the mutex, default: [namespace of workflow]
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Mutex
     */
    namespace?: string;
}
/**
 * MutexHolding describes the mutex and the object which is holding it.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1MutexHolding
 */
export interface IoArgoprojWorkflowV1alpha1MutexHolding {
    /**
     * Holder is a reference to the object which holds the Mutex. Holding Scenario:   1. Current workflow's NodeID which is holding the lock.      e.g: ${NodeID} Waiting Scenario:   1. Current workflow or other workflow NodeID which is holding the lock.      e.g: ${WorkflowName}/${NodeID}
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MutexHolding
     */
    holder?: string;
    /**
     * Reference for the mutex e.g: ${namespace}/mutex/${mutexName}
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1MutexHolding
     */
    mutex?: string;
}
/**
 * MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1MutexStatus
 */
export interface IoArgoprojWorkflowV1alpha1MutexStatus {
    /**
     * Holding is a list of mutexes and their respective objects that are held by mutex lock for this io.argoproj.workflow.v1alpha1.
     * @type {Array<IoArgoprojWorkflowV1alpha1MutexHolding>}
     * @memberof IoArgoprojWorkflowV1alpha1MutexStatus
     */
    holding?: Array<IoArgoprojWorkflowV1alpha1MutexHolding>;
    /**
     * Waiting is a list of mutexes and their respective objects this workflow is waiting for.
     * @type {Array<IoArgoprojWorkflowV1alpha1MutexHolding>}
     * @memberof IoArgoprojWorkflowV1alpha1MutexStatus
     */
    waiting?: Array<IoArgoprojWorkflowV1alpha1MutexHolding>;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1NodeFlag
 */
export interface IoArgoprojWorkflowV1alpha1NodeFlag {
    /**
     * Hooked tracks whether or not this node was triggered by hook or onExit
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1NodeFlag
     */
    hooked?: boolean;
    /**
     * Retried tracks whether or not this node was retried by retryStrategy
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1NodeFlag
     */
    retried?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1NodeResult
 */
export interface IoArgoprojWorkflowV1alpha1NodeResult {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeResult
     */
    message?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Outputs}
     * @memberof IoArgoprojWorkflowV1alpha1NodeResult
     */
    outputs?: IoArgoprojWorkflowV1alpha1Outputs;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeResult
     */
    phase?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeResult
     */
    progress?: string;
}
/**
 * NodeStatus contains status information about an individual node in the workflow
 * @export
 * @interface IoArgoprojWorkflowV1alpha1NodeStatus
 */
export interface IoArgoprojWorkflowV1alpha1NodeStatus {
    /**
     * BoundaryID indicates the node ID of the associated template root node in which this node belongs to
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    boundaryID?: string;
    /**
     * Children is a list of child node IDs
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    children?: Array<string>;
    /**
     * Daemoned tracks whether or not this node was daemoned and need to be terminated
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    daemoned?: boolean;
    /**
     * DisplayName is a human readable representation of the node. Unique within a template boundary
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    displayName?: string;
    /**
     * EstimatedDuration in seconds.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    estimatedDuration?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    finishedAt?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * HostNodeName name of the Kubernetes node on which the Pod is running, if applicable
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    hostNodeName?: string;
    /**
     * ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    id: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Inputs}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    inputs?: IoArgoprojWorkflowV1alpha1Inputs;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1MemoizationStatus}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    memoizationStatus?: IoArgoprojWorkflowV1alpha1MemoizationStatus;
    /**
     * A human readable message indicating details about why the node is in this condition.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    message?: string;
    /**
     * Name is unique name in the node tree used to generate the node ID
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    name: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1NodeFlag}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    nodeFlag?: IoArgoprojWorkflowV1alpha1NodeFlag;
    /**
     * OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    outboundNodes?: Array<string>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Outputs}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    outputs?: IoArgoprojWorkflowV1alpha1Outputs;
    /**
     * Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \"Pending\", \"Running\" before the node is completed, or \"Succeeded\", \"Skipped\", \"Failed\", \"Error\", or \"Omitted\" as a final state.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    phase?: string;
    /**
     * PodIP captures the IP of the pod for daemoned steps
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    podIP?: string;
    /**
     * Progress to completion
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    progress?: string;
    /**
     * ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.
     * @type {{ [key: string]: number; }}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    resourcesDuration?: { [key: string]: number; };
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    startedAt?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    synchronizationStatus?: IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus;
    /**
     * TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    templateName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    templateRef?: IoArgoprojWorkflowV1alpha1TemplateRef;
    /**
     * TemplateScope is the template scope in which the template of this node was retrieved.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    templateScope?: string;
    /**
     * Type indicates type of node
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeStatus
     */
    type: string;
}
/**
 * NodeSynchronizationStatus stores the status of a node
 * @export
 * @interface IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
 */
export interface IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus {
    /**
     * Waiting is the name of the lock that this node is waiting for
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
     */
    waiting?: string;
}
/**
 * NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1NoneStrategy
 */
export interface IoArgoprojWorkflowV1alpha1NoneStrategy {
}
/**
 * OAuth2Auth holds all information for client authentication via OAuth2 tokens
 * @export
 * @interface IoArgoprojWorkflowV1alpha1OAuth2Auth
 */
export interface IoArgoprojWorkflowV1alpha1OAuth2Auth {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2Auth
     */
    clientIDSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2Auth
     */
    clientSecretSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1OAuth2EndpointParam>}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2Auth
     */
    endpointParams?: Array<IoArgoprojWorkflowV1alpha1OAuth2EndpointParam>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2Auth
     */
    scopes?: Array<string>;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2Auth
     */
    tokenURLSecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * EndpointParam is for requesting optional fields that should be sent in the oauth request
 * @export
 * @interface IoArgoprojWorkflowV1alpha1OAuth2EndpointParam
 */
export interface IoArgoprojWorkflowV1alpha1OAuth2EndpointParam {
    /**
     * Name is the header name
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2EndpointParam
     */
    key: string;
    /**
     * Value is the literal value to use for the header
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OAuth2EndpointParam
     */
    value?: string;
}
/**
 * OSSArtifact is the location of an Alibaba Cloud OSS artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1OSSArtifact
 */
export interface IoArgoprojWorkflowV1alpha1OSSArtifact {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    accessKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    bucket?: string;
    /**
     * CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    createBucketIfNotPresent?: boolean;
    /**
     * Endpoint is the hostname of the bucket endpoint
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    endpoint?: string;
    /**
     * Key is the path in the bucket where the artifact resides
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    key: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSLifecycleRule}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    lifecycleRule?: IoArgoprojWorkflowV1alpha1OSSLifecycleRule;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    secretKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    securityToken?: string;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifact
     */
    useSDKCreds?: boolean;
}
/**
 * OSSArtifactRepository defines the controller configuration for an OSS artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1OSSArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1OSSArtifactRepository {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    accessKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    bucket?: string;
    /**
     * CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    createBucketIfNotPresent?: boolean;
    /**
     * Endpoint is the hostname of the bucket endpoint
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    endpoint?: string;
    /**
     * KeyFormat defines the format of how to store keys and can reference workflow variables.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    keyFormat?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1OSSLifecycleRule}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    lifecycleRule?: IoArgoprojWorkflowV1alpha1OSSLifecycleRule;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    secretKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    securityToken?: string;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1OSSArtifactRepository
     */
    useSDKCreds?: boolean;
}
/**
 * OSSLifecycleRule specifies how to manage bucket's lifecycle
 * @export
 * @interface IoArgoprojWorkflowV1alpha1OSSLifecycleRule
 */
export interface IoArgoprojWorkflowV1alpha1OSSLifecycleRule {
    /**
     * MarkDeletionAfterDays is the number of days before we delete objects in the bucket
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1OSSLifecycleRule
     */
    markDeletionAfterDays?: number;
    /**
     * MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1OSSLifecycleRule
     */
    markInfrequentAccessAfterDays?: number;
}
/**
 * Outputs hold parameters, artifacts, and results from a step
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Outputs
 */
export interface IoArgoprojWorkflowV1alpha1Outputs {
    /**
     * Artifacts holds the list of output artifacts produced by a step
     * @type {Array<IoArgoprojWorkflowV1alpha1Artifact>}
     * @memberof IoArgoprojWorkflowV1alpha1Outputs
     */
    artifacts?: Array<IoArgoprojWorkflowV1alpha1Artifact>;
    /**
     * ExitCode holds the exit code of a script template
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Outputs
     */
    exitCode?: string;
    /**
     * Parameters holds the list of output parameters produced by a step
     * @type {Array<IoArgoprojWorkflowV1alpha1Parameter>}
     * @memberof IoArgoprojWorkflowV1alpha1Outputs
     */
    parameters?: Array<IoArgoprojWorkflowV1alpha1Parameter>;
    /**
     * Result holds the result (stdout) of a script template
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Outputs
     */
    result?: string;
}
/**
 * 
 * @export
 */
export type IoArgoprojWorkflowV1alpha1ParallelSteps = Array<IoArgoprojWorkflowV1alpha1WorkflowStep>
/**
 * Parameter indicate a passed string parameter to a service template with an optional default value
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Parameter
 */
export interface IoArgoprojWorkflowV1alpha1Parameter {
    /**
     * Default is the default value to use for an input parameter if a value was not supplied
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    _default?: string;
    /**
     * Description is the parameter description
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    description?: string;
    /**
     * Enum holds a list of string values to choose from, for the actual value of the parameter
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    _enum?: Array<string>;
    /**
     * GlobalName exports an output parameter to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    globalName?: string;
    /**
     * Name is the parameter name
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    name: string;
    /**
     * Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    value?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ValueFrom}
     * @memberof IoArgoprojWorkflowV1alpha1Parameter
     */
    valueFrom?: IoArgoprojWorkflowV1alpha1ValueFrom;
}
/**
 * Plugin is an Object with exactly one key
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Plugin
 */
export interface IoArgoprojWorkflowV1alpha1Plugin {
}
/**
 * PodGC describes how to delete completed pods as they complete
 * @export
 * @interface IoArgoprojWorkflowV1alpha1PodGC
 */
export interface IoArgoprojWorkflowV1alpha1PodGC {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Duration}
     * @memberof IoArgoprojWorkflowV1alpha1PodGC
     */
    deleteDelayDuration?: IoK8sApimachineryPkgApisMetaV1Duration;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1LabelSelector}
     * @memberof IoArgoprojWorkflowV1alpha1PodGC
     */
    labelSelector?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
     * Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". If unset, does not delete Pods
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1PodGC
     */
    strategy?: string;
}
/**
 * Prometheus is a prometheus metric to be emitted
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Prometheus
 */
export interface IoArgoprojWorkflowV1alpha1Prometheus {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Counter}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    counter?: IoArgoprojWorkflowV1alpha1Counter;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Gauge}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    gauge?: IoArgoprojWorkflowV1alpha1Gauge;
    /**
     * Help is a string that describes the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    help: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Histogram}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    histogram?: IoArgoprojWorkflowV1alpha1Histogram;
    /**
     * Labels is a list of metric labels
     * @type {Array<IoArgoprojWorkflowV1alpha1MetricLabel>}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    labels?: Array<IoArgoprojWorkflowV1alpha1MetricLabel>;
    /**
     * Name is the name of the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    name: string;
    /**
     * When is a conditional statement that decides when to emit the metric
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Prometheus
     */
    when?: string;
}
/**
 * RawArtifact allows raw string content to be placed as an artifact in a container
 * @export
 * @interface IoArgoprojWorkflowV1alpha1RawArtifact
 */
export interface IoArgoprojWorkflowV1alpha1RawArtifact {
    /**
     * Data is the string contents of the artifact
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RawArtifact
     */
    data: string;
}
/**
 * ResourceTemplate is a template subtype to manipulate kubernetes resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ResourceTemplate
 */
export interface IoArgoprojWorkflowV1alpha1ResourceTemplate {
    /**
     * Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    action: string;
    /**
     * FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    failureCondition?: string;
    /**
     * Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [  \"--validate=false\"  # disable resource validation ]
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    flags?: Array<string>;
    /**
     * Manifest contains the kubernetes manifest
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    manifest?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ManifestFrom}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    manifestFrom?: IoArgoprojWorkflowV1alpha1ManifestFrom;
    /**
     * MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    mergeStrategy?: string;
    /**
     * SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    setOwnerReference?: boolean;
    /**
     * SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResourceTemplate
     */
    successCondition?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
 */
export interface IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
     */
    memoized?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
     */
    namespace?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
     */
    parameters?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest
     */
    uid?: string;
}
/**
 * RetryAffinity prevents running steps on the same host.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1RetryAffinity
 */
export interface IoArgoprojWorkflowV1alpha1RetryAffinity {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RetryNodeAntiAffinity}
     * @memberof IoArgoprojWorkflowV1alpha1RetryAffinity
     */
    nodeAntiAffinity?: IoArgoprojWorkflowV1alpha1RetryNodeAntiAffinity;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
 */
export interface IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    nodeFieldSelector?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    parameters?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    restartSuccessful?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest
     */
    uid?: string;
}
/**
 * RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed. In order to prevent running steps on the same host, it uses \"kubernetes.io/hostname\".
 * @export
 * @interface IoArgoprojWorkflowV1alpha1RetryNodeAntiAffinity
 */
export interface IoArgoprojWorkflowV1alpha1RetryNodeAntiAffinity {
}
/**
 * RetryStrategy provides controls on how to retry a workflow step
 * @export
 * @interface IoArgoprojWorkflowV1alpha1RetryStrategy
 */
export interface IoArgoprojWorkflowV1alpha1RetryStrategy {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RetryAffinity}
     * @memberof IoArgoprojWorkflowV1alpha1RetryStrategy
     */
    affinity?: IoArgoprojWorkflowV1alpha1RetryAffinity;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Backoff}
     * @memberof IoArgoprojWorkflowV1alpha1RetryStrategy
     */
    backoff?: IoArgoprojWorkflowV1alpha1Backoff;
    /**
     * Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryStrategy
     */
    expression?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1RetryStrategy
     */
    limit?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * RetryPolicy is a policy of NodePhase statuses that will be retried
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1RetryStrategy
     */
    retryPolicy?: string;
}
/**
 * S3Artifact is the location of an S3 artifact
 * @export
 * @interface IoArgoprojWorkflowV1alpha1S3Artifact
 */
export interface IoArgoprojWorkflowV1alpha1S3Artifact {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    accessKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    bucket?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    caSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CreateS3BucketOptions}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    createBucketIfNotPresent?: IoArgoprojWorkflowV1alpha1CreateS3BucketOptions;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3EncryptionOptions}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    encryptionOptions?: IoArgoprojWorkflowV1alpha1S3EncryptionOptions;
    /**
     * Endpoint is the hostname of the bucket endpoint
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    endpoint?: string;
    /**
     * Insecure will connect to the service with TLS
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    insecure?: boolean;
    /**
     * Key is the key in the bucket where the artifact resides
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    key?: string;
    /**
     * Region contains the optional bucket region
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    region?: string;
    /**
     * RoleARN is the Amazon Resource Name (ARN) of the role to assume.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    roleARN?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    secretKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1S3Artifact
     */
    useSDKCreds?: boolean;
}
/**
 * S3ArtifactRepository defines the controller configuration for an S3 artifact repository
 * @export
 * @interface IoArgoprojWorkflowV1alpha1S3ArtifactRepository
 */
export interface IoArgoprojWorkflowV1alpha1S3ArtifactRepository {
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    accessKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * Bucket is the name of the bucket
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    bucket?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    caSecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CreateS3BucketOptions}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    createBucketIfNotPresent?: IoArgoprojWorkflowV1alpha1CreateS3BucketOptions;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1S3EncryptionOptions}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    encryptionOptions?: IoArgoprojWorkflowV1alpha1S3EncryptionOptions;
    /**
     * Endpoint is the hostname of the bucket endpoint
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    endpoint?: string;
    /**
     * Insecure will connect to the service with TLS
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    insecure?: boolean;
    /**
     * KeyFormat defines the format of how to store keys and can reference workflow variables.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    keyFormat?: string;
    /**
     * KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    keyPrefix?: string;
    /**
     * Region contains the optional bucket region
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    region?: string;
    /**
     * RoleARN is the Amazon Resource Name (ARN) of the role to assume.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    roleARN?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    secretKeySecret?: IoK8sApiCoreV1SecretKeySelector;
    /**
     * UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1S3ArtifactRepository
     */
    useSDKCreds?: boolean;
}
/**
 * S3EncryptionOptions used to determine encryption options during s3 operations
 * @export
 * @interface IoArgoprojWorkflowV1alpha1S3EncryptionOptions
 */
export interface IoArgoprojWorkflowV1alpha1S3EncryptionOptions {
    /**
     * EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1S3EncryptionOptions
     */
    enableEncryption?: boolean;
    /**
     * KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3EncryptionOptions
     */
    kmsEncryptionContext?: string;
    /**
     * KMSKeyId tells the driver to encrypt the object using the specified KMS Key.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1S3EncryptionOptions
     */
    kmsKeyId?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1S3EncryptionOptions
     */
    serverSideCustomerKeySecret?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * ScriptTemplate is a template subtype to enable scripting through code steps
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ScriptTemplate
 */
export interface IoArgoprojWorkflowV1alpha1ScriptTemplate {
    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    args?: Array<string>;
    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    command?: Array<string>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvVar>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    env?: Array<IoK8sApiCoreV1EnvVar>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvFromSource>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    envFrom?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    image: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    imagePullPolicy?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1Lifecycle}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    lifecycle?: IoK8sApiCoreV1Lifecycle;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    livenessProbe?: IoK8sApiCoreV1Probe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    name?: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1ContainerPort>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    ports?: Array<IoK8sApiCoreV1ContainerPort>;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    readinessProbe?: IoK8sApiCoreV1Probe;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceRequirements}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    resources?: IoK8sApiCoreV1ResourceRequirements;
    /**
     * 
     * @type {IoK8sApiCoreV1SecurityContext}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    securityContext?: IoK8sApiCoreV1SecurityContext;
    /**
     * Source contains the source code of the script to execute
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    source: string;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    startupProbe?: IoK8sApiCoreV1Probe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    terminationMessagePath?: string;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    terminationMessagePolicy?: string;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    tty?: boolean;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     * @type {Array<IoK8sApiCoreV1VolumeDevice>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    volumeDevices?: Array<IoK8sApiCoreV1VolumeDevice>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1VolumeMount>}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    volumeMounts?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ScriptTemplate
     */
    workingDir?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SemaphoreHolding
 */
export interface IoArgoprojWorkflowV1alpha1SemaphoreHolding {
    /**
     * Holders stores the list of current holder names in the io.argoproj.workflow.v1alpha1.
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreHolding
     */
    holders?: Array<string>;
    /**
     * Semaphore stores the semaphore name.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreHolding
     */
    semaphore?: string;
}
/**
 * SemaphoreRef is a reference of Semaphore
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SemaphoreRef
 */
export interface IoArgoprojWorkflowV1alpha1SemaphoreRef {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreRef
     */
    configMapKeyRef?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * Namespace is the namespace of the configmap, default: [namespace of workflow]
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreRef
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SemaphoreStatus
 */
export interface IoArgoprojWorkflowV1alpha1SemaphoreStatus {
    /**
     * Holding stores the list of resource acquired synchronization lock for workflows.
     * @type {Array<IoArgoprojWorkflowV1alpha1SemaphoreHolding>}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreStatus
     */
    holding?: Array<IoArgoprojWorkflowV1alpha1SemaphoreHolding>;
    /**
     * Waiting indicates the list of current synchronization lock holders.
     * @type {Array<IoArgoprojWorkflowV1alpha1SemaphoreHolding>}
     * @memberof IoArgoprojWorkflowV1alpha1SemaphoreStatus
     */
    waiting?: Array<IoArgoprojWorkflowV1alpha1SemaphoreHolding>;
}
/**
 * Sequence expands a workflow step into numeric range
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Sequence
 */
export interface IoArgoprojWorkflowV1alpha1Sequence {
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1Sequence
     */
    count?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1Sequence
     */
    end?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * Format is a printf format string to format the value in the sequence
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Sequence
     */
    format?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1Sequence
     */
    start?: IoK8sApimachineryPkgUtilIntstrIntOrString;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Submit
 */
export interface IoArgoprojWorkflowV1alpha1Submit {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Arguments}
     * @memberof IoArgoprojWorkflowV1alpha1Submit
     */
    arguments?: IoArgoprojWorkflowV1alpha1Arguments;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1Submit
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowTemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1Submit
     */
    workflowTemplateRef: IoArgoprojWorkflowV1alpha1WorkflowTemplateRef;
}
/**
 * SubmitOpts are workflow submission options
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SubmitOpts
 */
export interface IoArgoprojWorkflowV1alpha1SubmitOpts {
    /**
     * Annotations adds to metadata.labels
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    annotations?: string;
    /**
     * DryRun validates the workflow on the client-side without creating it. This option is not supported in API
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    dryRun?: boolean;
    /**
     * Entrypoint overrides spec.entrypoint
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    entryPoint?: string;
    /**
     * GenerateName overrides metadata.generateName
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    generateName?: string;
    /**
     * Labels adds to metadata.labels
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    labels?: string;
    /**
     * Name overrides metadata.name
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    name?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1OwnerReference}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    ownerReference?: IoK8sApimachineryPkgApisMetaV1OwnerReference;
    /**
     * Parameters passes input parameters to workflow
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    parameters?: Array<string>;
    /**
     * Set the podPriorityClassName of the workflow
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    podPriorityClassName?: string;
    /**
     * Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    priority?: number;
    /**
     * ServerDryRun validates the workflow on the server-side without creating it
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    serverDryRun?: boolean;
    /**
     * ServiceAccount runs all pods in the workflow using specified ServiceAccount.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SubmitOpts
     */
    serviceAccount?: string;
}
/**
 * SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SuppliedValueFrom
 */
export interface IoArgoprojWorkflowV1alpha1SuppliedValueFrom {
}
/**
 * SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SuspendTemplate
 */
export interface IoArgoprojWorkflowV1alpha1SuspendTemplate {
    /**
     * Duration is the seconds to wait before automatically resuming a template. Must be a string. Default unit is seconds. Could also be a Duration, e.g.: \"2m\", \"6h\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1SuspendTemplate
     */
    duration?: string;
}
/**
 * Synchronization holds synchronization lock configuration
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Synchronization
 */
export interface IoArgoprojWorkflowV1alpha1Synchronization {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Mutex}
     * @memberof IoArgoprojWorkflowV1alpha1Synchronization
     */
    mutex?: IoArgoprojWorkflowV1alpha1Mutex;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SemaphoreRef}
     * @memberof IoArgoprojWorkflowV1alpha1Synchronization
     */
    semaphore?: IoArgoprojWorkflowV1alpha1SemaphoreRef;
}
/**
 * SynchronizationStatus stores the status of semaphore and mutex.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1SynchronizationStatus
 */
export interface IoArgoprojWorkflowV1alpha1SynchronizationStatus {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1MutexStatus}
     * @memberof IoArgoprojWorkflowV1alpha1SynchronizationStatus
     */
    mutex?: IoArgoprojWorkflowV1alpha1MutexStatus;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SemaphoreStatus}
     * @memberof IoArgoprojWorkflowV1alpha1SynchronizationStatus
     */
    semaphore?: IoArgoprojWorkflowV1alpha1SemaphoreStatus;
}
/**
 * TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed
 * @export
 * @interface IoArgoprojWorkflowV1alpha1TTLStrategy
 */
export interface IoArgoprojWorkflowV1alpha1TTLStrategy {
    /**
     * SecondsAfterCompletion is the number of seconds to live after completion
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1TTLStrategy
     */
    secondsAfterCompletion?: number;
    /**
     * SecondsAfterFailure is the number of seconds to live after failure
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1TTLStrategy
     */
    secondsAfterFailure?: number;
    /**
     * SecondsAfterSuccess is the number of seconds to live after success
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1TTLStrategy
     */
    secondsAfterSuccess?: number;
}
/**
 * TarStrategy will tar and gzip the file or directory when saving
 * @export
 * @interface IoArgoprojWorkflowV1alpha1TarStrategy
 */
export interface IoArgoprojWorkflowV1alpha1TarStrategy {
    /**
     * CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1TarStrategy
     */
    compressionLevel?: number;
}
/**
 * Template is a reusable and composable unit of execution in a workflow
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Template
 */
export interface IoArgoprojWorkflowV1alpha1Template {
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    activeDeadlineSeconds?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * 
     * @type {IoK8sApiCoreV1Affinity}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    affinity?: IoK8sApiCoreV1Affinity;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactLocation}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    archiveLocation?: IoArgoprojWorkflowV1alpha1ArtifactLocation;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    automountServiceAccountToken?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1Container}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    container?: IoK8sApiCoreV1Container;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ContainerSetTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    containerSet?: IoArgoprojWorkflowV1alpha1ContainerSetTemplate;
    /**
     * Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    daemon?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1DAGTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    dag?: IoArgoprojWorkflowV1alpha1DAGTemplate;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Data}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    data?: IoArgoprojWorkflowV1alpha1Data;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ExecutorConfig}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    executor?: IoArgoprojWorkflowV1alpha1ExecutorConfig;
    /**
     * FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with `withItems`, etc.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    failFast?: boolean;
    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod spec
     * @type {Array<IoK8sApiCoreV1HostAlias>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    hostAliases?: Array<IoK8sApiCoreV1HostAlias>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1HTTP}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    http?: IoArgoprojWorkflowV1alpha1HTTP;
    /**
     * InitContainers is a list of containers which run before the main container.
     * @type {Array<IoArgoprojWorkflowV1alpha1UserContainer>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    initContainers?: Array<IoArgoprojWorkflowV1alpha1UserContainer>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Inputs}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    inputs?: IoArgoprojWorkflowV1alpha1Inputs;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Memoize}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    memoize?: IoArgoprojWorkflowV1alpha1Memoize;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metadata}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    metadata?: IoArgoprojWorkflowV1alpha1Metadata;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metrics}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    metrics?: IoArgoprojWorkflowV1alpha1Metrics;
    /**
     * Name is the name of the template
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    name?: string;
    /**
     * NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Outputs}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    outputs?: IoArgoprojWorkflowV1alpha1Outputs;
    /**
     * Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    parallelism?: number;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Plugin}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    plugin?: IoArgoprojWorkflowV1alpha1Plugin;
    /**
     * PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    podSpecPatch?: string;
    /**
     * Priority to apply to workflow pods.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    priority?: number;
    /**
     * PriorityClassName to apply to workflow pods.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    priorityClassName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ResourceTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    resource?: IoArgoprojWorkflowV1alpha1ResourceTemplate;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RetryStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    retryStrategy?: IoArgoprojWorkflowV1alpha1RetryStrategy;
    /**
     * If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    schedulerName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ScriptTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    script?: IoArgoprojWorkflowV1alpha1ScriptTemplate;
    /**
     * 
     * @type {IoK8sApiCoreV1PodSecurityContext}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    securityContext?: IoK8sApiCoreV1PodSecurityContext;
    /**
     * ServiceAccountName to apply to workflow pods
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    serviceAccountName?: string;
    /**
     * Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes
     * @type {Array<IoArgoprojWorkflowV1alpha1UserContainer>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    sidecars?: Array<IoArgoprojWorkflowV1alpha1UserContainer>;
    /**
     * Steps define a series of sequential/parallel workflow steps
     * @type {Array<IoArgoprojWorkflowV1alpha1ParallelSteps>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    steps?: Array<IoArgoprojWorkflowV1alpha1ParallelSteps>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SuspendTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    suspend?: IoArgoprojWorkflowV1alpha1SuspendTemplate;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Synchronization}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    synchronization?: IoArgoprojWorkflowV1alpha1Synchronization;
    /**
     * Timeout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    timeout?: string;
    /**
     * Tolerations to apply to workflow pods.
     * @type {Array<IoK8sApiCoreV1Toleration>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    tolerations?: Array<IoK8sApiCoreV1Toleration>;
    /**
     * Volumes is a list of volumes that can be mounted by containers in a template.
     * @type {Array<IoK8sApiCoreV1Volume>}
     * @memberof IoArgoprojWorkflowV1alpha1Template
     */
    volumes?: Array<IoK8sApiCoreV1Volume>;
}
/**
 * TemplateRef is a reference of template resource.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1TemplateRef
 */
export interface IoArgoprojWorkflowV1alpha1TemplateRef {
    /**
     * ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1TemplateRef
     */
    clusterScope?: boolean;
    /**
     * Name is the resource name of the template.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1TemplateRef
     */
    name?: string;
    /**
     * Template is the name of referred template in the resource.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1TemplateRef
     */
    template?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1TransformationStep
 */
export interface IoArgoprojWorkflowV1alpha1TransformationStep {
    /**
     * Expression defines an expr expression to apply
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1TransformationStep
     */
    expression: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest
 */
export interface IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1CronWorkflow}
     * @memberof IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest
     */
    cronWorkflow?: IoArgoprojWorkflowV1alpha1CronWorkflow;
    /**
     * DEPRECATED: This field is ignored.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest
     */
    namespace?: string;
}
/**
 * UserContainer is a container specified by a user.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1UserContainer
 */
export interface IoArgoprojWorkflowV1alpha1UserContainer {
    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    args?: Array<string>;
    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    command?: Array<string>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvVar>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    env?: Array<IoK8sApiCoreV1EnvVar>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvFromSource>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    envFrom?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    imagePullPolicy?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1Lifecycle}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    lifecycle?: IoK8sApiCoreV1Lifecycle;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    livenessProbe?: IoK8sApiCoreV1Probe;
    /**
     * MirrorVolumeMounts will mount the same volumes specified in the main container to the container (including artifacts), at the same mountPaths. This enables dind daemon to partially see the same filesystem as the main container in order to use features such as docker volume binding
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    mirrorVolumeMounts?: boolean;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1ContainerPort>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    ports?: Array<IoK8sApiCoreV1ContainerPort>;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    readinessProbe?: IoK8sApiCoreV1Probe;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceRequirements}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    resources?: IoK8sApiCoreV1ResourceRequirements;
    /**
     * 
     * @type {IoK8sApiCoreV1SecurityContext}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    securityContext?: IoK8sApiCoreV1SecurityContext;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    startupProbe?: IoK8sApiCoreV1Probe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    terminationMessagePath?: string;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    terminationMessagePolicy?: string;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    tty?: boolean;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     * @type {Array<IoK8sApiCoreV1VolumeDevice>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    volumeDevices?: Array<IoK8sApiCoreV1VolumeDevice>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1VolumeMount>}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    volumeMounts?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1UserContainer
     */
    workingDir?: string;
}
/**
 * ValueFrom describes a location in which to obtain the value to a parameter
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ValueFrom
 */
export interface IoArgoprojWorkflowV1alpha1ValueFrom {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    configMapKeyRef?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * Default specifies a value to be used if retrieving the value from the specified source fails
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    _default?: string;
    /**
     * Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    event?: string;
    /**
     * Expression, if defined, is evaluated to specify the value for the parameter
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    expression?: string;
    /**
     * JQFilter expression against the resource object in resource templates
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    jqFilter?: string;
    /**
     * JSONPath of a resource to retrieve an output parameter value from in resource templates
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    jsonPath?: string;
    /**
     * Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    parameter?: string;
    /**
     * Path in the container to retrieve an output parameter value from in container templates
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    path?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SuppliedValueFrom}
     * @memberof IoArgoprojWorkflowV1alpha1ValueFrom
     */
    supplied?: IoArgoprojWorkflowV1alpha1SuppliedValueFrom;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Version
 */
export interface IoArgoprojWorkflowV1alpha1Version {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    buildDate: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    compiler: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    gitCommit: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    gitTag: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    gitTreeState: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    goVersion: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    platform: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Version
     */
    version: string;
}
/**
 * VolumeClaimGC describes how to delete volumes from completed Workflows
 * @export
 * @interface IoArgoprojWorkflowV1alpha1VolumeClaimGC
 */
export interface IoArgoprojWorkflowV1alpha1VolumeClaimGC {
    /**
     * Strategy is the strategy to use. One of \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". Defaults to \"OnWorkflowSuccess\"
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1VolumeClaimGC
     */
    strategy?: string;
}
/**
 * Workflow is the definition of a workflow resource
 * @export
 * @interface IoArgoprojWorkflowV1alpha1Workflow
 */
export interface IoArgoprojWorkflowV1alpha1Workflow {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Workflow
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1Workflow
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1Workflow
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1Workflow
     */
    spec: IoArgoprojWorkflowV1alpha1WorkflowSpec;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowStatus}
     * @memberof IoArgoprojWorkflowV1alpha1Workflow
     */
    status?: IoArgoprojWorkflowV1alpha1WorkflowStatus;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowCreateRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * This field is no longer used.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
     */
    instanceID?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
     */
    namespace?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
     */
    serverDryRun?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Workflow}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
     */
    workflow?: IoArgoprojWorkflowV1alpha1Workflow;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse {
}
/**
 * WorkflowEventBinding is the definition of an event resource
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowEventBinding
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowEventBinding {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBinding
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBinding
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBinding
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBinding
     */
    spec: IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec;
}
/**
 * WorkflowEventBindingList is list of event resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowEventBindingList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
     */
    apiVersion?: string;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1WorkflowEventBinding>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
     */
    items: Array<IoArgoprojWorkflowV1alpha1WorkflowEventBinding>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Event}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec
     */
    event: IoArgoprojWorkflowV1alpha1Event;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Submit}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowEventBindingSpec
     */
    submit?: IoArgoprojWorkflowV1alpha1Submit;
}
/**
 * WorkflowLevelArtifactGC describes how to delete artifacts from completed Workflows - this spec is used on the Workflow level
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC {
    /**
     * ForceFinalizerRemoval: if set to true, the finalizer will be removed in the case that Artifact GC fails
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
     */
    forceFinalizerRemoval?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metadata}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
     */
    podMetadata?: IoArgoprojWorkflowV1alpha1Metadata;
    /**
     * PodSpecPatch holds strategic merge patch to apply against the artgc pod spec.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
     */
    podSpecPatch?: string;
    /**
     * ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
     */
    serviceAccountName?: string;
    /**
     * Strategy is the strategy to use.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC
     */
    strategy?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowLintRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowLintRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLintRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Workflow}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowLintRequest
     */
    workflow?: IoArgoprojWorkflowV1alpha1Workflow;
}
/**
 * WorkflowList is list of Workflow resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowList
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowList
     */
    apiVersion?: string;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1Workflow>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowList
     */
    items: Array<IoArgoprojWorkflowV1alpha1Workflow>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowList
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowList
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowMetadata
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowMetadata {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowMetadata
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowMetadata
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1LabelValueFrom; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowMetadata
     */
    labelsFrom?: { [key: string]: IoArgoprojWorkflowV1alpha1LabelValueFrom; };
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest {
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
     */
    memoized?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
     */
    namespace?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
     */
    parameters?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowResumeRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowResumeRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResumeRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResumeRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowResumeRequest
     */
    nodeFieldSelector?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowRetryRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
     */
    nodeFieldSelector?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
     */
    parameters?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
     */
    restartSuccessful?: boolean;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowSetRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowSetRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    nodeFieldSelector?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    outputParameters?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSetRequest
     */
    phase?: string;
}
/**
 * WorkflowSpec is the specification of a Workflow.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowSpec
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowSpec {
    /**
     * Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the io.argoproj.workflow.v1alpha1. A value of zero is used to terminate a Running workflow
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    activeDeadlineSeconds?: number;
    /**
     * 
     * @type {IoK8sApiCoreV1Affinity}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    affinity?: IoK8sApiCoreV1Affinity;
    /**
     * ArchiveLogs indicates if the container logs should be archived
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Arguments}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    arguments?: IoArgoprojWorkflowV1alpha1Arguments;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    artifactGC?: IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    artifactRepositoryRef?: IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    automountServiceAccountToken?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1PodDNSConfig}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    dnsConfig?: IoK8sApiCoreV1PodDNSConfig;
    /**
     * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    dnsPolicy?: string;
    /**
     * Entrypoint is a template reference to the starting point of the io.argoproj.workflow.v1alpha1.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    entrypoint?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ExecutorConfig}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    executor?: IoArgoprojWorkflowV1alpha1ExecutorConfig;
    /**
     * Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    hooks?: { [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; };
    /**
     * 
     * @type {Array<IoK8sApiCoreV1HostAlias>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    hostAliases?: Array<IoK8sApiCoreV1HostAlias>;
    /**
     * Host networking requested for this workflow pod. Default to false.
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    hostNetwork?: boolean;
    /**
     * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     * @type {Array<IoK8sApiCoreV1LocalObjectReference>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    imagePullSecrets?: Array<IoK8sApiCoreV1LocalObjectReference>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metrics}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    metrics?: IoArgoprojWorkflowV1alpha1Metrics;
    /**
     * NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.
     * @type {{ [key: string]: string; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary io.argoproj.workflow.v1alpha1.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    onExit?: string;
    /**
     * Parallelism limits the max total parallel pods that can execute at the same time in a workflow
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    parallelism?: number;
    /**
     * 
     * @type {IoK8sApiPolicyV1PodDisruptionBudgetSpec}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podDisruptionBudget?: IoK8sApiPolicyV1PodDisruptionBudgetSpec;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1PodGC}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podGC?: IoArgoprojWorkflowV1alpha1PodGC;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Metadata}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podMetadata?: IoArgoprojWorkflowV1alpha1Metadata;
    /**
     * Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podPriority?: number;
    /**
     * PriorityClassName to apply to workflow pods.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podPriorityClassName?: string;
    /**
     * PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    podSpecPatch?: string;
    /**
     * Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    priority?: number;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1RetryStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    retryStrategy?: IoArgoprojWorkflowV1alpha1RetryStrategy;
    /**
     * Set scheduler name for all pods. Will be overridden if container/script template's scheduler name is set. Default scheduler will be used if neither specified.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    schedulerName?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1PodSecurityContext}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    securityContext?: IoK8sApiCoreV1PodSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    serviceAccountName?: string;
    /**
     * Shutdown will shutdown the workflow according to its ShutdownStrategy
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    shutdown?: string;
    /**
     * Suspend will suspend the workflow and prevent execution of any future steps in the workflow
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    suspend?: boolean;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Synchronization}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    synchronization?: IoArgoprojWorkflowV1alpha1Synchronization;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Template}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    templateDefaults?: IoArgoprojWorkflowV1alpha1Template;
    /**
     * Templates is a list of workflow templates used in a workflow
     * @type {Array<IoArgoprojWorkflowV1alpha1Template>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    templates?: Array<IoArgoprojWorkflowV1alpha1Template>;
    /**
     * Tolerations to apply to workflow pods.
     * @type {Array<IoK8sApiCoreV1Toleration>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    tolerations?: Array<IoK8sApiCoreV1Toleration>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TTLStrategy}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    ttlStrategy?: IoArgoprojWorkflowV1alpha1TTLStrategy;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1VolumeClaimGC}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    volumeClaimGC?: IoArgoprojWorkflowV1alpha1VolumeClaimGC;
    /**
     * VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow
     * @type {Array<IoK8sApiCoreV1PersistentVolumeClaim>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    volumeClaimTemplates?: Array<IoK8sApiCoreV1PersistentVolumeClaim>;
    /**
     * Volumes is a list of volumes that can be mounted by containers in a io.argoproj.workflow.v1alpha1.
     * @type {Array<IoK8sApiCoreV1Volume>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    volumes?: Array<IoK8sApiCoreV1Volume>;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowMetadata}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    workflowMetadata?: IoArgoprojWorkflowV1alpha1WorkflowMetadata;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowTemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSpec
     */
    workflowTemplateRef?: IoArgoprojWorkflowV1alpha1WorkflowTemplateRef;
}
/**
 * WorkflowStatus contains overall status information about a workflow
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowStatus
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowStatus {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtGCStatus}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    artifactGCStatus?: IoArgoprojWorkflowV1alpha1ArtGCStatus;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    artifactRepositoryRef?: IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus;
    /**
     * Compressed and base64 decoded Nodes map
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    compressedNodes?: string;
    /**
     * Conditions is a list of conditions the Workflow may have
     * @type {Array<IoArgoprojWorkflowV1alpha1Condition>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    conditions?: Array<IoArgoprojWorkflowV1alpha1Condition>;
    /**
     * EstimatedDuration in seconds.
     * @type {number}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    estimatedDuration?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    finishedAt?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * A human readable message indicating details about why the workflow is in this condition.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    message?: string;
    /**
     * Nodes is a mapping between a node ID and the node's status.
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1NodeStatus; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    nodes?: { [key: string]: IoArgoprojWorkflowV1alpha1NodeStatus; };
    /**
     * Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    offloadNodeStatusVersion?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Outputs}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    outputs?: IoArgoprojWorkflowV1alpha1Outputs;
    /**
     * PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
     * @type {Array<IoK8sApiCoreV1Volume>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    persistentVolumeClaims?: Array<IoK8sApiCoreV1Volume>;
    /**
     * Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \"\" (Unknown), \"Pending\", or \"Running\" before the workflow is completed, and \"Succeeded\", \"Failed\" or \"Error\" once the workflow has completed.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    phase?: string;
    /**
     * Progress to completion
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    progress?: string;
    /**
     * ResourcesDuration is the total for the workflow
     * @type {{ [key: string]: number; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    resourcesDuration?: { [key: string]: number; };
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    startedAt?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * StoredTemplates is a mapping between a template ref and the node's status.
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1Template; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    storedTemplates?: { [key: string]: IoArgoprojWorkflowV1alpha1Template; };
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    storedWorkflowTemplateSpec?: IoArgoprojWorkflowV1alpha1WorkflowSpec;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SynchronizationStatus}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    synchronization?: IoArgoprojWorkflowV1alpha1SynchronizationStatus;
    /**
     * Have task results been completed? (mapped by Pod name) used to prevent premature garbage collection of artifacts.
     * @type {{ [key: string]: boolean; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStatus
     */
    taskResultsCompleted?: { [key: string]: boolean; };
}
/**
 * WorkflowStep is a reference to a template to execute in a series of step
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowStep
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowStep {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Arguments}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    arguments?: IoArgoprojWorkflowV1alpha1Arguments;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1ContinueOn}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    continueOn?: IoArgoprojWorkflowV1alpha1ContinueOn;
    /**
     * Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    hooks?: { [key: string]: IoArgoprojWorkflowV1alpha1LifecycleHook; };
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Template}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    inline?: IoArgoprojWorkflowV1alpha1Template;
    /**
     * Name of the step
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    name?: string;
    /**
     * OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    onExit?: string;
    /**
     * Template is the name of the template to execute as the step
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    template?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1TemplateRef}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    templateRef?: IoArgoprojWorkflowV1alpha1TemplateRef;
    /**
     * When is an expression in which the step should conditionally execute
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    when?: string;
    /**
     * WithItems expands a step into multiple parallel steps from the items in the list
     * @type {Array<IoArgoprojWorkflowV1alpha1Item>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    withItems?: Array<IoArgoprojWorkflowV1alpha1Item>;
    /**
     * WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    withParam?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Sequence}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStep
     */
    withSequence?: IoArgoprojWorkflowV1alpha1Sequence;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowStopRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowStopRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStopRequest
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStopRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStopRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowStopRequest
     */
    nodeFieldSelector?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
     */
    resourceKind?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
     */
    resourceName?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1SubmitOpts}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
     */
    submitOptions?: IoArgoprojWorkflowV1alpha1SubmitOpts;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTaskSetSpec
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTaskSetSpec {
    /**
     * 
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1Template; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTaskSetSpec
     */
    tasks?: { [key: string]: IoArgoprojWorkflowV1alpha1Template; };
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTaskSetStatus
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTaskSetStatus {
    /**
     * 
     * @type {{ [key: string]: IoArgoprojWorkflowV1alpha1NodeResult; }}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTaskSetStatus
     */
    nodes?: { [key: string]: IoArgoprojWorkflowV1alpha1NodeResult; };
}
/**
 * WorkflowTemplate is the definition of a workflow template resource
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplate
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplate {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplate
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplate
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplate
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowSpec}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplate
     */
    spec: IoArgoprojWorkflowV1alpha1WorkflowSpec;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest
     */
    template?: IoArgoprojWorkflowV1alpha1WorkflowTemplate;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateDeleteResponse
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateDeleteResponse {
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest
     */
    template?: IoArgoprojWorkflowV1alpha1WorkflowTemplate;
}
/**
 * WorkflowTemplateList is list of WorkflowTemplate resources
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateList
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateList
     */
    apiVersion?: string;
    /**
     * 
     * @type {Array<IoArgoprojWorkflowV1alpha1WorkflowTemplate>}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateList
     */
    items: Array<IoArgoprojWorkflowV1alpha1WorkflowTemplate>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.io.k8s.community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateList
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateList
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * WorkflowTemplateRef is a reference to a WorkflowTemplate resource.
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateRef {
    /**
     * ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).
     * @type {boolean}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
     */
    clusterScope?: boolean;
    /**
     * Name is the resource name of the workflow template.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest {
    /**
     * DEPRECATED: This field is ignored.
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowTemplate}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest
     */
    template?: IoArgoprojWorkflowV1alpha1WorkflowTemplate;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest {
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest
     */
    namespace?: string;
}
/**
 * 
 * @export
 * @interface IoArgoprojWorkflowV1alpha1WorkflowWatchEvent
 */
export interface IoArgoprojWorkflowV1alpha1WorkflowWatchEvent {
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1Workflow}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowWatchEvent
     */
    object?: IoArgoprojWorkflowV1alpha1Workflow;
    /**
     * 
     * @type {string}
     * @memberof IoArgoprojWorkflowV1alpha1WorkflowWatchEvent
     */
    type?: string;
}
/**
 * ZipStrategy will unzip zipped input artifacts
 * @export
 * @interface IoArgoprojWorkflowV1alpha1ZipStrategy
 */
export interface IoArgoprojWorkflowV1alpha1ZipStrategy {
}
/**
 * Represents a Persistent Disk resource in AWS.  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
 */
export interface IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * @type {string}
     * @memberof IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).
     * @type {number}
     * @memberof IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
     */
    partition?: number;
    /**
     * Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * @type {boolean}
     * @memberof IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * @type {string}
     * @memberof IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
     */
    volumeID: string;
}
/**
 * Affinity is a group of affinity scheduling rules.
 * @export
 * @interface IoK8sApiCoreV1Affinity
 */
export interface IoK8sApiCoreV1Affinity {
    /**
     * 
     * @type {IoK8sApiCoreV1NodeAffinity}
     * @memberof IoK8sApiCoreV1Affinity
     */
    nodeAffinity?: IoK8sApiCoreV1NodeAffinity;
    /**
     * 
     * @type {IoK8sApiCoreV1PodAffinity}
     * @memberof IoK8sApiCoreV1Affinity
     */
    podAffinity?: IoK8sApiCoreV1PodAffinity;
    /**
     * 
     * @type {IoK8sApiCoreV1PodAntiAffinity}
     * @memberof IoK8sApiCoreV1Affinity
     */
    podAntiAffinity?: IoK8sApiCoreV1PodAntiAffinity;
}
/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 * @export
 * @interface IoK8sApiCoreV1AzureDiskVolumeSource
 */
export interface IoK8sApiCoreV1AzureDiskVolumeSource {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    cachingMode?: string;
    /**
     * The Name of the data disk in the blob storage
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    diskName: string;
    /**
     * The URI the data disk in the blob storage
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    diskURI: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    fsType?: string;
    /**
     * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    kind?: string;
    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1AzureDiskVolumeSource
     */
    readOnly?: boolean;
}
/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 * @export
 * @interface IoK8sApiCoreV1AzureFileVolumeSource
 */
export interface IoK8sApiCoreV1AzureFileVolumeSource {
    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1AzureFileVolumeSource
     */
    readOnly?: boolean;
    /**
     * the name of secret that contains Azure Storage Account Name and Key
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureFileVolumeSource
     */
    secretName: string;
    /**
     * Share Name
     * @type {string}
     * @memberof IoK8sApiCoreV1AzureFileVolumeSource
     */
    shareName: string;
}
/**
 * Represents a source location of a volume to mount, managed by an external CSI driver
 * @export
 * @interface IoK8sApiCoreV1CSIVolumeSource
 */
export interface IoK8sApiCoreV1CSIVolumeSource {
    /**
     * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
     * @type {string}
     * @memberof IoK8sApiCoreV1CSIVolumeSource
     */
    driver: string;
    /**
     * Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
     * @type {string}
     * @memberof IoK8sApiCoreV1CSIVolumeSource
     */
    fsType?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1CSIVolumeSource
     */
    nodePublishSecretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * Specifies a read-only configuration for the volume. Defaults to false (read/write).
     * @type {boolean}
     * @memberof IoK8sApiCoreV1CSIVolumeSource
     */
    readOnly?: boolean;
    /**
     * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApiCoreV1CSIVolumeSource
     */
    volumeAttributes?: { [key: string]: string; };
}
/**
 * Adds and removes POSIX capabilities from running containers.
 * @export
 * @interface IoK8sApiCoreV1Capabilities
 */
export interface IoK8sApiCoreV1Capabilities {
    /**
     * Added capabilities
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1Capabilities
     */
    add?: Array<string>;
    /**
     * Removed capabilities
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1Capabilities
     */
    drop?: Array<string>;
}
/**
 * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1CephFSVolumeSource
 */
export interface IoK8sApiCoreV1CephFSVolumeSource {
    /**
     * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    monitors: Array<string>;
    /**
     * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
     * @type {string}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    path?: string;
    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * @type {boolean}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    readOnly?: boolean;
    /**
     * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    secretFile?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1CephFSVolumeSource
     */
    user?: string;
}
/**
 * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1CinderVolumeSource
 */
export interface IoK8sApiCoreV1CinderVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * @type {string}
     * @memberof IoK8sApiCoreV1CinderVolumeSource
     */
    fsType?: string;
    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * @type {boolean}
     * @memberof IoK8sApiCoreV1CinderVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1CinderVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * @type {string}
     * @memberof IoK8sApiCoreV1CinderVolumeSource
     */
    volumeID: string;
}
/**
 * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapEnvSource
 */
export interface IoK8sApiCoreV1ConfigMapEnvSource {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapEnvSource
     */
    name?: string;
    /**
     * Specify whether the ConfigMap must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapEnvSource
     */
    optional?: boolean;
}
/**
 * Selects a key from a ConfigMap.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapKeySelector
 */
export interface IoK8sApiCoreV1ConfigMapKeySelector {
    /**
     * The key to select.
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    key: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    optional?: boolean;
}
/**
 * Adapts a ConfigMap into a projected volume.  The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapProjection
 */
export interface IoK8sApiCoreV1ConfigMapProjection {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     * @type {Array<IoK8sApiCoreV1KeyToPath>}
     * @memberof IoK8sApiCoreV1ConfigMapProjection
     */
    items?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapProjection
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its keys must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapProjection
     */
    optional?: boolean;
}
/**
 * Adapts a ConfigMap into a volume.  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapVolumeSource
 */
export interface IoK8sApiCoreV1ConfigMapVolumeSource {
    /**
     * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1ConfigMapVolumeSource
     */
    defaultMode?: number;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     * @type {Array<IoK8sApiCoreV1KeyToPath>}
     * @memberof IoK8sApiCoreV1ConfigMapVolumeSource
     */
    items?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapVolumeSource
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its keys must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapVolumeSource
     */
    optional?: boolean;
}
/**
 * A single application container that you want to run within a pod.
 * @export
 * @interface IoK8sApiCoreV1Container
 */
export interface IoK8sApiCoreV1Container {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1Container
     */
    args?: Array<string>;
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1Container
     */
    command?: Array<string>;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvVar>}
     * @memberof IoK8sApiCoreV1Container
     */
    env?: Array<IoK8sApiCoreV1EnvVar>;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1EnvFromSource>}
     * @memberof IoK8sApiCoreV1Container
     */
    envFrom?: Array<IoK8sApiCoreV1EnvFromSource>;
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    image: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images  Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    imagePullPolicy?: IoK8sApiCoreV1Container.ImagePullPolicyEnum;
    /**
     * 
     * @type {IoK8sApiCoreV1Lifecycle}
     * @memberof IoK8sApiCoreV1Container
     */
    lifecycle?: IoK8sApiCoreV1Lifecycle;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoK8sApiCoreV1Container
     */
    livenessProbe?: IoK8sApiCoreV1Probe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    name?: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1ContainerPort>}
     * @memberof IoK8sApiCoreV1Container
     */
    ports?: Array<IoK8sApiCoreV1ContainerPort>;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoK8sApiCoreV1Container
     */
    readinessProbe?: IoK8sApiCoreV1Probe;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceRequirements}
     * @memberof IoK8sApiCoreV1Container
     */
    resources?: IoK8sApiCoreV1ResourceRequirements;
    /**
     * 
     * @type {IoK8sApiCoreV1SecurityContext}
     * @memberof IoK8sApiCoreV1Container
     */
    securityContext?: IoK8sApiCoreV1SecurityContext;
    /**
     * 
     * @type {IoK8sApiCoreV1Probe}
     * @memberof IoK8sApiCoreV1Container
     */
    startupProbe?: IoK8sApiCoreV1Probe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1Container
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
     * @type {boolean}
     * @memberof IoK8sApiCoreV1Container
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    terminationMessagePath?: string;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.  Possible enum values:  - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.  - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    terminationMessagePolicy?: IoK8sApiCoreV1Container.TerminationMessagePolicyEnum;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1Container
     */
    tty?: boolean;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     * @type {Array<IoK8sApiCoreV1VolumeDevice>}
     * @memberof IoK8sApiCoreV1Container
     */
    volumeDevices?: Array<IoK8sApiCoreV1VolumeDevice>;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     * @type {Array<IoK8sApiCoreV1VolumeMount>}
     * @memberof IoK8sApiCoreV1Container
     */
    volumeMounts?: Array<IoK8sApiCoreV1VolumeMount>;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     * @type {string}
     * @memberof IoK8sApiCoreV1Container
     */
    workingDir?: string;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1Container
 */
export namespace IoK8sApiCoreV1Container {
    /**
     * @export
     * @enum {string}
     */
    export enum ImagePullPolicyEnum {
        Always = <any> 'Always',
        IfNotPresent = <any> 'IfNotPresent',
        Never = <any> 'Never'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TerminationMessagePolicyEnum {
        FallbackToLogsOnError = <any> 'FallbackToLogsOnError',
        File = <any> 'File'
    }
}
/**
 * ContainerPort represents a network port in a single container.
 * @export
 * @interface IoK8sApiCoreV1ContainerPort
 */
export interface IoK8sApiCoreV1ContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     * @type {number}
     * @memberof IoK8sApiCoreV1ContainerPort
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     * @type {string}
     * @memberof IoK8sApiCoreV1ContainerPort
     */
    hostIP?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     * @type {number}
     * @memberof IoK8sApiCoreV1ContainerPort
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
     * @type {string}
     * @memberof IoK8sApiCoreV1ContainerPort
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".  Possible enum values:  - `\"SCTP\"` is the SCTP protocol.  - `\"TCP\"` is the TCP protocol.  - `\"UDP\"` is the UDP protocol.
     * @type {string}
     * @memberof IoK8sApiCoreV1ContainerPort
     */
    protocol?: IoK8sApiCoreV1ContainerPort.ProtocolEnum;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1ContainerPort
 */
export namespace IoK8sApiCoreV1ContainerPort {
    /**
     * @export
     * @enum {string}
     */
    export enum ProtocolEnum {
        SCTP = <any> 'SCTP',
        TCP = <any> 'TCP',
        UDP = <any> 'UDP'
    }
}
/**
 * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
 * @export
 * @interface IoK8sApiCoreV1DownwardAPIProjection
 */
export interface IoK8sApiCoreV1DownwardAPIProjection {
    /**
     * Items is a list of DownwardAPIVolume file
     * @type {Array<IoK8sApiCoreV1DownwardAPIVolumeFile>}
     * @memberof IoK8sApiCoreV1DownwardAPIProjection
     */
    items?: Array<IoK8sApiCoreV1DownwardAPIVolumeFile>;
}
/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 * @export
 * @interface IoK8sApiCoreV1DownwardAPIVolumeFile
 */
export interface IoK8sApiCoreV1DownwardAPIVolumeFile {
    /**
     * 
     * @type {IoK8sApiCoreV1ObjectFieldSelector}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeFile
     */
    fieldRef?: IoK8sApiCoreV1ObjectFieldSelector;
    /**
     * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeFile
     */
    mode?: number;
    /**
     * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     * @type {string}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeFile
     */
    path: string;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceFieldSelector}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeFile
     */
    resourceFieldRef?: IoK8sApiCoreV1ResourceFieldSelector;
}
/**
 * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1DownwardAPIVolumeSource
 */
export interface IoK8sApiCoreV1DownwardAPIVolumeSource {
    /**
     * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeSource
     */
    defaultMode?: number;
    /**
     * Items is a list of downward API volume file
     * @type {Array<IoK8sApiCoreV1DownwardAPIVolumeFile>}
     * @memberof IoK8sApiCoreV1DownwardAPIVolumeSource
     */
    items?: Array<IoK8sApiCoreV1DownwardAPIVolumeFile>;
}
/**
 * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1EmptyDirVolumeSource
 */
export interface IoK8sApiCoreV1EmptyDirVolumeSource {
    /**
     * What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     * @type {string}
     * @memberof IoK8sApiCoreV1EmptyDirVolumeSource
     */
    medium?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApiResourceQuantity}
     * @memberof IoK8sApiCoreV1EmptyDirVolumeSource
     */
    sizeLimit?: IoK8sApimachineryPkgApiResourceQuantity;
}
/**
 * EnvFromSource represents the source of a set of ConfigMaps
 * @export
 * @interface IoK8sApiCoreV1EnvFromSource
 */
export interface IoK8sApiCoreV1EnvFromSource {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapEnvSource}
     * @memberof IoK8sApiCoreV1EnvFromSource
     */
    configMapRef?: IoK8sApiCoreV1ConfigMapEnvSource;
    /**
     * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     * @type {string}
     * @memberof IoK8sApiCoreV1EnvFromSource
     */
    prefix?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretEnvSource}
     * @memberof IoK8sApiCoreV1EnvFromSource
     */
    secretRef?: IoK8sApiCoreV1SecretEnvSource;
}
/**
 * EnvVar represents an environment variable present in a Container.
 * @export
 * @interface IoK8sApiCoreV1EnvVar
 */
export interface IoK8sApiCoreV1EnvVar {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     * @type {string}
     * @memberof IoK8sApiCoreV1EnvVar
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".
     * @type {string}
     * @memberof IoK8sApiCoreV1EnvVar
     */
    value?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1EnvVarSource}
     * @memberof IoK8sApiCoreV1EnvVar
     */
    valueFrom?: IoK8sApiCoreV1EnvVarSource;
}
/**
 * EnvVarSource represents a source for the value of an EnvVar.
 * @export
 * @interface IoK8sApiCoreV1EnvVarSource
 */
export interface IoK8sApiCoreV1EnvVarSource {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapKeySelector}
     * @memberof IoK8sApiCoreV1EnvVarSource
     */
    configMapKeyRef?: IoK8sApiCoreV1ConfigMapKeySelector;
    /**
     * 
     * @type {IoK8sApiCoreV1ObjectFieldSelector}
     * @memberof IoK8sApiCoreV1EnvVarSource
     */
    fieldRef?: IoK8sApiCoreV1ObjectFieldSelector;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceFieldSelector}
     * @memberof IoK8sApiCoreV1EnvVarSource
     */
    resourceFieldRef?: IoK8sApiCoreV1ResourceFieldSelector;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretKeySelector}
     * @memberof IoK8sApiCoreV1EnvVarSource
     */
    secretKeyRef?: IoK8sApiCoreV1SecretKeySelector;
}
/**
 * Represents an ephemeral volume that is handled by a normal storage driver.
 * @export
 * @interface IoK8sApiCoreV1EphemeralVolumeSource
 */
export interface IoK8sApiCoreV1EphemeralVolumeSource {
    /**
     * 
     * @type {IoK8sApiCoreV1PersistentVolumeClaimTemplate}
     * @memberof IoK8sApiCoreV1EphemeralVolumeSource
     */
    volumeClaimTemplate?: IoK8sApiCoreV1PersistentVolumeClaimTemplate;
}
/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 * @export
 * @interface IoK8sApiCoreV1Event
 */
export interface IoK8sApiCoreV1Event {
    /**
     * What action was taken/failed regarding to the Regarding object.
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    action?: string;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    apiVersion?: string;
    /**
     * The number of times this event has occurred.
     * @type {number}
     * @memberof IoK8sApiCoreV1Event
     */
    count?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1MicroTime}
     * @memberof IoK8sApiCoreV1Event
     */
    eventTime?: IoK8sApimachineryPkgApisMetaV1MicroTime;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApiCoreV1Event
     */
    firstTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {IoK8sApiCoreV1ObjectReference}
     * @memberof IoK8sApiCoreV1Event
     */
    involvedObject: IoK8sApiCoreV1ObjectReference;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApiCoreV1Event
     */
    lastTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * A human-readable description of the status of this operation.
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    message?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoK8sApiCoreV1Event
     */
    metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    reason?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1ObjectReference}
     * @memberof IoK8sApiCoreV1Event
     */
    related?: IoK8sApiCoreV1ObjectReference;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    reportingComponent?: string;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    reportingInstance?: string;
    /**
     * 
     * @type {IoK8sApiCoreV1EventSeries}
     * @memberof IoK8sApiCoreV1Event
     */
    series?: IoK8sApiCoreV1EventSeries;
    /**
     * 
     * @type {IoK8sApiCoreV1EventSource}
     * @memberof IoK8sApiCoreV1Event
     */
    source?: IoK8sApiCoreV1EventSource;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     * @type {string}
     * @memberof IoK8sApiCoreV1Event
     */
    type?: string;
}
/**
 * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
 * @export
 * @interface IoK8sApiCoreV1EventSeries
 */
export interface IoK8sApiCoreV1EventSeries {
    /**
     * Number of occurrences in this series up to the last heartbeat time
     * @type {number}
     * @memberof IoK8sApiCoreV1EventSeries
     */
    count?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1MicroTime}
     * @memberof IoK8sApiCoreV1EventSeries
     */
    lastObservedTime?: IoK8sApimachineryPkgApisMetaV1MicroTime;
}
/**
 * EventSource contains information for an event.
 * @export
 * @interface IoK8sApiCoreV1EventSource
 */
export interface IoK8sApiCoreV1EventSource {
    /**
     * Component from which the event is generated.
     * @type {string}
     * @memberof IoK8sApiCoreV1EventSource
     */
    component?: string;
    /**
     * Node name on which the event is generated.
     * @type {string}
     * @memberof IoK8sApiCoreV1EventSource
     */
    host?: string;
}
/**
 * ExecAction describes a \"run in container\" action.
 * @export
 * @interface IoK8sApiCoreV1ExecAction
 */
export interface IoK8sApiCoreV1ExecAction {
    /**
     * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1ExecAction
     */
    command?: Array<string>;
}
/**
 * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1FCVolumeSource
 */
export interface IoK8sApiCoreV1FCVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1FCVolumeSource
     */
    fsType?: string;
    /**
     * Optional: FC target lun number
     * @type {number}
     * @memberof IoK8sApiCoreV1FCVolumeSource
     */
    lun?: number;
    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1FCVolumeSource
     */
    readOnly?: boolean;
    /**
     * Optional: FC target worldwide names (WWNs)
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1FCVolumeSource
     */
    targetWWNs?: Array<string>;
    /**
     * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1FCVolumeSource
     */
    wwids?: Array<string>;
}
/**
 * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
 * @export
 * @interface IoK8sApiCoreV1FlexVolumeSource
 */
export interface IoK8sApiCoreV1FlexVolumeSource {
    /**
     * Driver is the name of the driver to use for this volume.
     * @type {string}
     * @memberof IoK8sApiCoreV1FlexVolumeSource
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
     * @type {string}
     * @memberof IoK8sApiCoreV1FlexVolumeSource
     */
    fsType?: string;
    /**
     * Optional: Extra command options if any.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApiCoreV1FlexVolumeSource
     */
    options?: { [key: string]: string; };
    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1FlexVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1FlexVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
}
/**
 * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1FlockerVolumeSource
 */
export interface IoK8sApiCoreV1FlockerVolumeSource {
    /**
     * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
     * @type {string}
     * @memberof IoK8sApiCoreV1FlockerVolumeSource
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     * @type {string}
     * @memberof IoK8sApiCoreV1FlockerVolumeSource
     */
    datasetUUID?: string;
}
/**
 * Represents a Persistent Disk resource in Google Compute Engine.  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1GCEPersistentDiskVolumeSource
 */
export interface IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * @type {string}
     * @memberof IoK8sApiCoreV1GCEPersistentDiskVolumeSource
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * @type {number}
     * @memberof IoK8sApiCoreV1GCEPersistentDiskVolumeSource
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * @type {string}
     * @memberof IoK8sApiCoreV1GCEPersistentDiskVolumeSource
     */
    pdName: string;
    /**
     * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * @type {boolean}
     * @memberof IoK8sApiCoreV1GCEPersistentDiskVolumeSource
     */
    readOnly?: boolean;
}
/**
 * 
 * @export
 * @interface IoK8sApiCoreV1GRPCAction
 */
export interface IoK8sApiCoreV1GRPCAction {
    /**
     * Port number of the gRPC service. Number must be in the range 1 to 65535.
     * @type {number}
     * @memberof IoK8sApiCoreV1GRPCAction
     */
    port: number;
    /**
     * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).  If this is not specified, the default behavior is defined by gRPC.
     * @type {string}
     * @memberof IoK8sApiCoreV1GRPCAction
     */
    service?: string;
}
/**
 * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
 * @export
 * @interface IoK8sApiCoreV1GitRepoVolumeSource
 */
export interface IoK8sApiCoreV1GitRepoVolumeSource {
    /**
     * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    directory?: string;
    /**
     * Repository URL
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    repository: string;
    /**
     * Commit hash for the specified revision.
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    revision?: string;
}
/**
 * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1GlusterfsVolumeSource
 */
export interface IoK8sApiCoreV1GlusterfsVolumeSource {
    /**
     * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     * @type {string}
     * @memberof IoK8sApiCoreV1GlusterfsVolumeSource
     */
    endpoints: string;
    /**
     * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     * @type {string}
     * @memberof IoK8sApiCoreV1GlusterfsVolumeSource
     */
    path: string;
    /**
     * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     * @type {boolean}
     * @memberof IoK8sApiCoreV1GlusterfsVolumeSource
     */
    readOnly?: boolean;
}
/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 * @export
 * @interface IoK8sApiCoreV1HTTPGetAction
 */
export interface IoK8sApiCoreV1HTTPGetAction {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
     * @type {string}
     * @memberof IoK8sApiCoreV1HTTPGetAction
     */
    host?: string;
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     * @type {Array<IoK8sApiCoreV1HTTPHeader>}
     * @memberof IoK8sApiCoreV1HTTPGetAction
     */
    httpHeaders?: Array<IoK8sApiCoreV1HTTPHeader>;
    /**
     * Path to access on the HTTP server.
     * @type {string}
     * @memberof IoK8sApiCoreV1HTTPGetAction
     */
    path?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoK8sApiCoreV1HTTPGetAction
     */
    port: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.  Possible enum values:  - `\"HTTP\"` means that the scheme used will be http://  - `\"HTTPS\"` means that the scheme used will be https://
     * @type {string}
     * @memberof IoK8sApiCoreV1HTTPGetAction
     */
    scheme?: IoK8sApiCoreV1HTTPGetAction.SchemeEnum;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1HTTPGetAction
 */
export namespace IoK8sApiCoreV1HTTPGetAction {
    /**
     * @export
     * @enum {string}
     */
    export enum SchemeEnum {
        HTTP = <any> 'HTTP',
        HTTPS = <any> 'HTTPS'
    }
}
/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 * @export
 * @interface IoK8sApiCoreV1HTTPHeader
 */
export interface IoK8sApiCoreV1HTTPHeader {
    /**
     * The header field name
     * @type {string}
     * @memberof IoK8sApiCoreV1HTTPHeader
     */
    name: string;
    /**
     * The header field value
     * @type {string}
     * @memberof IoK8sApiCoreV1HTTPHeader
     */
    value: string;
}
/**
 * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
 * @export
 * @interface IoK8sApiCoreV1HostAlias
 */
export interface IoK8sApiCoreV1HostAlias {
    /**
     * Hostnames for the above IP address.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1HostAlias
     */
    hostnames?: Array<string>;
    /**
     * IP address of the host file entry.
     * @type {string}
     * @memberof IoK8sApiCoreV1HostAlias
     */
    ip?: string;
}
/**
 * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1HostPathVolumeSource
 */
export interface IoK8sApiCoreV1HostPathVolumeSource {
    /**
     * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * @type {string}
     * @memberof IoK8sApiCoreV1HostPathVolumeSource
     */
    path: string;
    /**
     * Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * @type {string}
     * @memberof IoK8sApiCoreV1HostPathVolumeSource
     */
    type?: string;
}
/**
 * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1ISCSIVolumeSource
 */
export interface IoK8sApiCoreV1ISCSIVolumeSource {
    /**
     * whether support iSCSI Discovery CHAP authentication
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    chapAuthDiscovery?: boolean;
    /**
     * whether support iSCSI Session CHAP authentication
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    chapAuthSession?: boolean;
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     * @type {string}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    fsType?: string;
    /**
     * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     * @type {string}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    initiatorName?: string;
    /**
     * Target iSCSI Qualified Name.
     * @type {string}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    iqn: string;
    /**
     * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     * @type {string}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    iscsiInterface?: string;
    /**
     * iSCSI Target Lun number.
     * @type {number}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    lun: number;
    /**
     * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    portals?: Array<string>;
    /**
     * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * @type {string}
     * @memberof IoK8sApiCoreV1ISCSIVolumeSource
     */
    targetPortal: string;
}
/**
 * Maps a string key to a path within a volume.
 * @export
 * @interface IoK8sApiCoreV1KeyToPath
 */
export interface IoK8sApiCoreV1KeyToPath {
    /**
     * The key to project.
     * @type {string}
     * @memberof IoK8sApiCoreV1KeyToPath
     */
    key: string;
    /**
     * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1KeyToPath
     */
    mode?: number;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     * @type {string}
     * @memberof IoK8sApiCoreV1KeyToPath
     */
    path: string;
}
/**
 * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
 * @export
 * @interface IoK8sApiCoreV1Lifecycle
 */
export interface IoK8sApiCoreV1Lifecycle {
    /**
     * 
     * @type {IoK8sApiCoreV1LifecycleHandler}
     * @memberof IoK8sApiCoreV1Lifecycle
     */
    postStart?: IoK8sApiCoreV1LifecycleHandler;
    /**
     * 
     * @type {IoK8sApiCoreV1LifecycleHandler}
     * @memberof IoK8sApiCoreV1Lifecycle
     */
    preStop?: IoK8sApiCoreV1LifecycleHandler;
}
/**
 * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
 * @export
 * @interface IoK8sApiCoreV1LifecycleHandler
 */
export interface IoK8sApiCoreV1LifecycleHandler {
    /**
     * 
     * @type {IoK8sApiCoreV1ExecAction}
     * @memberof IoK8sApiCoreV1LifecycleHandler
     */
    exec?: IoK8sApiCoreV1ExecAction;
    /**
     * 
     * @type {IoK8sApiCoreV1HTTPGetAction}
     * @memberof IoK8sApiCoreV1LifecycleHandler
     */
    httpGet?: IoK8sApiCoreV1HTTPGetAction;
    /**
     * 
     * @type {IoK8sApiCoreV1TCPSocketAction}
     * @memberof IoK8sApiCoreV1LifecycleHandler
     */
    tcpSocket?: IoK8sApiCoreV1TCPSocketAction;
}
/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 * @export
 * @interface IoK8sApiCoreV1LocalObjectReference
 */
export interface IoK8sApiCoreV1LocalObjectReference {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1LocalObjectReference
     */
    name?: string;
}
/**
 * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1NFSVolumeSource
 */
export interface IoK8sApiCoreV1NFSVolumeSource {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * @type {string}
     * @memberof IoK8sApiCoreV1NFSVolumeSource
     */
    path: string;
    /**
     * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * @type {boolean}
     * @memberof IoK8sApiCoreV1NFSVolumeSource
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * @type {string}
     * @memberof IoK8sApiCoreV1NFSVolumeSource
     */
    server: string;
}
/**
 * Node affinity is a group of node affinity scheduling rules.
 * @export
 * @interface IoK8sApiCoreV1NodeAffinity
 */
export interface IoK8sApiCoreV1NodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
     * @type {Array<IoK8sApiCoreV1PreferredSchedulingTerm>}
     * @memberof IoK8sApiCoreV1NodeAffinity
     */
    preferredDuringSchedulingIgnoredDuringExecution?: Array<IoK8sApiCoreV1PreferredSchedulingTerm>;
    /**
     * 
     * @type {IoK8sApiCoreV1NodeSelector}
     * @memberof IoK8sApiCoreV1NodeAffinity
     */
    requiredDuringSchedulingIgnoredDuringExecution?: IoK8sApiCoreV1NodeSelector;
}
/**
 * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
 * @export
 * @interface IoK8sApiCoreV1NodeSelector
 */
export interface IoK8sApiCoreV1NodeSelector {
    /**
     * Required. A list of node selector terms. The terms are ORed.
     * @type {Array<IoK8sApiCoreV1NodeSelectorTerm>}
     * @memberof IoK8sApiCoreV1NodeSelector
     */
    nodeSelectorTerms: Array<IoK8sApiCoreV1NodeSelectorTerm>;
}
/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface IoK8sApiCoreV1NodeSelectorRequirement
 */
export interface IoK8sApiCoreV1NodeSelectorRequirement {
    /**
     * The label key that the selector applies to.
     * @type {string}
     * @memberof IoK8sApiCoreV1NodeSelectorRequirement
     */
    key: string;
    /**
     * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.  Possible enum values:  - `\"DoesNotExist\"`  - `\"Exists\"`  - `\"Gt\"`  - `\"In\"`  - `\"Lt\"`  - `\"NotIn\"`
     * @type {string}
     * @memberof IoK8sApiCoreV1NodeSelectorRequirement
     */
    operator: IoK8sApiCoreV1NodeSelectorRequirement.OperatorEnum;
    /**
     * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1NodeSelectorRequirement
     */
    values?: Array<string>;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1NodeSelectorRequirement
 */
export namespace IoK8sApiCoreV1NodeSelectorRequirement {
    /**
     * @export
     * @enum {string}
     */
    export enum OperatorEnum {
        DoesNotExist = <any> 'DoesNotExist',
        Exists = <any> 'Exists',
        Gt = <any> 'Gt',
        In = <any> 'In',
        Lt = <any> 'Lt',
        NotIn = <any> 'NotIn'
    }
}
/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * @export
 * @interface IoK8sApiCoreV1NodeSelectorTerm
 */
export interface IoK8sApiCoreV1NodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels.
     * @type {Array<IoK8sApiCoreV1NodeSelectorRequirement>}
     * @memberof IoK8sApiCoreV1NodeSelectorTerm
     */
    matchExpressions?: Array<IoK8sApiCoreV1NodeSelectorRequirement>;
    /**
     * A list of node selector requirements by node's fields.
     * @type {Array<IoK8sApiCoreV1NodeSelectorRequirement>}
     * @memberof IoK8sApiCoreV1NodeSelectorTerm
     */
    matchFields?: Array<IoK8sApiCoreV1NodeSelectorRequirement>;
}
/**
 * ObjectFieldSelector selects an APIVersioned field of an object.
 * @export
 * @interface IoK8sApiCoreV1ObjectFieldSelector
 */
export interface IoK8sApiCoreV1ObjectFieldSelector {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to \"v1\".
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectFieldSelector
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version.
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectFieldSelector
     */
    fieldPath: string;
}
/**
 * ObjectReference contains enough information to let you inspect or modify the referred object.
 * @export
 * @interface IoK8sApiCoreV1ObjectReference
 */
export interface IoK8sApiCoreV1ObjectReference {
    /**
     * API version of the referent.
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    apiVersion?: string;
    /**
     * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    fieldPath?: string;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    kind?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    name?: string;
    /**
     * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    namespace?: string;
    /**
     * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    resourceVersion?: string;
    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     * @type {string}
     * @memberof IoK8sApiCoreV1ObjectReference
     */
    uid?: string;
}
/**
 * PersistentVolumeClaim is a user's request for and claim to a persistent volume
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaim
 */
export interface IoK8sApiCoreV1PersistentVolumeClaim {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaim
     */
    apiVersion?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaim
     */
    kind?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaim
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoK8sApiCoreV1PersistentVolumeClaimSpec}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaim
     */
    spec?: IoK8sApiCoreV1PersistentVolumeClaimSpec;
    /**
     * 
     * @type {IoK8sApiCoreV1PersistentVolumeClaimStatus}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaim
     */
    status?: IoK8sApiCoreV1PersistentVolumeClaimStatus;
}
/**
 * PersistentVolumeClaimCondition contails details about state of pvc
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimCondition
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimCondition {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    lastProbeTime?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    lastTransitionTime?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * Human-readable message indicating details about last transition.
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    message?: string;
    /**
     * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    status: string;
    /**
     *    Possible enum values:  - `\"FileSystemResizePending\"` - controller resize is finished and a file system resize is pending on node  - `\"Resizing\"` - a user trigger resize of pvc has been started
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimCondition
     */
    type: IoK8sApiCoreV1PersistentVolumeClaimCondition.TypeEnum;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1PersistentVolumeClaimCondition
 */
export namespace IoK8sApiCoreV1PersistentVolumeClaimCondition {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        FileSystemResizePending = <any> 'FileSystemResizePending',
        Resizing = <any> 'Resizing'
    }
}
/**
 * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimSpec
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimSpec {
    /**
     * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    accessModes?: Array<string>;
    /**
     * 
     * @type {IoK8sApiCoreV1TypedLocalObjectReference}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    dataSource?: IoK8sApiCoreV1TypedLocalObjectReference;
    /**
     * 
     * @type {IoK8sApiCoreV1TypedLocalObjectReference}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    dataSourceRef?: IoK8sApiCoreV1TypedLocalObjectReference;
    /**
     * 
     * @type {IoK8sApiCoreV1ResourceRequirements}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    resources?: IoK8sApiCoreV1ResourceRequirements;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1LabelSelector}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    selector?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
     * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    storageClassName?: string;
    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    volumeMode?: string;
    /**
     * VolumeName is the binding reference to the PersistentVolume backing this claim.
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimSpec
     */
    volumeName?: string;
}
/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimStatus
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimStatus {
    /**
     * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    accessModes?: Array<string>;
    /**
     * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    allocatedResources?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
     * Represents the actual resources of the underlying volume.
     * @type {{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    capacity?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
     * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
     * @type {Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    conditions?: Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>;
    /**
     * Phase represents the current phase of PersistentVolumeClaim.  Possible enum values:  - `\"Bound\"` used for PersistentVolumeClaims that are bound  - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.  - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    phase?: IoK8sApiCoreV1PersistentVolumeClaimStatus.PhaseEnum;
    /**
     * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    resizeStatus?: string;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1PersistentVolumeClaimStatus
 */
export namespace IoK8sApiCoreV1PersistentVolumeClaimStatus {
    /**
     * @export
     * @enum {string}
     */
    export enum PhaseEnum {
        Bound = <any> 'Bound',
        Lost = <any> 'Lost',
        Pending = <any> 'Pending'
    }
}
/**
 * PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimTemplate
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimTemplate {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimTemplate
     */
    metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoK8sApiCoreV1PersistentVolumeClaimSpec}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimTemplate
     */
    spec: IoK8sApiCoreV1PersistentVolumeClaimSpec;
}
/**
 * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
     */
    claimName: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts. Default false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
     */
    readOnly?: boolean;
}
/**
 * Represents a Photon Controller persistent disk resource.
 * @export
 * @interface IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
 */
export interface IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     * @type {string}
     * @memberof IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
     */
    pdID: string;
}
/**
 * Pod affinity is a group of inter pod affinity scheduling rules.
 * @export
 * @interface IoK8sApiCoreV1PodAffinity
 */
export interface IoK8sApiCoreV1PodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
     * @type {Array<IoK8sApiCoreV1WeightedPodAffinityTerm>}
     * @memberof IoK8sApiCoreV1PodAffinity
     */
    preferredDuringSchedulingIgnoredDuringExecution?: Array<IoK8sApiCoreV1WeightedPodAffinityTerm>;
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
     * @type {Array<IoK8sApiCoreV1PodAffinityTerm>}
     * @memberof IoK8sApiCoreV1PodAffinity
     */
    requiredDuringSchedulingIgnoredDuringExecution?: Array<IoK8sApiCoreV1PodAffinityTerm>;
}
/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 * @export
 * @interface IoK8sApiCoreV1PodAffinityTerm
 */
export interface IoK8sApiCoreV1PodAffinityTerm {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1LabelSelector}
     * @memberof IoK8sApiCoreV1PodAffinityTerm
     */
    labelSelector?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1LabelSelector}
     * @memberof IoK8sApiCoreV1PodAffinityTerm
     */
    namespaceSelector?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
    /**
     * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PodAffinityTerm
     */
    namespaces?: Array<string>;
    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
     * @type {string}
     * @memberof IoK8sApiCoreV1PodAffinityTerm
     */
    topologyKey: string;
}
/**
 * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
 * @export
 * @interface IoK8sApiCoreV1PodAntiAffinity
 */
export interface IoK8sApiCoreV1PodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
     * @type {Array<IoK8sApiCoreV1WeightedPodAffinityTerm>}
     * @memberof IoK8sApiCoreV1PodAntiAffinity
     */
    preferredDuringSchedulingIgnoredDuringExecution?: Array<IoK8sApiCoreV1WeightedPodAffinityTerm>;
    /**
     * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
     * @type {Array<IoK8sApiCoreV1PodAffinityTerm>}
     * @memberof IoK8sApiCoreV1PodAntiAffinity
     */
    requiredDuringSchedulingIgnoredDuringExecution?: Array<IoK8sApiCoreV1PodAffinityTerm>;
}
/**
 * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
 * @export
 * @interface IoK8sApiCoreV1PodDNSConfig
 */
export interface IoK8sApiCoreV1PodDNSConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    nameservers?: Array<string>;
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     * @type {Array<IoK8sApiCoreV1PodDNSConfigOption>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    options?: Array<IoK8sApiCoreV1PodDNSConfigOption>;
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    searches?: Array<string>;
}
/**
 * PodDNSConfigOption defines DNS resolver options of a pod.
 * @export
 * @interface IoK8sApiCoreV1PodDNSConfigOption
 */
export interface IoK8sApiCoreV1PodDNSConfigOption {
    /**
     * Required.
     * @type {string}
     * @memberof IoK8sApiCoreV1PodDNSConfigOption
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApiCoreV1PodDNSConfigOption
     */
    value?: string;
}
/**
 * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
 * @export
 * @interface IoK8sApiCoreV1PodSecurityContext
 */
export interface IoK8sApiCoreV1PodSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     * @type {number}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    fsGroup?: number;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.
     * @type {string}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * @type {number}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    runAsGroup?: number;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * @type {number}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    runAsUser?: number;
    /**
     * 
     * @type {IoK8sApiCoreV1SELinuxOptions}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    seLinuxOptions?: IoK8sApiCoreV1SELinuxOptions;
    /**
     * 
     * @type {IoK8sApiCoreV1SeccompProfile}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    seccompProfile?: IoK8sApiCoreV1SeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
     * @type {Array<number>}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    supplementalGroups?: Array<number>;
    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     * @type {Array<IoK8sApiCoreV1Sysctl>}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    sysctls?: Array<IoK8sApiCoreV1Sysctl>;
    /**
     * 
     * @type {IoK8sApiCoreV1WindowsSecurityContextOptions}
     * @memberof IoK8sApiCoreV1PodSecurityContext
     */
    windowsOptions?: IoK8sApiCoreV1WindowsSecurityContextOptions;
}
/**
 * PortworxVolumeSource represents a Portworx volume resource.
 * @export
 * @interface IoK8sApiCoreV1PortworxVolumeSource
 */
export interface IoK8sApiCoreV1PortworxVolumeSource {
    /**
     * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1PortworxVolumeSource
     */
    fsType?: string;
    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1PortworxVolumeSource
     */
    readOnly?: boolean;
    /**
     * VolumeID uniquely identifies a Portworx volume
     * @type {string}
     * @memberof IoK8sApiCoreV1PortworxVolumeSource
     */
    volumeID: string;
}
/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 * @export
 * @interface IoK8sApiCoreV1PreferredSchedulingTerm
 */
export interface IoK8sApiCoreV1PreferredSchedulingTerm {
    /**
     * 
     * @type {IoK8sApiCoreV1NodeSelectorTerm}
     * @memberof IoK8sApiCoreV1PreferredSchedulingTerm
     */
    preference: IoK8sApiCoreV1NodeSelectorTerm;
    /**
     * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
     * @type {number}
     * @memberof IoK8sApiCoreV1PreferredSchedulingTerm
     */
    weight: number;
}
/**
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 * @export
 * @interface IoK8sApiCoreV1Probe
 */
export interface IoK8sApiCoreV1Probe {
    /**
     * 
     * @type {IoK8sApiCoreV1ExecAction}
     * @memberof IoK8sApiCoreV1Probe
     */
    exec?: IoK8sApiCoreV1ExecAction;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    failureThreshold?: number;
    /**
     * 
     * @type {IoK8sApiCoreV1GRPCAction}
     * @memberof IoK8sApiCoreV1Probe
     */
    grpc?: IoK8sApiCoreV1GRPCAction;
    /**
     * 
     * @type {IoK8sApiCoreV1HTTPGetAction}
     * @memberof IoK8sApiCoreV1Probe
     */
    httpGet?: IoK8sApiCoreV1HTTPGetAction;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    successThreshold?: number;
    /**
     * 
     * @type {IoK8sApiCoreV1TCPSocketAction}
     * @memberof IoK8sApiCoreV1Probe
     */
    tcpSocket?: IoK8sApiCoreV1TCPSocketAction;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    terminationGracePeriodSeconds?: number;
    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * @type {number}
     * @memberof IoK8sApiCoreV1Probe
     */
    timeoutSeconds?: number;
}
/**
 * Represents a projected volume source
 * @export
 * @interface IoK8sApiCoreV1ProjectedVolumeSource
 */
export interface IoK8sApiCoreV1ProjectedVolumeSource {
    /**
     * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1ProjectedVolumeSource
     */
    defaultMode?: number;
    /**
     * list of volume projections
     * @type {Array<IoK8sApiCoreV1VolumeProjection>}
     * @memberof IoK8sApiCoreV1ProjectedVolumeSource
     */
    sources?: Array<IoK8sApiCoreV1VolumeProjection>;
}
/**
 * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1QuobyteVolumeSource
 */
export interface IoK8sApiCoreV1QuobyteVolumeSource {
    /**
     * Group to map volume access to Default is no group
     * @type {string}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    group?: string;
    /**
     * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     * @type {string}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    registry: string;
    /**
     * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
     * @type {string}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    tenant?: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     * @type {string}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     * @type {string}
     * @memberof IoK8sApiCoreV1QuobyteVolumeSource
     */
    volume: string;
}
/**
 * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1RBDVolumeSource
 */
export interface IoK8sApiCoreV1RBDVolumeSource {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     * @type {string}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    fsType?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    image: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    keyring?: string;
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    monitors: Array<string>;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    pool?: string;
    /**
     * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {boolean}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     * @type {string}
     * @memberof IoK8sApiCoreV1RBDVolumeSource
     */
    user?: string;
}
/**
 * ResourceFieldSelector represents container resources (cpu, memory) and their output format
 * @export
 * @interface IoK8sApiCoreV1ResourceFieldSelector
 */
export interface IoK8sApiCoreV1ResourceFieldSelector {
    /**
     * Container name: required for volumes, optional for env vars
     * @type {string}
     * @memberof IoK8sApiCoreV1ResourceFieldSelector
     */
    containerName?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApiResourceQuantity}
     * @memberof IoK8sApiCoreV1ResourceFieldSelector
     */
    divisor?: IoK8sApimachineryPkgApiResourceQuantity;
    /**
     * Required: resource to select
     * @type {string}
     * @memberof IoK8sApiCoreV1ResourceFieldSelector
     */
    resource: string;
}
/**
 * ResourceRequirements describes the compute resource requirements.
 * @export
 * @interface IoK8sApiCoreV1ResourceRequirements
 */
export interface IoK8sApiCoreV1ResourceRequirements {
    /**
     * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     * @type {{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }}
     * @memberof IoK8sApiCoreV1ResourceRequirements
     */
    limits?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     * @type {{ [key: string]: IoK8sApimachineryPkgApiResourceQuantity; }}
     * @memberof IoK8sApiCoreV1ResourceRequirements
     */
    requests?: { [key: string]: IoK8sApimachineryPkgApiResourceQuantity; };
}
/**
 * SELinuxOptions are the labels to be applied to the container
 * @export
 * @interface IoK8sApiCoreV1SELinuxOptions
 */
export interface IoK8sApiCoreV1SELinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     * @type {string}
     * @memberof IoK8sApiCoreV1SELinuxOptions
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     * @type {string}
     * @memberof IoK8sApiCoreV1SELinuxOptions
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     * @type {string}
     * @memberof IoK8sApiCoreV1SELinuxOptions
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     * @type {string}
     * @memberof IoK8sApiCoreV1SELinuxOptions
     */
    user?: string;
}
/**
 * ScaleIOVolumeSource represents a persistent ScaleIO volume
 * @export
 * @interface IoK8sApiCoreV1ScaleIOVolumeSource
 */
export interface IoK8sApiCoreV1ScaleIOVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    fsType?: string;
    /**
     * The host address of the ScaleIO API Gateway.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    gateway: string;
    /**
     * The name of the ScaleIO Protection Domain for the configured storage.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    protectionDomain?: string;
    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    secretRef: IoK8sApiCoreV1LocalObjectReference;
    /**
     * Flag to enable/disable SSL communication with Gateway, default false
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    sslEnabled?: boolean;
    /**
     * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    storageMode?: string;
    /**
     * The ScaleIO Storage Pool associated with the protection domain.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    storagePool?: string;
    /**
     * The name of the storage system as configured in ScaleIO.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    system: string;
    /**
     * The name of a volume already created in the ScaleIO system that is associated with this volume source.
     * @type {string}
     * @memberof IoK8sApiCoreV1ScaleIOVolumeSource
     */
    volumeName?: string;
}
/**
 * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
 * @export
 * @interface IoK8sApiCoreV1SeccompProfile
 */
export interface IoK8sApiCoreV1SeccompProfile {
    /**
     * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".
     * @type {string}
     * @memberof IoK8sApiCoreV1SeccompProfile
     */
    localhostProfile?: string;
    /**
     * type indicates which kind of seccomp profile will be applied. Valid options are:  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.  Possible enum values:  - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.  - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.  - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).
     * @type {string}
     * @memberof IoK8sApiCoreV1SeccompProfile
     */
    type: IoK8sApiCoreV1SeccompProfile.TypeEnum;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1SeccompProfile
 */
export namespace IoK8sApiCoreV1SeccompProfile {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Localhost = <any> 'Localhost',
        RuntimeDefault = <any> 'RuntimeDefault',
        Unconfined = <any> 'Unconfined'
    }
}
/**
 * SecretEnvSource selects a Secret to populate the environment variables with.  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
 * @export
 * @interface IoK8sApiCoreV1SecretEnvSource
 */
export interface IoK8sApiCoreV1SecretEnvSource {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretEnvSource
     */
    name?: string;
    /**
     * Specify whether the Secret must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecretEnvSource
     */
    optional?: boolean;
}
/**
 * SecretKeySelector selects a key of a Secret.
 * @export
 * @interface IoK8sApiCoreV1SecretKeySelector
 */
export interface IoK8sApiCoreV1SecretKeySelector {
    /**
     * The key of the secret to select from.  Must be a valid secret key.
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretKeySelector
     */
    key: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretKeySelector
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecretKeySelector
     */
    optional?: boolean;
}
/**
 * Adapts a secret into a projected volume.  The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
 * @export
 * @interface IoK8sApiCoreV1SecretProjection
 */
export interface IoK8sApiCoreV1SecretProjection {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     * @type {Array<IoK8sApiCoreV1KeyToPath>}
     * @memberof IoK8sApiCoreV1SecretProjection
     */
    items?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretProjection
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecretProjection
     */
    optional?: boolean;
}
/**
 * Adapts a Secret into a volume.  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
 * @export
 * @interface IoK8sApiCoreV1SecretVolumeSource
 */
export interface IoK8sApiCoreV1SecretVolumeSource {
    /**
     * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * @type {number}
     * @memberof IoK8sApiCoreV1SecretVolumeSource
     */
    defaultMode?: number;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     * @type {Array<IoK8sApiCoreV1KeyToPath>}
     * @memberof IoK8sApiCoreV1SecretVolumeSource
     */
    items?: Array<IoK8sApiCoreV1KeyToPath>;
    /**
     * Specify whether the Secret or its keys must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecretVolumeSource
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * @type {string}
     * @memberof IoK8sApiCoreV1SecretVolumeSource
     */
    secretName?: string;
}
/**
 * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
 * @export
 * @interface IoK8sApiCoreV1SecurityContext
 */
export interface IoK8sApiCoreV1SecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1Capabilities}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    capabilities?: IoK8sApiCoreV1Capabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    privileged?: boolean;
    /**
     * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     * @type {string}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    procMount?: string;
    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     * @type {number}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    runAsGroup?: number;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     * @type {number}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    runAsUser?: number;
    /**
     * 
     * @type {IoK8sApiCoreV1SELinuxOptions}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    seLinuxOptions?: IoK8sApiCoreV1SELinuxOptions;
    /**
     * 
     * @type {IoK8sApiCoreV1SeccompProfile}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    seccompProfile?: IoK8sApiCoreV1SeccompProfile;
    /**
     * 
     * @type {IoK8sApiCoreV1WindowsSecurityContextOptions}
     * @memberof IoK8sApiCoreV1SecurityContext
     */
    windowsOptions?: IoK8sApiCoreV1WindowsSecurityContextOptions;
}
/**
 * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
 * @export
 * @interface IoK8sApiCoreV1ServiceAccountTokenProjection
 */
export interface IoK8sApiCoreV1ServiceAccountTokenProjection {
    /**
     * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
     * @type {string}
     * @memberof IoK8sApiCoreV1ServiceAccountTokenProjection
     */
    audience?: string;
    /**
     * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
     * @type {number}
     * @memberof IoK8sApiCoreV1ServiceAccountTokenProjection
     */
    expirationSeconds?: number;
    /**
     * Path is the path relative to the mount point of the file to project the token into.
     * @type {string}
     * @memberof IoK8sApiCoreV1ServiceAccountTokenProjection
     */
    path: string;
}
/**
 * ServicePort contains information on service's port.
 * @export
 * @interface IoK8sApiCoreV1ServicePort
 */
export interface IoK8sApiCoreV1ServicePort {
    /**
     * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
     * @type {string}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    appProtocol?: string;
    /**
     * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
     * @type {string}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    name?: string;
    /**
     * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
     * @type {number}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    nodePort?: number;
    /**
     * The port that will be exposed by this service.
     * @type {number}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    port: number;
    /**
     * The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.  Possible enum values:  - `\"SCTP\"` is the SCTP protocol.  - `\"TCP\"` is the TCP protocol.  - `\"UDP\"` is the UDP protocol.
     * @type {string}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    protocol?: IoK8sApiCoreV1ServicePort.ProtocolEnum;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoK8sApiCoreV1ServicePort
     */
    targetPort?: IoK8sApimachineryPkgUtilIntstrIntOrString;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1ServicePort
 */
export namespace IoK8sApiCoreV1ServicePort {
    /**
     * @export
     * @enum {string}
     */
    export enum ProtocolEnum {
        SCTP = <any> 'SCTP',
        TCP = <any> 'TCP',
        UDP = <any> 'UDP'
    }
}
/**
 * Represents a StorageOS persistent volume resource.
 * @export
 * @interface IoK8sApiCoreV1StorageOSVolumeSource
 */
export interface IoK8sApiCoreV1StorageOSVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1StorageOSVolumeSource
     */
    fsType?: string;
    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1StorageOSVolumeSource
     */
    readOnly?: boolean;
    /**
     * 
     * @type {IoK8sApiCoreV1LocalObjectReference}
     * @memberof IoK8sApiCoreV1StorageOSVolumeSource
     */
    secretRef?: IoK8sApiCoreV1LocalObjectReference;
    /**
     * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
     * @type {string}
     * @memberof IoK8sApiCoreV1StorageOSVolumeSource
     */
    volumeName?: string;
    /**
     * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
     * @type {string}
     * @memberof IoK8sApiCoreV1StorageOSVolumeSource
     */
    volumeNamespace?: string;
}
/**
 * Sysctl defines a kernel parameter to be set
 * @export
 * @interface IoK8sApiCoreV1Sysctl
 */
export interface IoK8sApiCoreV1Sysctl {
    /**
     * Name of a property to set
     * @type {string}
     * @memberof IoK8sApiCoreV1Sysctl
     */
    name: string;
    /**
     * Value of a property to set
     * @type {string}
     * @memberof IoK8sApiCoreV1Sysctl
     */
    value: string;
}
/**
 * TCPSocketAction describes an action based on opening a socket
 * @export
 * @interface IoK8sApiCoreV1TCPSocketAction
 */
export interface IoK8sApiCoreV1TCPSocketAction {
    /**
     * Optional: Host name to connect to, defaults to the pod IP.
     * @type {string}
     * @memberof IoK8sApiCoreV1TCPSocketAction
     */
    host?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoK8sApiCoreV1TCPSocketAction
     */
    port: IoK8sApimachineryPkgUtilIntstrIntOrString;
}
/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 * @export
 * @interface IoK8sApiCoreV1Toleration
 */
export interface IoK8sApiCoreV1Toleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.  Possible enum values:  - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.  - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.  - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
     * @type {string}
     * @memberof IoK8sApiCoreV1Toleration
     */
    effect?: IoK8sApiCoreV1Toleration.EffectEnum;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     * @type {string}
     * @memberof IoK8sApiCoreV1Toleration
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.  Possible enum values:  - `\"Equal\"`  - `\"Exists\"`
     * @type {string}
     * @memberof IoK8sApiCoreV1Toleration
     */
    operator?: IoK8sApiCoreV1Toleration.OperatorEnum;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     * @type {number}
     * @memberof IoK8sApiCoreV1Toleration
     */
    tolerationSeconds?: number;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     * @type {string}
     * @memberof IoK8sApiCoreV1Toleration
     */
    value?: string;
}

/**
 * @export
 * @namespace IoK8sApiCoreV1Toleration
 */
export namespace IoK8sApiCoreV1Toleration {
    /**
     * @export
     * @enum {string}
     */
    export enum EffectEnum {
        NoExecute = <any> 'NoExecute',
        NoSchedule = <any> 'NoSchedule',
        PreferNoSchedule = <any> 'PreferNoSchedule'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OperatorEnum {
        Equal = <any> 'Equal',
        Exists = <any> 'Exists'
    }
}
/**
 * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
 * @export
 * @interface IoK8sApiCoreV1TypedLocalObjectReference
 */
export interface IoK8sApiCoreV1TypedLocalObjectReference {
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     * @type {string}
     * @memberof IoK8sApiCoreV1TypedLocalObjectReference
     */
    apiGroup?: string;
    /**
     * Kind is the type of resource being referenced
     * @type {string}
     * @memberof IoK8sApiCoreV1TypedLocalObjectReference
     */
    kind: string;
    /**
     * Name is the name of resource being referenced
     * @type {string}
     * @memberof IoK8sApiCoreV1TypedLocalObjectReference
     */
    name: string;
}
/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 * @export
 * @interface IoK8sApiCoreV1Volume
 */
export interface IoK8sApiCoreV1Volume {
    /**
     * 
     * @type {IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    awsElasticBlockStore?: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1AzureDiskVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    azureDisk?: IoK8sApiCoreV1AzureDiskVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1AzureFileVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    azureFile?: IoK8sApiCoreV1AzureFileVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1CephFSVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    cephfs?: IoK8sApiCoreV1CephFSVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1CinderVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    cinder?: IoK8sApiCoreV1CinderVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    configMap?: IoK8sApiCoreV1ConfigMapVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1CSIVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    csi?: IoK8sApiCoreV1CSIVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1DownwardAPIVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    downwardAPI?: IoK8sApiCoreV1DownwardAPIVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1EmptyDirVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    emptyDir?: IoK8sApiCoreV1EmptyDirVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1EphemeralVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    ephemeral?: IoK8sApiCoreV1EphemeralVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1FCVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    fc?: IoK8sApiCoreV1FCVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1FlexVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    flexVolume?: IoK8sApiCoreV1FlexVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1FlockerVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    flocker?: IoK8sApiCoreV1FlockerVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1GCEPersistentDiskVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    gcePersistentDisk?: IoK8sApiCoreV1GCEPersistentDiskVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1GitRepoVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    gitRepo?: IoK8sApiCoreV1GitRepoVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1GlusterfsVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    glusterfs?: IoK8sApiCoreV1GlusterfsVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1HostPathVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    hostPath?: IoK8sApiCoreV1HostPathVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1ISCSIVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    iscsi?: IoK8sApiCoreV1ISCSIVolumeSource;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1Volume
     */
    name: string;
    /**
     * 
     * @type {IoK8sApiCoreV1NFSVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    nfs?: IoK8sApiCoreV1NFSVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1PersistentVolumeClaimVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    persistentVolumeClaim?: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1PhotonPersistentDiskVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    photonPersistentDisk?: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1PortworxVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    portworxVolume?: IoK8sApiCoreV1PortworxVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1ProjectedVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    projected?: IoK8sApiCoreV1ProjectedVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1QuobyteVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    quobyte?: IoK8sApiCoreV1QuobyteVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1RBDVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    rbd?: IoK8sApiCoreV1RBDVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1ScaleIOVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    scaleIO?: IoK8sApiCoreV1ScaleIOVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    secret?: IoK8sApiCoreV1SecretVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1StorageOSVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    storageos?: IoK8sApiCoreV1StorageOSVolumeSource;
    /**
     * 
     * @type {IoK8sApiCoreV1VsphereVirtualDiskVolumeSource}
     * @memberof IoK8sApiCoreV1Volume
     */
    vsphereVolume?: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;
}
/**
 * volumeDevice describes a mapping of a raw block device within a container.
 * @export
 * @interface IoK8sApiCoreV1VolumeDevice
 */
export interface IoK8sApiCoreV1VolumeDevice {
    /**
     * devicePath is the path inside of the container that the device will be mapped to.
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeDevice
     */
    devicePath: string;
    /**
     * name must match the name of a persistentVolumeClaim in the pod
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeDevice
     */
    name: string;
}
/**
 * VolumeMount describes a mounting of a Volume within a container.
 * @export
 * @interface IoK8sApiCoreV1VolumeMount
 */
export interface IoK8sApiCoreV1VolumeMount {
    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    mountPath: string;
    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    subPath?: string;
    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     * @type {string}
     * @memberof IoK8sApiCoreV1VolumeMount
     */
    subPathExpr?: string;
}
/**
 * Projection that may be projected along with other supported volume types
 * @export
 * @interface IoK8sApiCoreV1VolumeProjection
 */
export interface IoK8sApiCoreV1VolumeProjection {
    /**
     * 
     * @type {IoK8sApiCoreV1ConfigMapProjection}
     * @memberof IoK8sApiCoreV1VolumeProjection
     */
    configMap?: IoK8sApiCoreV1ConfigMapProjection;
    /**
     * 
     * @type {IoK8sApiCoreV1DownwardAPIProjection}
     * @memberof IoK8sApiCoreV1VolumeProjection
     */
    downwardAPI?: IoK8sApiCoreV1DownwardAPIProjection;
    /**
     * 
     * @type {IoK8sApiCoreV1SecretProjection}
     * @memberof IoK8sApiCoreV1VolumeProjection
     */
    secret?: IoK8sApiCoreV1SecretProjection;
    /**
     * 
     * @type {IoK8sApiCoreV1ServiceAccountTokenProjection}
     * @memberof IoK8sApiCoreV1VolumeProjection
     */
    serviceAccountToken?: IoK8sApiCoreV1ServiceAccountTokenProjection;
}
/**
 * Represents a vSphere volume resource.
 * @export
 * @interface IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
 */
export interface IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
     * @type {string}
     * @memberof IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
     */
    fsType?: string;
    /**
     * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
     * @type {string}
     * @memberof IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
     */
    storagePolicyID?: string;
    /**
     * Storage Policy Based Management (SPBM) profile name.
     * @type {string}
     * @memberof IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
     */
    storagePolicyName?: string;
    /**
     * Path that identifies vSphere volume vmdk
     * @type {string}
     * @memberof IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
     */
    volumePath: string;
}
/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 * @export
 * @interface IoK8sApiCoreV1WeightedPodAffinityTerm
 */
export interface IoK8sApiCoreV1WeightedPodAffinityTerm {
    /**
     * 
     * @type {IoK8sApiCoreV1PodAffinityTerm}
     * @memberof IoK8sApiCoreV1WeightedPodAffinityTerm
     */
    podAffinityTerm: IoK8sApiCoreV1PodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
     * @type {number}
     * @memberof IoK8sApiCoreV1WeightedPodAffinityTerm
     */
    weight: number;
}
/**
 * WindowsSecurityContextOptions contain Windows-specific options and credentials.
 * @export
 * @interface IoK8sApiCoreV1WindowsSecurityContextOptions
 */
export interface IoK8sApiCoreV1WindowsSecurityContextOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    runAsUserName?: string;
}
/**
 * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
 * @export
 * @interface IoK8sApiPolicyV1PodDisruptionBudgetSpec
 */
export interface IoK8sApiPolicyV1PodDisruptionBudgetSpec {
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoK8sApiPolicyV1PodDisruptionBudgetSpec
     */
    maxUnavailable?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * 
     * @type {IoK8sApimachineryPkgUtilIntstrIntOrString}
     * @memberof IoK8sApiPolicyV1PodDisruptionBudgetSpec
     */
    minAvailable?: IoK8sApimachineryPkgUtilIntstrIntOrString;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1LabelSelector}
     * @memberof IoK8sApiPolicyV1PodDisruptionBudgetSpec
     */
    selector?: IoK8sApimachineryPkgApisMetaV1LabelSelector;
}
/**
 * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
 * @export
 */
export type IoK8sApimachineryPkgApiResourceQuantity = string
/**
 * CreateOptions may be provided when creating an API object.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1CreateOptions
 */
export interface IoK8sApimachineryPkgApisMetaV1CreateOptions {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1CreateOptions
     */
    dryRun?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1CreateOptions
     */
    fieldManager?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1CreateOptions
     */
    fieldValidation?: string;
}
/**
 * Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1Duration
 */
export interface IoK8sApimachineryPkgApisMetaV1Duration {
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Duration
     */
    duration?: string;
}
/**
 * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.  Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1FieldsV1
 */
export interface IoK8sApimachineryPkgApisMetaV1FieldsV1 {
}
/**
 * +protobuf.options.(gogoproto.goproto_stringer)=false
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1GroupVersionResource
 */
export interface IoK8sApimachineryPkgApisMetaV1GroupVersionResource {
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1GroupVersionResource
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1GroupVersionResource
     */
    resource?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1GroupVersionResource
     */
    version?: string;
}
/**
 * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1LabelSelector
 */
export interface IoK8sApimachineryPkgApisMetaV1LabelSelector {
    /**
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelector
     */
    matchExpressions?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>;
    /**
     * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelector
     */
    matchLabels?: { [key: string]: string; };
}
/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
 */
export interface IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
    /**
     * key is the label key that the selector applies to.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    key: string;
    /**
     * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    operator: string;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    values?: Array<string>;
}
/**
 * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ListMeta
 */
export interface IoK8sApimachineryPkgApisMetaV1ListMeta {
    /**
     * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    _continue?: string;
    /**
     * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    remainingItemCount?: number;
    /**
     * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    resourceVersion?: string;
    /**
     * selfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    selfLink?: string;
}
/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
 */
export interface IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry {
    /**
     * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    apiVersion?: string;
    /**
     * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    fieldsType?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1FieldsV1}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    fieldsV1?: IoK8sApimachineryPkgApisMetaV1FieldsV1;
    /**
     * Manager is an identifier of the workflow managing these fields.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    manager?: string;
    /**
     * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    operation?: string;
    /**
     * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    subresource?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    time?: IoK8sApimachineryPkgApisMetaV1Time;
}
/**
 * MicroTime is version of Time with microsecond level precision.
 * @export
 */
export type IoK8sApimachineryPkgApisMetaV1MicroTime = Date
/**
 * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ObjectMeta
 */
export interface IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    annotations?: { [key: string]: string; };
    /**
     * The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    clusterName?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    creationTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    deletionGracePeriodSeconds?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    deletionTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    finalizers?: Array<string>;
    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    generation?: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    labels?: { [key: string]: string; };
    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    managedFields?: Array<IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry>;
    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    name?: string;
    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    namespace?: string;
    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    ownerReferences?: Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>;
    /**
     * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    resourceVersion?: string;
    /**
     * SelfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    selfLink?: string;
    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    uid?: string;
}
/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1OwnerReference
 */
export interface IoK8sApimachineryPkgApisMetaV1OwnerReference {
    /**
     * API version of the referent.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    apiVersion: string;
    /**
     * If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    blockOwnerDeletion?: boolean;
    /**
     * If true, this reference points to the managing controller.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    controller?: boolean;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    kind: string;
    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    name: string;
    /**
     * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    uid: string;
}
/**
 * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1StatusCause
 */
export interface IoK8sApimachineryPkgApisMetaV1StatusCause {
    /**
     * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.  Examples:   \"name\" - the field \"name\" on the current resource   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    field?: string;
    /**
     * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    message?: string;
    /**
     * A machine-readable description of the cause of the error. If this value is empty there is no information available.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    reason?: string;
}
/**
 * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 * @export
 */
export type IoK8sApimachineryPkgApisMetaV1Time = Date
/**
 * 
 * @export
 */
export type IoK8sApimachineryPkgUtilIntstrIntOrString = string
/**
 * 
 * @export
 * @interface SensorCreateSensorRequest
 */
export interface SensorCreateSensorRequest {
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1CreateOptions}
     * @memberof SensorCreateSensorRequest
     */
    createOptions?: IoK8sApimachineryPkgApisMetaV1CreateOptions;
    /**
     * 
     * @type {string}
     * @memberof SensorCreateSensorRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Sensor}
     * @memberof SensorCreateSensorRequest
     */
    sensor?: IoArgoprojEventsV1alpha1Sensor;
}
/**
 * 
 * @export
 * @interface SensorDeleteSensorResponse
 */
export interface SensorDeleteSensorResponse {
}
/**
 * 
 * @export
 * @interface SensorLogEntry
 */
export interface SensorLogEntry {
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    dependencyName?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    eventContext?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    level?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    sensorName?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Time}
     * @memberof SensorLogEntry
     */
    time?: IoK8sApimachineryPkgApisMetaV1Time;
    /**
     * 
     * @type {string}
     * @memberof SensorLogEntry
     */
    triggerName?: string;
}
/**
 * 
 * @export
 * @interface SensorSensorWatchEvent
 */
export interface SensorSensorWatchEvent {
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Sensor}
     * @memberof SensorSensorWatchEvent
     */
    object?: IoArgoprojEventsV1alpha1Sensor;
    /**
     * 
     * @type {string}
     * @memberof SensorSensorWatchEvent
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface SensorUpdateSensorRequest
 */
export interface SensorUpdateSensorRequest {
    /**
     * 
     * @type {string}
     * @memberof SensorUpdateSensorRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorUpdateSensorRequest
     */
    namespace?: string;
    /**
     * 
     * @type {IoArgoprojEventsV1alpha1Sensor}
     * @memberof SensorUpdateSensorRequest
     */
    sensor?: IoArgoprojEventsV1alpha1Sensor;
}
/**
 * 
 * @export
 * @interface StreamResultOfEventsourceEventSourceWatchEvent
 */
export interface StreamResultOfEventsourceEventSourceWatchEvent {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfEventsourceEventSourceWatchEvent
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {EventsourceEventSourceWatchEvent}
     * @memberof StreamResultOfEventsourceEventSourceWatchEvent
     */
    result?: EventsourceEventSourceWatchEvent;
}
/**
 * 
 * @export
 * @interface StreamResultOfEventsourceLogEntry
 */
export interface StreamResultOfEventsourceLogEntry {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfEventsourceLogEntry
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {EventsourceLogEntry}
     * @memberof StreamResultOfEventsourceLogEntry
     */
    result?: EventsourceLogEntry;
}
/**
 * 
 * @export
 * @interface StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry
 */
export interface StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1LogEntry}
     * @memberof StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry
     */
    result?: IoArgoprojWorkflowV1alpha1LogEntry[]; // Used to be: IoArgoprojWorkflowV1alpha1LogEntry (not a list)
}
/**
 * 
 * @export
 * @interface StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent
 */
export interface StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {IoArgoprojWorkflowV1alpha1WorkflowWatchEvent}
     * @memberof StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent
     */
    result?: IoArgoprojWorkflowV1alpha1WorkflowWatchEvent;
}
/**
 * 
 * @export
 * @interface StreamResultOfIoK8sApiCoreV1Event
 */
export interface StreamResultOfIoK8sApiCoreV1Event {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfIoK8sApiCoreV1Event
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {IoK8sApiCoreV1Event}
     * @memberof StreamResultOfIoK8sApiCoreV1Event
     */
    result?: IoK8sApiCoreV1Event;
}
/**
 * 
 * @export
 * @interface StreamResultOfSensorLogEntry
 */
export interface StreamResultOfSensorLogEntry {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfSensorLogEntry
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {SensorLogEntry}
     * @memberof StreamResultOfSensorLogEntry
     */
    result?: SensorLogEntry;
}
/**
 * 
 * @export
 * @interface StreamResultOfSensorSensorWatchEvent
 */
export interface StreamResultOfSensorSensorWatchEvent {
    /**
     * 
     * @type {GrpcGatewayRuntimeStreamError}
     * @memberof StreamResultOfSensorSensorWatchEvent
     */
    error?: GrpcGatewayRuntimeStreamError;
    /**
     * 
     * @type {SensorSensorWatchEvent}
     * @memberof StreamResultOfSensorSensorWatchEvent
     */
    result?: SensorSensorWatchEvent;
}
/**
 * ArchivedWorkflowServiceApi - fetch parameter creator
 * @export
 */
export const ArchivedWorkflowServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceDeleteArchivedWorkflow(uid: string, namespace?: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling archivedWorkflowServiceDeleteArchivedWorkflow.');
            }
            const localVarPath = `/api/v1/archived-workflows/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceGetArchivedWorkflow(uid: string, namespace?: string, name?: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling archivedWorkflowServiceGetArchivedWorkflow.');
            }
            const localVarPath = `/api/v1/archived-workflows/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/archived-workflows-label-keys`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namespace?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/archived-workflows-label-values`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namePrefix] 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namePrefix?: string, namespace?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/archived-workflows`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            if (namePrefix !== undefined) {
                localVarQueryParameter['namePrefix'] = namePrefix;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceResubmitArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest, uid: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling archivedWorkflowServiceResubmitArchivedWorkflow.');
            }
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling archivedWorkflowServiceResubmitArchivedWorkflow.');
            }
            const localVarPath = `/api/v1/archived-workflows/{uid}/resubmit`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceRetryArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest, uid: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling archivedWorkflowServiceRetryArchivedWorkflow.');
            }
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling archivedWorkflowServiceRetryArchivedWorkflow.');
            }
            const localVarPath = `/api/v1/archived-workflows/{uid}/retry`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchivedWorkflowServiceApi - functional programming interface
 * @export
 */
export const ArchivedWorkflowServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceDeleteArchivedWorkflow(uid: string, namespace?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ArchivedWorkflowDeletedResponse> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceDeleteArchivedWorkflow(uid, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceGetArchivedWorkflow(uid: string, namespace?: string, name?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceGetArchivedWorkflow(uid, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1LabelKeys> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namespace?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1LabelValues> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namePrefix] 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namePrefix?: string, namespace?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowList> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namePrefix, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceResubmitArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest, uid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceResubmitArchivedWorkflow(body, uid, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceRetryArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest, uid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = ArchivedWorkflowServiceApiFetchParamCreator(configuration).archivedWorkflowServiceRetryArchivedWorkflow(body, uid, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ArchivedWorkflowServiceApi - factory interface
 * @export
 */
export const ArchivedWorkflowServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceDeleteArchivedWorkflow(uid: string, namespace?: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceDeleteArchivedWorkflow(uid, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} [namespace] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceGetArchivedWorkflow(uid: string, namespace?: string, name?: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceGetArchivedWorkflow(uid, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace?: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namespace?: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [namePrefix] 
         * @param {string} [namespace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namePrefix?: string, namespace?: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namePrefix, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceResubmitArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest, uid: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceResubmitArchivedWorkflow(body, uid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest} body 
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivedWorkflowServiceRetryArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest, uid: string, options?: any) {
            return ArchivedWorkflowServiceApiFp(configuration).archivedWorkflowServiceRetryArchivedWorkflow(body, uid, options)(fetch, basePath);
        },
    };
};

/**
 * ArchivedWorkflowServiceApi - object-oriented interface
 * @export
 * @class ArchivedWorkflowServiceApi
 * @extends {BaseAPI}
 */
export class ArchivedWorkflowServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} uid 
     * @param {string} [namespace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceDeleteArchivedWorkflow(uid: string, namespace?: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceDeleteArchivedWorkflow(uid, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} [namespace] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceGetArchivedWorkflow(uid: string, namespace?: string, name?: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceGetArchivedWorkflow(uid, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [namespace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace?: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [namespace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namespace?: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [namePrefix] 
     * @param {string} [namespace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, namePrefix?: string, namespace?: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namePrefix, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest} body 
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceResubmitArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest, uid: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceResubmitArchivedWorkflow(body, uid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest} body 
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivedWorkflowServiceApi
     */
    public archivedWorkflowServiceRetryArchivedWorkflow(body: IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest, uid: string, options?: any) {
        return ArchivedWorkflowServiceApiFp(this.configuration).archivedWorkflowServiceRetryArchivedWorkflow(body, uid, options)(this.fetch, this.basePath);
    }

}
/**
 * ArtifactServiceApi - fetch parameter creator
 * @export
 */
export const ArtifactServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an artifact.
         * @param {string} namespace 
         * @param {string} idDiscriminator 
         * @param {string} id 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {string} artifactDiscriminator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetArtifactFile(namespace: string, idDiscriminator: string, id: string, nodeId: string, artifactName: string, artifactDiscriminator: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            // verify required parameter 'idDiscriminator' is not null or undefined
            if (idDiscriminator === null || idDiscriminator === undefined) {
                throw new RequiredError('idDiscriminator','Required parameter idDiscriminator was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            // verify required parameter 'artifactDiscriminator' is not null or undefined
            if (artifactDiscriminator === null || artifactDiscriminator === undefined) {
                throw new RequiredError('artifactDiscriminator','Required parameter artifactDiscriminator was null or undefined when calling artifactServiceGetArtifactFile.');
            }
            const localVarPath = `/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"idDiscriminator"}}`, encodeURIComponent(String(idDiscriminator)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)))
                .replace(`{${"artifactName"}}`, encodeURIComponent(String(artifactName)))
                .replace(`{${"artifactDiscriminator"}}`, encodeURIComponent(String(artifactDiscriminator)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an input artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling artifactServiceGetInputArtifact.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling artifactServiceGetInputArtifact.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling artifactServiceGetInputArtifact.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling artifactServiceGetInputArtifact.');
            }
            const localVarPath = `/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)))
                .replace(`{${"artifactName"}}`, encodeURIComponent(String(artifactName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an input artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifactByUID(uid: string, nodeId: string, artifactName: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling artifactServiceGetInputArtifactByUID.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling artifactServiceGetInputArtifactByUID.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling artifactServiceGetInputArtifactByUID.');
            }
            const localVarPath = `/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)))
                .replace(`{${"artifactName"}}`, encodeURIComponent(String(artifactName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an output artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling artifactServiceGetOutputArtifact.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling artifactServiceGetOutputArtifact.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling artifactServiceGetOutputArtifact.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling artifactServiceGetOutputArtifact.');
            }
            const localVarPath = `/artifacts/{namespace}/{name}/{nodeId}/{artifactName}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)))
                .replace(`{${"artifactName"}}`, encodeURIComponent(String(artifactName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an output artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifactByUID(uid: string, nodeId: string, artifactName: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling artifactServiceGetOutputArtifactByUID.');
            }
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling artifactServiceGetOutputArtifactByUID.');
            }
            // verify required parameter 'artifactName' is not null or undefined
            if (artifactName === null || artifactName === undefined) {
                throw new RequiredError('artifactName','Required parameter artifactName was null or undefined when calling artifactServiceGetOutputArtifactByUID.');
            }
            const localVarPath = `/artifacts-by-uid/{uid}/{nodeId}/{artifactName}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)))
                .replace(`{${"artifactName"}}`, encodeURIComponent(String(artifactName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtifactServiceApi - functional programming interface
 * @export
 */
export const ArtifactServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an artifact.
         * @param {string} namespace 
         * @param {string} idDiscriminator 
         * @param {string} id 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {string} artifactDiscriminator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetArtifactFile(namespace: string, idDiscriminator: string, id: string, nodeId: string, artifactName: string, artifactDiscriminator: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ArtifactServiceApiFetchParamCreator(configuration).artifactServiceGetArtifactFile(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an input artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ArtifactServiceApiFetchParamCreator(configuration).artifactServiceGetInputArtifact(namespace, name, nodeId, artifactName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an input artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ArtifactServiceApiFetchParamCreator(configuration).artifactServiceGetInputArtifactByUID(uid, nodeId, artifactName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an output artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ArtifactServiceApiFetchParamCreator(configuration).artifactServiceGetOutputArtifact(namespace, name, nodeId, artifactName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an output artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ArtifactServiceApiFetchParamCreator(configuration).artifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ArtifactServiceApi - factory interface
 * @export
 */
export const ArtifactServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get an artifact.
         * @param {string} namespace 
         * @param {string} idDiscriminator 
         * @param {string} id 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {string} artifactDiscriminator 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetArtifactFile(namespace: string, idDiscriminator: string, id: string, nodeId: string, artifactName: string, artifactDiscriminator: string, options?: any) {
            return ArtifactServiceApiFp(configuration).artifactServiceGetArtifactFile(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an input artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any) {
            return ArtifactServiceApiFp(configuration).artifactServiceGetInputArtifact(namespace, name, nodeId, artifactName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an input artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetInputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any) {
            return ArtifactServiceApiFp(configuration).artifactServiceGetInputArtifactByUID(uid, nodeId, artifactName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an output artifact.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any) {
            return ArtifactServiceApiFp(configuration).artifactServiceGetOutputArtifact(namespace, name, nodeId, artifactName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an output artifact by UID.
         * @param {string} uid 
         * @param {string} nodeId 
         * @param {string} artifactName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artifactServiceGetOutputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any) {
            return ArtifactServiceApiFp(configuration).artifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName, options)(fetch, basePath);
        },
    };
};

/**
 * ArtifactServiceApi - object-oriented interface
 * @export
 * @class ArtifactServiceApi
 * @extends {BaseAPI}
 */
export class ArtifactServiceApi extends BaseAPI {
    /**
     * 
     * @summary Get an artifact.
     * @param {string} namespace 
     * @param {string} idDiscriminator 
     * @param {string} id 
     * @param {string} nodeId 
     * @param {string} artifactName 
     * @param {string} artifactDiscriminator 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactServiceApi
     */
    public artifactServiceGetArtifactFile(namespace: string, idDiscriminator: string, id: string, nodeId: string, artifactName: string, artifactDiscriminator: string, options?: any) {
        return ArtifactServiceApiFp(this.configuration).artifactServiceGetArtifactFile(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an input artifact.
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} nodeId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactServiceApi
     */
    public artifactServiceGetInputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any) {
        return ArtifactServiceApiFp(this.configuration).artifactServiceGetInputArtifact(namespace, name, nodeId, artifactName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an input artifact by UID.
     * @param {string} uid 
     * @param {string} nodeId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactServiceApi
     */
    public artifactServiceGetInputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any) {
        return ArtifactServiceApiFp(this.configuration).artifactServiceGetInputArtifactByUID(uid, nodeId, artifactName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an output artifact.
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} nodeId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactServiceApi
     */
    public artifactServiceGetOutputArtifact(namespace: string, name: string, nodeId: string, artifactName: string, options?: any) {
        return ArtifactServiceApiFp(this.configuration).artifactServiceGetOutputArtifact(namespace, name, nodeId, artifactName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an output artifact by UID.
     * @param {string} uid 
     * @param {string} nodeId 
     * @param {string} artifactName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactServiceApi
     */
    public artifactServiceGetOutputArtifactByUID(uid: string, nodeId: string, artifactName: string, options?: any) {
        return ArtifactServiceApiFp(this.configuration).artifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName, options)(this.fetch, this.basePath);
    }

}
/**
 * ClusterWorkflowTemplateServiceApi - fetch parameter creator
 * @export
 */
export const ClusterWorkflowTemplateServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/cluster-workflow-templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/cluster-workflow-templates/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name: string, getOptionsResourceVersion?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling clusterWorkflowTemplateServiceGetClusterWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/cluster-workflow-templates/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (getOptionsResourceVersion !== undefined) {
                localVarQueryParameter['getOptions.resourceVersion'] = getOptionsResourceVersion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling clusterWorkflowTemplateServiceLintClusterWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/cluster-workflow-templates/lint`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/cluster-workflow-templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest} body 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/cluster-workflow-templates/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterWorkflowTemplateServiceApi - functional programming interface
 * @export
 */
export const ClusterWorkflowTemplateServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateDeleteResponse> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name: string, getOptionsResourceVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name, getOptionsResourceVersion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest} body 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate> {
            const localVarFetchArgs = ClusterWorkflowTemplateServiceApiFetchParamCreator(configuration).clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClusterWorkflowTemplateServiceApi - factory interface
 * @export
 */
export const ClusterWorkflowTemplateServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name: string, getOptionsResourceVersion?: string, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name, getOptionsResourceVersion, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest} body 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest, name: string, options?: any) {
            return ClusterWorkflowTemplateServiceApiFp(configuration).clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body, name, options)(fetch, basePath);
        },
    };
};

/**
 * ClusterWorkflowTemplateServiceApi - object-oriented interface
 * @export
 * @class ClusterWorkflowTemplateServiceApi
 * @extends {BaseAPI}
 */
export class ClusterWorkflowTemplateServiceApi extends BaseAPI {
    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} name 
     * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name: string, getOptionsResourceVersion?: string, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name, getOptionsResourceVersion, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest} body 
     * @param {string} name DEPRECATED: This field is ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterWorkflowTemplateServiceApi
     */
    public clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest, name: string, options?: any) {
        return ClusterWorkflowTemplateServiceApiFp(this.configuration).clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body, name, options)(this.fetch, this.basePath);
    }

}
/**
 * CronWorkflowServiceApi - fetch parameter creator
 * @export
 */
export const CronWorkflowServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceCreateCronWorkflow(body: IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cronWorkflowServiceCreateCronWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceCreateCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceDeleteCronWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceDeleteCronWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling cronWorkflowServiceDeleteCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceGetCronWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceGetCronWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling cronWorkflowServiceGetCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (getOptionsResourceVersion !== undefined) {
                localVarQueryParameter['getOptions.resourceVersion'] = getOptionsResourceVersion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceLintCronWorkflow(body: IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cronWorkflowServiceLintCronWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceLintCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/lint`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceListCronWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceListCronWorkflows.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceResumeCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cronWorkflowServiceResumeCronWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceResumeCronWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling cronWorkflowServiceResumeCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/{name}/resume`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;
            
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceSuspendCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cronWorkflowServiceSuspendCronWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceSuspendCronWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling cronWorkflowServiceSuspendCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/{name}/suspend`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceUpdateCronWorkflow(body: IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cronWorkflowServiceUpdateCronWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling cronWorkflowServiceUpdateCronWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling cronWorkflowServiceUpdateCronWorkflow.');
            }
            const localVarPath = `/api/v1/cron-workflows/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CronWorkflowServiceApi - functional programming interface
 * @export
 */
export const CronWorkflowServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceCreateCronWorkflow(body: IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceCreateCronWorkflow(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceDeleteCronWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflowDeletedResponse> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceDeleteCronWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceGetCronWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceGetCronWorkflow(namespace, name, getOptionsResourceVersion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceLintCronWorkflow(body: IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceLintCronWorkflow(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceListCronWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflowList> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceListCronWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceResumeCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceResumeCronWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceSuspendCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceSuspendCronWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceUpdateCronWorkflow(body: IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CronWorkflow> {
            const localVarFetchArgs = CronWorkflowServiceApiFetchParamCreator(configuration).cronWorkflowServiceUpdateCronWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CronWorkflowServiceApi - factory interface
 * @export
 */
export const CronWorkflowServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceCreateCronWorkflow(body: IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest, namespace: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceCreateCronWorkflow(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceDeleteCronWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceDeleteCronWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceGetCronWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceGetCronWorkflow(namespace, name, getOptionsResourceVersion, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceLintCronWorkflow(body: IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest, namespace: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceLintCronWorkflow(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceListCronWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceListCronWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceResumeCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest, namespace: string, name: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceResumeCronWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceSuspendCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest, namespace: string, name: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceSuspendCronWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronWorkflowServiceUpdateCronWorkflow(body: IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest, namespace: string, name: string, options?: any) {
            return CronWorkflowServiceApiFp(configuration).cronWorkflowServiceUpdateCronWorkflow(body, namespace, name, options)(fetch, basePath);
        },
    };
};

/**
 * CronWorkflowServiceApi - object-oriented interface
 * @export
 * @class CronWorkflowServiceApi
 * @extends {BaseAPI}
 */
export class CronWorkflowServiceApi extends BaseAPI {
    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceCreateCronWorkflow(body: IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest, namespace: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceCreateCronWorkflow(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceDeleteCronWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceDeleteCronWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceGetCronWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceGetCronWorkflow(namespace, name, getOptionsResourceVersion, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceLintCronWorkflow(body: IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest, namespace: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceLintCronWorkflow(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceListCronWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceListCronWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceResumeCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest, namespace: string, name: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceResumeCronWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceSuspendCronWorkflow(body: IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest, namespace: string, name: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceSuspendCronWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest} body 
     * @param {string} namespace 
     * @param {string} name DEPRECATED: This field is ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronWorkflowServiceApi
     */
    public cronWorkflowServiceUpdateCronWorkflow(body: IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest, namespace: string, name: string, options?: any) {
        return CronWorkflowServiceApiFp(this.configuration).cronWorkflowServiceUpdateCronWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

}
/**
 * EventServiceApi - fetch parameter creator
 * @export
 */
export const EventServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceListWorkflowEventBindings(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventServiceListWorkflowEventBindings.');
            }
            const localVarPath = `/api/v1/workflow-event-bindings/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1Item} body The event itself can be any data.
         * @param {string} namespace The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.
         * @param {string} discriminator Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceReceiveEvent(body: IoArgoprojWorkflowV1alpha1Item, namespace: string, discriminator: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventServiceReceiveEvent.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventServiceReceiveEvent.');
            }
            // verify required parameter 'discriminator' is not null or undefined
            if (discriminator === null || discriminator === undefined) {
                throw new RequiredError('discriminator','Required parameter discriminator was null or undefined when calling eventServiceReceiveEvent.');
            }
            const localVarPath = `/api/v1/events/{namespace}/{discriminator}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"discriminator"}}`, encodeURIComponent(String(discriminator)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1Item" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventServiceApi - functional programming interface
 * @export
 */
export const EventServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceListWorkflowEventBindings(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> {
            const localVarFetchArgs = EventServiceApiFetchParamCreator(configuration).eventServiceListWorkflowEventBindings(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1Item} body The event itself can be any data.
         * @param {string} namespace The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.
         * @param {string} discriminator Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceReceiveEvent(body: IoArgoprojWorkflowV1alpha1Item, namespace: string, discriminator: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1EventResponse> {
            const localVarFetchArgs = EventServiceApiFetchParamCreator(configuration).eventServiceReceiveEvent(body, namespace, discriminator, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EventServiceApi - factory interface
 * @export
 */
export const EventServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceListWorkflowEventBindings(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return EventServiceApiFp(configuration).eventServiceListWorkflowEventBindings(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1Item} body The event itself can be any data.
         * @param {string} namespace The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.
         * @param {string} discriminator Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventServiceReceiveEvent(body: IoArgoprojWorkflowV1alpha1Item, namespace: string, discriminator: string, options?: any) {
            return EventServiceApiFp(configuration).eventServiceReceiveEvent(body, namespace, discriminator, options)(fetch, basePath);
        },
    };
};

/**
 * EventServiceApi - object-oriented interface
 * @export
 * @class EventServiceApi
 * @extends {BaseAPI}
 */
export class EventServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventServiceApi
     */
    public eventServiceListWorkflowEventBindings(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return EventServiceApiFp(this.configuration).eventServiceListWorkflowEventBindings(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1Item} body The event itself can be any data.
     * @param {string} namespace The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.
     * @param {string} discriminator Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventServiceApi
     */
    public eventServiceReceiveEvent(body: IoArgoprojWorkflowV1alpha1Item, namespace: string, discriminator: string, options?: any) {
        return EventServiceApiFp(this.configuration).eventServiceReceiveEvent(body, namespace, discriminator, options)(this.fetch, this.basePath);
    }

}
/**
 * EventSourceServiceApi - fetch parameter creator
 * @export
 */
export const EventSourceServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EventsourceCreateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceCreateEventSource(body: EventsourceCreateEventSourceRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSourceServiceCreateEventSource.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceCreateEventSource.');
            }
            const localVarPath = `/api/v1/event-sources/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EventsourceCreateEventSourceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceDeleteEventSource(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceDeleteEventSource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling eventSourceServiceDeleteEventSource.');
            }
            const localVarPath = `/api/v1/event-sources/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this event source.
         * @param {string} [eventSourceType] optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;).
         * @param {string} [eventName] optional - only return entries for this event name (e.g. &#x60;example&#x60;).
         * @param {string} [grep] optional - only return entries where &#x60;msg&#x60; matches this regular expression.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceEventSourcesLogs(namespace: string, name?: string, eventSourceType?: string, eventName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceEventSourcesLogs.');
            }
            const localVarPath = `/api/v1/stream/event-sources/{namespace}/logs`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (eventSourceType !== undefined) {
                localVarQueryParameter['eventSourceType'] = eventSourceType;
            }

            if (eventName !== undefined) {
                localVarQueryParameter['eventName'] = eventName;
            }

            if (grep !== undefined) {
                localVarQueryParameter['grep'] = grep;
            }

            if (podLogOptionsContainer !== undefined) {
                localVarQueryParameter['podLogOptions.container'] = podLogOptionsContainer;
            }

            if (podLogOptionsFollow !== undefined) {
                localVarQueryParameter['podLogOptions.follow'] = podLogOptionsFollow;
            }

            if (podLogOptionsPrevious !== undefined) {
                localVarQueryParameter['podLogOptions.previous'] = podLogOptionsPrevious;
            }

            if (podLogOptionsSinceSeconds !== undefined) {
                localVarQueryParameter['podLogOptions.sinceSeconds'] = podLogOptionsSinceSeconds;
            }

            if (podLogOptionsSinceTimeSeconds !== undefined) {
                localVarQueryParameter['podLogOptions.sinceTime.seconds'] = podLogOptionsSinceTimeSeconds;
            }

            if (podLogOptionsSinceTimeNanos !== undefined) {
                localVarQueryParameter['podLogOptions.sinceTime.nanos'] = podLogOptionsSinceTimeNanos;
            }

            if (podLogOptionsTimestamps !== undefined) {
                localVarQueryParameter['podLogOptions.timestamps'] = podLogOptionsTimestamps;
            }

            if (podLogOptionsTailLines !== undefined) {
                localVarQueryParameter['podLogOptions.tailLines'] = podLogOptionsTailLines;
            }

            if (podLogOptionsLimitBytes !== undefined) {
                localVarQueryParameter['podLogOptions.limitBytes'] = podLogOptionsLimitBytes;
            }

            if (podLogOptionsInsecureSkipTLSVerifyBackend !== undefined) {
                localVarQueryParameter['podLogOptions.insecureSkipTLSVerifyBackend'] = podLogOptionsInsecureSkipTLSVerifyBackend;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceGetEventSource(namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceGetEventSource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling eventSourceServiceGetEventSource.');
            }
            const localVarPath = `/api/v1/event-sources/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceListEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceListEventSources.');
            }
            const localVarPath = `/api/v1/event-sources/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EventsourceUpdateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceUpdateEventSource(body: EventsourceUpdateEventSourceRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSourceServiceUpdateEventSource.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceUpdateEventSource.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling eventSourceServiceUpdateEventSource.');
            }
            const localVarPath = `/api/v1/event-sources/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EventsourceUpdateEventSourceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceWatchEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling eventSourceServiceWatchEventSources.');
            }
            const localVarPath = `/api/v1/stream/event-sources/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventSourceServiceApi - functional programming interface
 * @export
 */
export const EventSourceServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EventsourceCreateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceCreateEventSource(body: EventsourceCreateEventSourceRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1EventSource> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceCreateEventSource(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceDeleteEventSource(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EventsourceEventSourceDeletedResponse> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceDeleteEventSource(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this event source.
         * @param {string} [eventSourceType] optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;).
         * @param {string} [eventName] optional - only return entries for this event name (e.g. &#x60;example&#x60;).
         * @param {string} [grep] optional - only return entries where &#x60;msg&#x60; matches this regular expression.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceEventSourcesLogs(namespace: string, name?: string, eventSourceType?: string, eventName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfEventsourceLogEntry> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceEventSourcesLogs(namespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceGetEventSource(namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1EventSource> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceGetEventSource(namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceListEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1EventSourceList> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceListEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EventsourceUpdateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceUpdateEventSource(body: EventsourceUpdateEventSourceRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1EventSource> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceUpdateEventSource(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceWatchEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfEventsourceEventSourceWatchEvent> {
            const localVarFetchArgs = EventSourceServiceApiFetchParamCreator(configuration).eventSourceServiceWatchEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EventSourceServiceApi - factory interface
 * @export
 */
export const EventSourceServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {EventsourceCreateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceCreateEventSource(body: EventsourceCreateEventSourceRequest, namespace: string, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceCreateEventSource(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceDeleteEventSource(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceDeleteEventSource(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this event source.
         * @param {string} [eventSourceType] optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;).
         * @param {string} [eventName] optional - only return entries for this event name (e.g. &#x60;example&#x60;).
         * @param {string} [grep] optional - only return entries where &#x60;msg&#x60; matches this regular expression.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceEventSourcesLogs(namespace: string, name?: string, eventSourceType?: string, eventName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceEventSourcesLogs(namespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceGetEventSource(namespace: string, name: string, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceGetEventSource(namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceListEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceListEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EventsourceUpdateEventSourceRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceUpdateEventSource(body: EventsourceUpdateEventSourceRequest, namespace: string, name: string, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceUpdateEventSource(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSourceServiceWatchEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return EventSourceServiceApiFp(configuration).eventSourceServiceWatchEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
    };
};

/**
 * EventSourceServiceApi - object-oriented interface
 * @export
 * @class EventSourceServiceApi
 * @extends {BaseAPI}
 */
export class EventSourceServiceApi extends BaseAPI {
    /**
     * 
     * @param {EventsourceCreateEventSourceRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceCreateEventSource(body: EventsourceCreateEventSourceRequest, namespace: string, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceCreateEventSource(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceDeleteEventSource(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceDeleteEventSource(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [name] optional - only return entries for this event source.
     * @param {string} [eventSourceType] optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;).
     * @param {string} [eventName] optional - only return entries for this event name (e.g. &#x60;example&#x60;).
     * @param {string} [grep] optional - only return entries where &#x60;msg&#x60; matches this regular expression.
     * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
     * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
     * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceEventSourcesLogs(namespace: string, name?: string, eventSourceType?: string, eventName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceEventSourcesLogs(namespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceGetEventSource(namespace: string, name: string, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceGetEventSource(namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceListEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceListEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EventsourceUpdateEventSourceRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceUpdateEventSource(body: EventsourceUpdateEventSourceRequest, namespace: string, name: string, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceUpdateEventSource(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSourceServiceApi
     */
    public eventSourceServiceWatchEventSources(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return EventSourceServiceApiFp(this.configuration).eventSourceServiceWatchEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

}
/**
 * InfoServiceApi - fetch parameter creator
 * @export
 */
export const InfoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CollectEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceCollectEvent(body: IoArgoprojWorkflowV1alpha1CollectEventRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling infoServiceCollectEvent.');
            }
            const localVarPath = `/api/v1/tracking/event`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1CollectEventRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetInfo(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetUserInfo(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/userinfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetVersion(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/version`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfoServiceApi - functional programming interface
 * @export
 */
export const InfoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CollectEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceCollectEvent(body: IoArgoprojWorkflowV1alpha1CollectEventRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1CollectEventResponse> {
            const localVarFetchArgs = InfoServiceApiFetchParamCreator(configuration).infoServiceCollectEvent(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1InfoResponse> {
            const localVarFetchArgs = InfoServiceApiFetchParamCreator(configuration).infoServiceGetInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetUserInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1GetUserInfoResponse> {
            const localVarFetchArgs = InfoServiceApiFetchParamCreator(configuration).infoServiceGetUserInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetVersion(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Version> {
            const localVarFetchArgs = InfoServiceApiFetchParamCreator(configuration).infoServiceGetVersion(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InfoServiceApi - factory interface
 * @export
 */
export const InfoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1CollectEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceCollectEvent(body: IoArgoprojWorkflowV1alpha1CollectEventRequest, options?: any) {
            return InfoServiceApiFp(configuration).infoServiceCollectEvent(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetInfo(options?: any) {
            return InfoServiceApiFp(configuration).infoServiceGetInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetUserInfo(options?: any) {
            return InfoServiceApiFp(configuration).infoServiceGetUserInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoServiceGetVersion(options?: any) {
            return InfoServiceApiFp(configuration).infoServiceGetVersion(options)(fetch, basePath);
        },
    };
};

/**
 * InfoServiceApi - object-oriented interface
 * @export
 * @class InfoServiceApi
 * @extends {BaseAPI}
 */
export class InfoServiceApi extends BaseAPI {
    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1CollectEventRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoServiceApi
     */
    public infoServiceCollectEvent(body: IoArgoprojWorkflowV1alpha1CollectEventRequest, options?: any) {
        return InfoServiceApiFp(this.configuration).infoServiceCollectEvent(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoServiceApi
     */
    public infoServiceGetInfo(options?: any) {
        return InfoServiceApiFp(this.configuration).infoServiceGetInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoServiceApi
     */
    public infoServiceGetUserInfo(options?: any) {
        return InfoServiceApiFp(this.configuration).infoServiceGetUserInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoServiceApi
     */
    public infoServiceGetVersion(options?: any) {
        return InfoServiceApiFp(this.configuration).infoServiceGetVersion(options)(this.fetch, this.basePath);
    }

}
/**
 * SensorServiceApi - fetch parameter creator
 * @export
 */
export const SensorServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SensorCreateSensorRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceCreateSensor(body: SensorCreateSensorRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sensorServiceCreateSensor.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceCreateSensor.');
            }
            const localVarPath = `/api/v1/sensors/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SensorCreateSensorRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceDeleteSensor(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceDeleteSensor.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling sensorServiceDeleteSensor.');
            }
            const localVarPath = `/api/v1/sensors/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceGetSensor(namespace: string, name: string, getOptionsResourceVersion?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceGetSensor.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling sensorServiceGetSensor.');
            }
            const localVarPath = `/api/v1/sensors/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (getOptionsResourceVersion !== undefined) {
                localVarQueryParameter['getOptions.resourceVersion'] = getOptionsResourceVersion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceListSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceListSensors.');
            }
            const localVarPath = `/api/v1/sensors/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this sensor name.
         * @param {string} [triggerName] optional - only return entries for this trigger.
         * @param {string} [grep] option - only return entries where &#x60;msg&#x60; contains this regular expressions.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceSensorsLogs(namespace: string, name?: string, triggerName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceSensorsLogs.');
            }
            const localVarPath = `/api/v1/stream/sensors/{namespace}/logs`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (triggerName !== undefined) {
                localVarQueryParameter['triggerName'] = triggerName;
            }

            if (grep !== undefined) {
                localVarQueryParameter['grep'] = grep;
            }

            if (podLogOptionsContainer !== undefined) {
                localVarQueryParameter['podLogOptions.container'] = podLogOptionsContainer;
            }

            if (podLogOptionsFollow !== undefined) {
                localVarQueryParameter['podLogOptions.follow'] = podLogOptionsFollow;
            }

            if (podLogOptionsPrevious !== undefined) {
                localVarQueryParameter['podLogOptions.previous'] = podLogOptionsPrevious;
            }

            if (podLogOptionsSinceSeconds !== undefined) {
                localVarQueryParameter['podLogOptions.sinceSeconds'] = podLogOptionsSinceSeconds;
            }

            if (podLogOptionsSinceTimeSeconds !== undefined) {
                localVarQueryParameter['podLogOptions.sinceTime.seconds'] = podLogOptionsSinceTimeSeconds;
            }

            if (podLogOptionsSinceTimeNanos !== undefined) {
                localVarQueryParameter['podLogOptions.sinceTime.nanos'] = podLogOptionsSinceTimeNanos;
            }

            if (podLogOptionsTimestamps !== undefined) {
                localVarQueryParameter['podLogOptions.timestamps'] = podLogOptionsTimestamps;
            }

            if (podLogOptionsTailLines !== undefined) {
                localVarQueryParameter['podLogOptions.tailLines'] = podLogOptionsTailLines;
            }

            if (podLogOptionsLimitBytes !== undefined) {
                localVarQueryParameter['podLogOptions.limitBytes'] = podLogOptionsLimitBytes;
            }

            if (podLogOptionsInsecureSkipTLSVerifyBackend !== undefined) {
                localVarQueryParameter['podLogOptions.insecureSkipTLSVerifyBackend'] = podLogOptionsInsecureSkipTLSVerifyBackend;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorUpdateSensorRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceUpdateSensor(body: SensorUpdateSensorRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sensorServiceUpdateSensor.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceUpdateSensor.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling sensorServiceUpdateSensor.');
            }
            const localVarPath = `/api/v1/sensors/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SensorUpdateSensorRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceWatchSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling sensorServiceWatchSensors.');
            }
            const localVarPath = `/api/v1/stream/sensors/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorServiceApi - functional programming interface
 * @export
 */
export const SensorServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SensorCreateSensorRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceCreateSensor(body: SensorCreateSensorRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1Sensor> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceCreateSensor(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceDeleteSensor(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SensorDeleteSensorResponse> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceDeleteSensor(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceGetSensor(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1Sensor> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceGetSensor(namespace, name, getOptionsResourceVersion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceListSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1SensorList> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceListSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this sensor name.
         * @param {string} [triggerName] optional - only return entries for this trigger.
         * @param {string} [grep] option - only return entries where &#x60;msg&#x60; contains this regular expressions.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceSensorsLogs(namespace: string, name?: string, triggerName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfSensorLogEntry> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceSensorsLogs(namespace, name, triggerName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SensorUpdateSensorRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceUpdateSensor(body: SensorUpdateSensorRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojEventsV1alpha1Sensor> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceUpdateSensor(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceWatchSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfSensorSensorWatchEvent> {
            const localVarFetchArgs = SensorServiceApiFetchParamCreator(configuration).sensorServiceWatchSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SensorServiceApi - factory interface
 * @export
 */
export const SensorServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {SensorCreateSensorRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceCreateSensor(body: SensorCreateSensorRequest, namespace: string, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceCreateSensor(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceDeleteSensor(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceDeleteSensor(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceGetSensor(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceGetSensor(namespace, name, getOptionsResourceVersion, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceListSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceListSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [name] optional - only return entries for this sensor name.
         * @param {string} [triggerName] optional - only return entries for this trigger.
         * @param {string} [grep] option - only return entries where &#x60;msg&#x60; contains this regular expressions.
         * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceSensorsLogs(namespace: string, name?: string, triggerName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceSensorsLogs(namespace, name, triggerName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options)(fetch, basePath);
        },
        /**
         * 
         * @param {SensorUpdateSensorRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceUpdateSensor(body: SensorUpdateSensorRequest, namespace: string, name: string, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceUpdateSensor(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorServiceWatchSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return SensorServiceApiFp(configuration).sensorServiceWatchSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
    };
};

/**
 * SensorServiceApi - object-oriented interface
 * @export
 * @class SensorServiceApi
 * @extends {BaseAPI}
 */
export class SensorServiceApi extends BaseAPI {
    /**
     * 
     * @param {SensorCreateSensorRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceCreateSensor(body: SensorCreateSensorRequest, namespace: string, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceCreateSensor(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceDeleteSensor(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceDeleteSensor(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceGetSensor(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceGetSensor(namespace, name, getOptionsResourceVersion, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceListSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceListSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [name] optional - only return entries for this sensor name.
     * @param {string} [triggerName] optional - only return entries for this trigger.
     * @param {string} [grep] option - only return entries where &#x60;msg&#x60; contains this regular expressions.
     * @param {string} [podLogOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {boolean} [podLogOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
     * @param {boolean} [podLogOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
     * @param {string} [podLogOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {string} [podLogOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {number} [podLogOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {boolean} [podLogOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {string} [podLogOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {string} [podLogOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {boolean} [podLogOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceSensorsLogs(namespace: string, name?: string, triggerName?: string, grep?: string, podLogOptionsContainer?: string, podLogOptionsFollow?: boolean, podLogOptionsPrevious?: boolean, podLogOptionsSinceSeconds?: string, podLogOptionsSinceTimeSeconds?: string, podLogOptionsSinceTimeNanos?: number, podLogOptionsTimestamps?: boolean, podLogOptionsTailLines?: string, podLogOptionsLimitBytes?: string, podLogOptionsInsecureSkipTLSVerifyBackend?: boolean, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceSensorsLogs(namespace, name, triggerName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SensorUpdateSensorRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceUpdateSensor(body: SensorUpdateSensorRequest, namespace: string, name: string, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceUpdateSensor(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorServiceApi
     */
    public sensorServiceWatchSensors(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return SensorServiceApiFp(this.configuration).sensorServiceWatchSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowServiceApi - fetch parameter creator
 * @export
 */
export const WorkflowServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceCreateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowCreateRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceCreateWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceCreateWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceDeleteWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, force?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceDeleteWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceDeleteWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceGetWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, fields?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceGetWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceGetWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (getOptionsResourceVersion !== undefined) {
                localVarQueryParameter['getOptions.resourceVersion'] = getOptionsResourceVersion;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceLintWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowLintRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceLintWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceLintWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/lint`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowLintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceListWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceListWorkflows.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} podName 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServicePodLogs(namespace: string, name: string, podName: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServicePodLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServicePodLogs.');
            }
            // verify required parameter 'podName' is not null or undefined
            if (podName === null || podName === undefined) {
                throw new RequiredError('podName','Required parameter podName was null or undefined when calling workflowServicePodLogs.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/{podName}/log`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"podName"}}`, encodeURIComponent(String(podName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (logOptionsContainer !== undefined) {
                localVarQueryParameter['logOptions.container'] = logOptionsContainer;
            }

            if (logOptionsFollow !== undefined) {
                localVarQueryParameter['logOptions.follow'] = logOptionsFollow;
            }

            if (logOptionsPrevious !== undefined) {
                localVarQueryParameter['logOptions.previous'] = logOptionsPrevious;
            }

            if (logOptionsSinceSeconds !== undefined) {
                localVarQueryParameter['logOptions.sinceSeconds'] = logOptionsSinceSeconds;
            }

            if (logOptionsSinceTimeSeconds !== undefined) {
                localVarQueryParameter['logOptions.sinceTime.seconds'] = logOptionsSinceTimeSeconds;
            }

            if (logOptionsSinceTimeNanos !== undefined) {
                localVarQueryParameter['logOptions.sinceTime.nanos'] = logOptionsSinceTimeNanos;
            }

            if (logOptionsTimestamps !== undefined) {
                localVarQueryParameter['logOptions.timestamps'] = logOptionsTimestamps;
            }

            if (logOptionsTailLines !== undefined) {
                localVarQueryParameter['logOptions.tailLines'] = logOptionsTailLines;
            }

            if (logOptionsLimitBytes !== undefined) {
                localVarQueryParameter['logOptions.limitBytes'] = logOptionsLimitBytes;
            }

            if (logOptionsInsecureSkipTLSVerifyBackend !== undefined) {
                localVarQueryParameter['logOptions.insecureSkipTLSVerifyBackend'] = logOptionsInsecureSkipTLSVerifyBackend;
            }

            if (grep !== undefined) {
                localVarQueryParameter['grep'] = grep;
            }

            if (selector !== undefined) {
                localVarQueryParameter['selector'] = selector;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceResubmitWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceResubmitWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceResubmitWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/resubmit`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResumeWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResumeRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceResumeWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceResumeWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceResumeWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/resume`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowResumeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowRetryRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceRetryWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowRetryRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceRetryWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceRetryWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceRetryWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/retry`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowRetryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSetRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSetWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSetRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceSetWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceSetWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceSetWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/set`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowSetRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowStopRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceStopWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowStopRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceStopWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceStopWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceStopWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/stop`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowStopRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceSubmitWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceSubmitWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/submit`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSuspendWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceSuspendWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceSuspendWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceSuspendWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/suspend`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceTerminateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowServiceTerminateWorkflow.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceTerminateWorkflow.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceTerminateWorkflow.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/terminate`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchEvents(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceWatchEvents.');
            }
            const localVarPath = `/api/v1/stream/events/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceWatchWorkflows.');
            }
            const localVarPath = `/api/v1/workflow-events/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [podName] 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWorkflowLogs(namespace: string, name: string, podName?: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowServiceWorkflowLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowServiceWorkflowLogs.');
            }
            const localVarPath = `/api/v1/workflows/{namespace}/{name}/log`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (podName !== undefined) {
                localVarQueryParameter['podName'] = podName;
            }

            if (logOptionsContainer !== undefined) {
                localVarQueryParameter['logOptions.container'] = logOptionsContainer;
            }

            if (logOptionsFollow !== undefined) {
                localVarQueryParameter['logOptions.follow'] = logOptionsFollow;
            }

            if (logOptionsPrevious !== undefined) {
                localVarQueryParameter['logOptions.previous'] = logOptionsPrevious;
            }

            if (logOptionsSinceSeconds !== undefined) {
                localVarQueryParameter['logOptions.sinceSeconds'] = logOptionsSinceSeconds;
            }

            if (logOptionsSinceTimeSeconds !== undefined) {
                localVarQueryParameter['logOptions.sinceTime.seconds'] = logOptionsSinceTimeSeconds;
            }

            if (logOptionsSinceTimeNanos !== undefined) {
                localVarQueryParameter['logOptions.sinceTime.nanos'] = logOptionsSinceTimeNanos;
            }

            if (logOptionsTimestamps !== undefined) {
                localVarQueryParameter['logOptions.timestamps'] = logOptionsTimestamps;
            }

            if (logOptionsTailLines !== undefined) {
                localVarQueryParameter['logOptions.tailLines'] = logOptionsTailLines;
            }

            if (logOptionsLimitBytes !== undefined) {
                localVarQueryParameter['logOptions.limitBytes'] = logOptionsLimitBytes;
            }

            if (logOptionsInsecureSkipTLSVerifyBackend !== undefined) {
                localVarQueryParameter['logOptions.insecureSkipTLSVerifyBackend'] = logOptionsInsecureSkipTLSVerifyBackend;
            }

            if (grep !== undefined) {
                localVarQueryParameter['grep'] = grep;
            }

            if (selector !== undefined) {
                localVarQueryParameter['selector'] = selector;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowServiceApi - functional programming interface
 * @export
 */
export const WorkflowServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceCreateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowCreateRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceCreateWorkflow(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceDeleteWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceDeleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceGetWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, fields?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceGetWorkflow(namespace, name, getOptionsResourceVersion, fields, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceLintWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowLintRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceLintWorkflow(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceListWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowList> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceListWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        console.log("ERROR!!!!");
                        console.log(response)
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} podName 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServicePodLogs(namespace: string, name: string, podName: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServicePodLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                       return response.text()
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceResubmitWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResumeWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResumeRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceResumeWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowRetryRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceRetryWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowRetryRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceRetryWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSetRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSetWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSetRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceSetWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowStopRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceStopWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowStopRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceStopWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceSubmitWorkflow(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSuspendWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceSuspendWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceTerminateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1Workflow> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceTerminateWorkflow(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchEvents(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfIoK8sApiCoreV1Event> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceWatchEvents(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceWatchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [podName] 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWorkflowLogs(namespace: string, name: string, podName?: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = WorkflowServiceApiFetchParamCreator(configuration).workflowServiceWorkflowLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options);
            
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        // used to be: return response.json()
                        return response.text();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowServiceApi - factory interface
 * @export
 */
export const WorkflowServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceCreateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowCreateRequest, namespace: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceCreateWorkflow(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceDeleteWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, force?: boolean, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceDeleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceGetWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, fields?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceGetWorkflow(namespace, name, getOptionsResourceVersion, fields, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceLintWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowLintRequest, namespace: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceLintWorkflow(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceListWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceListWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options)(fetch, basePath);
        },
        /**
         * 
         * @summary DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} podName 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServicePodLogs(namespace: string, name: string, podName: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServicePodLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceResubmitWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowResumeRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceResumeWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResumeRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceResumeWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowRetryRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceRetryWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowRetryRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceRetryWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSetRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSetWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSetRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceSetWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowStopRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceStopWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowStopRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceStopWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest, namespace: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceSubmitWorkflow(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceSuspendWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceSuspendWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest} body 
         * @param {string} namespace 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceTerminateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest, namespace: string, name: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceTerminateWorkflow(body, namespace, name, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchEvents(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceWatchEvents(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWatchWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceWatchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [podName] 
         * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
         * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
         * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
         * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
         * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
         * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
         * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
         * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
         * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
         * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
         * @param {string} [grep] 
         * @param {string} [selector] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowServiceWorkflowLogs(namespace: string, name: string, podName?: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any) {
            return WorkflowServiceApiFp(configuration).workflowServiceWorkflowLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowServiceApi - object-oriented interface
 * @export
 * @class WorkflowServiceApi
 * @extends {BaseAPI}
 */
export class WorkflowServiceApi extends BaseAPI {
    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowCreateRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceCreateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowCreateRequest, namespace: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceCreateWorkflow(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {boolean} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceDeleteWorkflow(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, force?: boolean, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceDeleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceGetWorkflow(namespace: string, name: string, getOptionsResourceVersion?: string, fields?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceGetWorkflow(namespace, name, getOptionsResourceVersion, fields, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowLintRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceLintWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowLintRequest, namespace: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceLintWorkflow(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fields] Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceListWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceListWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} podName 
     * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
     * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
     * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {string} [grep] 
     * @param {string} [selector] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServicePodLogs(namespace: string, name: string, podName: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServicePodLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceResubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceResubmitWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowResumeRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceResumeWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowResumeRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceResumeWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowRetryRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceRetryWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowRetryRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceRetryWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowSetRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceSetWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSetRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceSetWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowStopRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceStopWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowStopRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceStopWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceSubmitWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest, namespace: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceSubmitWorkflow(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceSuspendWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceSuspendWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest} body 
     * @param {string} namespace 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceTerminateWorkflow(body: IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest, namespace: string, name: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceTerminateWorkflow(body, namespace, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceWatchEvents(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceWatchEvents(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceWatchWorkflows(namespace: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, fields?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceWatchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [podName] 
     * @param {string} [logOptionsContainer] The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {boolean} [logOptionsFollow] Follow the log stream of the pod. Defaults to false. +optional.
     * @param {boolean} [logOptionsPrevious] Return previous terminated container logs. Defaults to false. +optional.
     * @param {string} [logOptionsSinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {string} [logOptionsSinceTimeSeconds] Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {number} [logOptionsSinceTimeNanos] Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {boolean} [logOptionsTimestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {string} [logOptionsTailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {string} [logOptionsLimitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {boolean} [logOptionsInsecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {string} [grep] 
     * @param {string} [selector] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowServiceApi
     */
    public workflowServiceWorkflowLogs(namespace: string, name: string, podName?: string, logOptionsContainer?: string, logOptionsFollow?: boolean, logOptionsPrevious?: boolean, logOptionsSinceSeconds?: string, logOptionsSinceTimeSeconds?: string, logOptionsSinceTimeNanos?: number, logOptionsTimestamps?: boolean, logOptionsTailLines?: string, logOptionsLimitBytes?: string, logOptionsInsecureSkipTLSVerifyBackend?: boolean, grep?: string, selector?: string, options?: any) {
        return WorkflowServiceApiFp(this.configuration).workflowServiceWorkflowLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowTemplateServiceApi - fetch parameter creator
 * @export
 */
export const WorkflowTemplateServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceCreateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowTemplateServiceCreateWorkflowTemplate.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceCreateWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceDeleteWorkflowTemplate(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceDeleteWorkflowTemplate.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowTemplateServiceDeleteWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (deleteOptionsGracePeriodSeconds !== undefined) {
                localVarQueryParameter['deleteOptions.gracePeriodSeconds'] = deleteOptionsGracePeriodSeconds;
            }

            if (deleteOptionsPreconditionsUid !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.uid'] = deleteOptionsPreconditionsUid;
            }

            if (deleteOptionsPreconditionsResourceVersion !== undefined) {
                localVarQueryParameter['deleteOptions.preconditions.resourceVersion'] = deleteOptionsPreconditionsResourceVersion;
            }

            if (deleteOptionsOrphanDependents !== undefined) {
                localVarQueryParameter['deleteOptions.orphanDependents'] = deleteOptionsOrphanDependents;
            }

            if (deleteOptionsPropagationPolicy !== undefined) {
                localVarQueryParameter['deleteOptions.propagationPolicy'] = deleteOptionsPropagationPolicy;
            }

            if (deleteOptionsDryRun) {
                localVarQueryParameter['deleteOptions.dryRun'] = deleteOptionsDryRun;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceGetWorkflowTemplate(namespace: string, name: string, getOptionsResourceVersion?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceGetWorkflowTemplate.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowTemplateServiceGetWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (getOptionsResourceVersion !== undefined) {
                localVarQueryParameter['getOptions.resourceVersion'] = getOptionsResourceVersion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceLintWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest, namespace: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowTemplateServiceLintWorkflowTemplate.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceLintWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}/lint`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [namePattern] 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceListWorkflowTemplates(namespace: string, namePattern?: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options: any = {}): FetchArgs {
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceListWorkflowTemplates.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (namePattern !== undefined) {
                localVarQueryParameter['namePattern'] = namePattern;
            }

            if (listOptionsLabelSelector !== undefined) {
                localVarQueryParameter['listOptions.labelSelector'] = listOptionsLabelSelector;
            }

            if (listOptionsFieldSelector !== undefined) {
                localVarQueryParameter['listOptions.fieldSelector'] = listOptionsFieldSelector;
            }

            if (listOptionsWatch !== undefined) {
                localVarQueryParameter['listOptions.watch'] = listOptionsWatch;
            }

            if (listOptionsAllowWatchBookmarks !== undefined) {
                localVarQueryParameter['listOptions.allowWatchBookmarks'] = listOptionsAllowWatchBookmarks;
            }

            if (listOptionsResourceVersion !== undefined) {
                localVarQueryParameter['listOptions.resourceVersion'] = listOptionsResourceVersion;
            }

            if (listOptionsResourceVersionMatch !== undefined) {
                localVarQueryParameter['listOptions.resourceVersionMatch'] = listOptionsResourceVersionMatch;
            }

            if (listOptionsTimeoutSeconds !== undefined) {
                localVarQueryParameter['listOptions.timeoutSeconds'] = listOptionsTimeoutSeconds;
            }

            if (listOptionsLimit !== undefined) {
                localVarQueryParameter['listOptions.limit'] = listOptionsLimit;
            }

            if (listOptionsContinue !== undefined) {
                localVarQueryParameter['listOptions.continue'] = listOptionsContinue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceUpdateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, namespace: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workflowTemplateServiceUpdateWorkflowTemplate.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling workflowTemplateServiceUpdateWorkflowTemplate.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling workflowTemplateServiceUpdateWorkflowTemplate.');
            }
            const localVarPath = `/api/v1/workflow-templates/{namespace}/{name}`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            //delete localVarUrlObj.search;

            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowTemplateServiceApi - functional programming interface
 * @export
 */
export const WorkflowTemplateServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceCreateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplate> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceCreateWorkflowTemplate(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceDeleteWorkflowTemplate(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplateDeleteResponse> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceDeleteWorkflowTemplate(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceGetWorkflowTemplate(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplate> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceGetWorkflowTemplate(namespace, name, getOptionsResourceVersion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceLintWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest, namespace: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplate> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceLintWorkflowTemplate(body, namespace, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [namePattern] 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceListWorkflowTemplates(namespace: string, namePattern?: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplateList> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceListWorkflowTemplates(namespace, namePattern, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceUpdateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, namespace: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IoArgoprojWorkflowV1alpha1WorkflowTemplate> {
            const localVarFetchArgs = WorkflowTemplateServiceApiFetchParamCreator(configuration).workflowTemplateServiceUpdateWorkflowTemplate(body, namespace, name, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowTemplateServiceApi - factory interface
 * @export
 */
export const WorkflowTemplateServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceCreateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest, namespace: string, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceCreateWorkflowTemplate(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
         * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
         * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
         * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
         * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
         * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceDeleteWorkflowTemplate(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceDeleteWorkflowTemplate(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} name 
         * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceGetWorkflowTemplate(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceGetWorkflowTemplate(namespace, name, getOptionsResourceVersion, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest} body 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceLintWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest, namespace: string, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceLintWorkflowTemplate(body, namespace, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} namespace 
         * @param {string} [namePattern] 
         * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
         * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
         * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
         * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
         * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
         * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
         * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceListWorkflowTemplates(namespace: string, namePattern?: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceListWorkflowTemplates(namespace, namePattern, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest} body 
         * @param {string} namespace 
         * @param {string} name DEPRECATED: This field is ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowTemplateServiceUpdateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, namespace: string, name: string, options?: any) {
            return WorkflowTemplateServiceApiFp(configuration).workflowTemplateServiceUpdateWorkflowTemplate(body, namespace, name, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowTemplateServiceApi - object-oriented interface
 * @export
 * @class WorkflowTemplateServiceApi
 * @extends {BaseAPI}
 */
export class WorkflowTemplateServiceApi extends BaseAPI {
    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceCreateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest, namespace: string, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceCreateWorkflowTemplate(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [deleteOptionsGracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {string} [deleteOptionsPreconditionsUid] Specifies the target UID. +optional.
     * @param {string} [deleteOptionsPreconditionsResourceVersion] Specifies the target ResourceVersion +optional.
     * @param {boolean} [deleteOptionsOrphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {string} [deleteOptionsPropagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array<string>} [deleteOptionsDryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceDeleteWorkflowTemplate(namespace: string, name: string, deleteOptionsGracePeriodSeconds?: string, deleteOptionsPreconditionsUid?: string, deleteOptionsPreconditionsResourceVersion?: string, deleteOptionsOrphanDependents?: boolean, deleteOptionsPropagationPolicy?: string, deleteOptionsDryRun?: Array<string>, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceDeleteWorkflowTemplate(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} name 
     * @param {string} [getOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceGetWorkflowTemplate(namespace: string, name: string, getOptionsResourceVersion?: string, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceGetWorkflowTemplate(namespace, name, getOptionsResourceVersion, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest} body 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceLintWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest, namespace: string, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceLintWorkflowTemplate(body, namespace, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} namespace 
     * @param {string} [namePattern] 
     * @param {string} [listOptionsLabelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {string} [listOptionsFieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {boolean} [listOptionsWatch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {boolean} [listOptionsAllowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {string} [listOptionsResourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsResourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {string} [listOptionsTimeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {string} [listOptionsLimit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [listOptionsContinue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceListWorkflowTemplates(namespace: string, namePattern?: string, listOptionsLabelSelector?: string, listOptionsFieldSelector?: string, listOptionsWatch?: boolean, listOptionsAllowWatchBookmarks?: boolean, listOptionsResourceVersion?: string, listOptionsResourceVersionMatch?: string, listOptionsTimeoutSeconds?: string, listOptionsLimit?: string, listOptionsContinue?: string, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceListWorkflowTemplates(namespace, namePattern, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest} body 
     * @param {string} namespace 
     * @param {string} name DEPRECATED: This field is ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateServiceApi
     */
    public workflowTemplateServiceUpdateWorkflowTemplate(body: IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest, namespace: string, name: string, options?: any) {
        return WorkflowTemplateServiceApiFp(this.configuration).workflowTemplateServiceUpdateWorkflowTemplate(body, namespace, name, options)(this.fetch, this.basePath);
    }

}
