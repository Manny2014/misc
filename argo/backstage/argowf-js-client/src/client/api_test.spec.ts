/**
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ArchivedWorkflowServiceApi", () => {
  let instance: api.ArchivedWorkflowServiceApi
  beforeEach(function() {
    instance = new api.ArchivedWorkflowServiceApi(config)
  });

  test("archivedWorkflowServiceDeleteArchivedWorkflow", () => {
    const uid: string = "uid_example"
    const namespace: string = "namespace_example"
    return expect(instance.archivedWorkflowServiceDeleteArchivedWorkflow(uid, namespace, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceGetArchivedWorkflow", () => {
    const uid: string = "uid_example"
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.archivedWorkflowServiceGetArchivedWorkflow(uid, namespace, name, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceListArchivedWorkflowLabelKeys", () => {
    const namespace: string = "namespace_example"
    return expect(instance.archivedWorkflowServiceListArchivedWorkflowLabelKeys(namespace, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceListArchivedWorkflowLabelValues", () => {
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    const namespace: string = "namespace_example"
    return expect(instance.archivedWorkflowServiceListArchivedWorkflowLabelValues(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namespace, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceListArchivedWorkflows", () => {
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    const namePrefix: string = "namePrefix_example"
    const namespace: string = "namespace_example"
    return expect(instance.archivedWorkflowServiceListArchivedWorkflows(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, namePrefix, namespace, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceResubmitArchivedWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1ResubmitArchivedWorkflowRequest = {}
    const uid: string = "uid_example"
    return expect(instance.archivedWorkflowServiceResubmitArchivedWorkflow(body, uid, {})).resolves.toBe(null)
  })
  test("archivedWorkflowServiceRetryArchivedWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1RetryArchivedWorkflowRequest = {}
    const uid: string = "uid_example"
    return expect(instance.archivedWorkflowServiceRetryArchivedWorkflow(body, uid, {})).resolves.toBe(null)
  })
})

describe("ArtifactServiceApi", () => {
  let instance: api.ArtifactServiceApi
  beforeEach(function() {
    instance = new api.ArtifactServiceApi(config)
  });

  test("artifactServiceGetArtifactFile", () => {
    const namespace: string = "namespace_example"
    const idDiscriminator: string = "idDiscriminator_example"
    const id: string = "id_example"
    const nodeId: string = "nodeId_example"
    const artifactName: string = "artifactName_example"
    const artifactDiscriminator: string = "artifactDiscriminator_example"
    return expect(instance.artifactServiceGetArtifactFile(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, {})).resolves.toBe(null)
  })
  test("artifactServiceGetInputArtifact", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const nodeId: string = "nodeId_example"
    const artifactName: string = "artifactName_example"
    return expect(instance.artifactServiceGetInputArtifact(namespace, name, nodeId, artifactName, {})).resolves.toBe(null)
  })
  test("artifactServiceGetInputArtifactByUID", () => {
    const uid: string = "uid_example"
    const nodeId: string = "nodeId_example"
    const artifactName: string = "artifactName_example"
    return expect(instance.artifactServiceGetInputArtifactByUID(uid, nodeId, artifactName, {})).resolves.toBe(null)
  })
  test("artifactServiceGetOutputArtifact", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const nodeId: string = "nodeId_example"
    const artifactName: string = "artifactName_example"
    return expect(instance.artifactServiceGetOutputArtifact(namespace, name, nodeId, artifactName, {})).resolves.toBe(null)
  })
  test("artifactServiceGetOutputArtifactByUID", () => {
    const uid: string = "uid_example"
    const nodeId: string = "nodeId_example"
    const artifactName: string = "artifactName_example"
    return expect(instance.artifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName, {})).resolves.toBe(null)
  })
})

describe("ClusterWorkflowTemplateServiceApi", () => {
  let instance: api.ClusterWorkflowTemplateServiceApi
  beforeEach(function() {
    instance = new api.ClusterWorkflowTemplateServiceApi(config)
  });

  test("clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest = {}
    return expect(instance.clusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(body, {})).resolves.toBe(null)
  })
  test("clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate", () => {
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    return expect(instance.clusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, {})).resolves.toBe(null)
  })
  test("clusterWorkflowTemplateServiceGetClusterWorkflowTemplate", () => {
    const name: string = "name_example"
    const getOptionsResourceVersion: string = "getOptionsResourceVersion_example"
    return expect(instance.clusterWorkflowTemplateServiceGetClusterWorkflowTemplate(name, getOptionsResourceVersion, {})).resolves.toBe(null)
  })
  test("clusterWorkflowTemplateServiceLintClusterWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest = {}
    return expect(instance.clusterWorkflowTemplateServiceLintClusterWorkflowTemplate(body, {})).resolves.toBe(null)
  })
  test("clusterWorkflowTemplateServiceListClusterWorkflowTemplates", () => {
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.clusterWorkflowTemplateServiceListClusterWorkflowTemplates(listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest = {}
    const name: string = "name_example"
    return expect(instance.clusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(body, name, {})).resolves.toBe(null)
  })
})

describe("CronWorkflowServiceApi", () => {
  let instance: api.CronWorkflowServiceApi
  beforeEach(function() {
    instance = new api.CronWorkflowServiceApi(config)
  });

  test("cronWorkflowServiceCreateCronWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1CreateCronWorkflowRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.cronWorkflowServiceCreateCronWorkflow(body, namespace, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceDeleteCronWorkflow", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    return expect(instance.cronWorkflowServiceDeleteCronWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceGetCronWorkflow", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const getOptionsResourceVersion: string = "getOptionsResourceVersion_example"
    return expect(instance.cronWorkflowServiceGetCronWorkflow(namespace, name, getOptionsResourceVersion, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceLintCronWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1LintCronWorkflowRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.cronWorkflowServiceLintCronWorkflow(body, namespace, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceListCronWorkflows", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.cronWorkflowServiceListCronWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceResumeCronWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1CronWorkflowResumeRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.cronWorkflowServiceResumeCronWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceSuspendCronWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1CronWorkflowSuspendRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.cronWorkflowServiceSuspendCronWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("cronWorkflowServiceUpdateCronWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1UpdateCronWorkflowRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.cronWorkflowServiceUpdateCronWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
})

describe("EventServiceApi", () => {
  let instance: api.EventServiceApi
  beforeEach(function() {
    instance = new api.EventServiceApi(config)
  });

  test("eventServiceListWorkflowEventBindings", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.eventServiceListWorkflowEventBindings(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("eventServiceReceiveEvent", () => {
    const body: api.IoArgoprojWorkflowV1alpha1Item = {}
    const namespace: string = "namespace_example"
    const discriminator: string = "discriminator_example"
    return expect(instance.eventServiceReceiveEvent(body, namespace, discriminator, {})).resolves.toBe(null)
  })
})

describe("EventSourceServiceApi", () => {
  let instance: api.EventSourceServiceApi
  beforeEach(function() {
    instance = new api.EventSourceServiceApi(config)
  });

  test("eventSourceServiceCreateEventSource", () => {
    const body: api.EventsourceCreateEventSourceRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.eventSourceServiceCreateEventSource(body, namespace, {})).resolves.toBe(null)
  })
  test("eventSourceServiceDeleteEventSource", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    return expect(instance.eventSourceServiceDeleteEventSource(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, {})).resolves.toBe(null)
  })
  test("eventSourceServiceEventSourcesLogs", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const eventSourceType: string = "eventSourceType_example"
    const eventName: string = "eventName_example"
    const grep: string = "grep_example"
    const podLogOptionsContainer: string = "podLogOptionsContainer_example"
    const podLogOptionsFollow: boolean = true
    const podLogOptionsPrevious: boolean = true
    const podLogOptionsSinceSeconds: string = "podLogOptionsSinceSeconds_example"
    const podLogOptionsSinceTimeSeconds: string = "podLogOptionsSinceTimeSeconds_example"
    const podLogOptionsSinceTimeNanos: number = 56
    const podLogOptionsTimestamps: boolean = true
    const podLogOptionsTailLines: string = "podLogOptionsTailLines_example"
    const podLogOptionsLimitBytes: string = "podLogOptionsLimitBytes_example"
    const podLogOptionsInsecureSkipTLSVerifyBackend: boolean = true
    return expect(instance.eventSourceServiceEventSourcesLogs(namespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, {})).resolves.toBe(null)
  })
  test("eventSourceServiceGetEventSource", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.eventSourceServiceGetEventSource(namespace, name, {})).resolves.toBe(null)
  })
  test("eventSourceServiceListEventSources", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.eventSourceServiceListEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("eventSourceServiceUpdateEventSource", () => {
    const body: api.EventsourceUpdateEventSourceRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.eventSourceServiceUpdateEventSource(body, namespace, name, {})).resolves.toBe(null)
  })
  test("eventSourceServiceWatchEventSources", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.eventSourceServiceWatchEventSources(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
})

describe("InfoServiceApi", () => {
  let instance: api.InfoServiceApi
  beforeEach(function() {
    instance = new api.InfoServiceApi(config)
  });

  test("infoServiceCollectEvent", () => {
    const body: api.IoArgoprojWorkflowV1alpha1CollectEventRequest = {}
    return expect(instance.infoServiceCollectEvent(body, {})).resolves.toBe(null)
  })
  test("infoServiceGetInfo", () => {
    return expect(instance.infoServiceGetInfo({})).resolves.toBe(null)
  })
  test("infoServiceGetUserInfo", () => {
    return expect(instance.infoServiceGetUserInfo({})).resolves.toBe(null)
  })
  test("infoServiceGetVersion", () => {
    return expect(instance.infoServiceGetVersion({})).resolves.toBe(null)
  })
})

describe("SensorServiceApi", () => {
  let instance: api.SensorServiceApi
  beforeEach(function() {
    instance = new api.SensorServiceApi(config)
  });

  test("sensorServiceCreateSensor", () => {
    const body: api.SensorCreateSensorRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.sensorServiceCreateSensor(body, namespace, {})).resolves.toBe(null)
  })
  test("sensorServiceDeleteSensor", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    return expect(instance.sensorServiceDeleteSensor(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, {})).resolves.toBe(null)
  })
  test("sensorServiceGetSensor", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const getOptionsResourceVersion: string = "getOptionsResourceVersion_example"
    return expect(instance.sensorServiceGetSensor(namespace, name, getOptionsResourceVersion, {})).resolves.toBe(null)
  })
  test("sensorServiceListSensors", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.sensorServiceListSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("sensorServiceSensorsLogs", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const triggerName: string = "triggerName_example"
    const grep: string = "grep_example"
    const podLogOptionsContainer: string = "podLogOptionsContainer_example"
    const podLogOptionsFollow: boolean = true
    const podLogOptionsPrevious: boolean = true
    const podLogOptionsSinceSeconds: string = "podLogOptionsSinceSeconds_example"
    const podLogOptionsSinceTimeSeconds: string = "podLogOptionsSinceTimeSeconds_example"
    const podLogOptionsSinceTimeNanos: number = 56
    const podLogOptionsTimestamps: boolean = true
    const podLogOptionsTailLines: string = "podLogOptionsTailLines_example"
    const podLogOptionsLimitBytes: string = "podLogOptionsLimitBytes_example"
    const podLogOptionsInsecureSkipTLSVerifyBackend: boolean = true
    return expect(instance.sensorServiceSensorsLogs(namespace, name, triggerName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, {})).resolves.toBe(null)
  })
  test("sensorServiceUpdateSensor", () => {
    const body: api.SensorUpdateSensorRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.sensorServiceUpdateSensor(body, namespace, name, {})).resolves.toBe(null)
  })
  test("sensorServiceWatchSensors", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.sensorServiceWatchSensors(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
})

describe("WorkflowServiceApi", () => {
  let instance: api.WorkflowServiceApi
  beforeEach(function() {
    instance = new api.WorkflowServiceApi(config)
  });

  test("workflowServiceCreateWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowCreateRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.workflowServiceCreateWorkflow(body, namespace, {})).resolves.toBe(null)
  })
  test("workflowServiceDeleteWorkflow", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    const force: boolean = true
    return expect(instance.workflowServiceDeleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force, {})).resolves.toBe(null)
  })
  test("workflowServiceGetWorkflow", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const getOptionsResourceVersion: string = "getOptionsResourceVersion_example"
    const fields: string = "fields_example"
    return expect(instance.workflowServiceGetWorkflow(namespace, name, getOptionsResourceVersion, fields, {})).resolves.toBe(null)
  })
  test("workflowServiceLintWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowLintRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.workflowServiceLintWorkflow(body, namespace, {})).resolves.toBe(null)
  })
  test("workflowServiceListWorkflows", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    const fields: string = "fields_example"
    return expect(instance.workflowServiceListWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, {})).resolves.toBe(null)
  })
  test("workflowServicePodLogs", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const podName: string = "podName_example"
    const logOptionsContainer: string = "logOptionsContainer_example"
    const logOptionsFollow: boolean = true
    const logOptionsPrevious: boolean = true
    const logOptionsSinceSeconds: string = "logOptionsSinceSeconds_example"
    const logOptionsSinceTimeSeconds: string = "logOptionsSinceTimeSeconds_example"
    const logOptionsSinceTimeNanos: number = 56
    const logOptionsTimestamps: boolean = true
    const logOptionsTailLines: string = "logOptionsTailLines_example"
    const logOptionsLimitBytes: string = "logOptionsLimitBytes_example"
    const logOptionsInsecureSkipTLSVerifyBackend: boolean = true
    const grep: string = "grep_example"
    const selector: string = "selector_example"
    return expect(instance.workflowServicePodLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, {})).resolves.toBe(null)
  })
  test("workflowServiceResubmitWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceResubmitWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceResumeWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowResumeRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceResumeWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceRetryWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowRetryRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceRetryWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceSetWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowSetRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceSetWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceStopWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowStopRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceStopWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceSubmitWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.workflowServiceSubmitWorkflow(body, namespace, {})).resolves.toBe(null)
  })
  test("workflowServiceSuspendWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceSuspendWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceTerminateWorkflow", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowServiceTerminateWorkflow(body, namespace, name, {})).resolves.toBe(null)
  })
  test("workflowServiceWatchEvents", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.workflowServiceWatchEvents(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("workflowServiceWatchWorkflows", () => {
    const namespace: string = "namespace_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    const fields: string = "fields_example"
    return expect(instance.workflowServiceWatchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, {})).resolves.toBe(null)
  })
  test("workflowServiceWorkflowLogs", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const podName: string = "podName_example"
    const logOptionsContainer: string = "logOptionsContainer_example"
    const logOptionsFollow: boolean = true
    const logOptionsPrevious: boolean = true
    const logOptionsSinceSeconds: string = "logOptionsSinceSeconds_example"
    const logOptionsSinceTimeSeconds: string = "logOptionsSinceTimeSeconds_example"
    const logOptionsSinceTimeNanos: number = 56
    const logOptionsTimestamps: boolean = true
    const logOptionsTailLines: string = "logOptionsTailLines_example"
    const logOptionsLimitBytes: string = "logOptionsLimitBytes_example"
    const logOptionsInsecureSkipTLSVerifyBackend: boolean = true
    const grep: string = "grep_example"
    const selector: string = "selector_example"
    return expect(instance.workflowServiceWorkflowLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, {})).resolves.toBe(null)
  })
})

describe("WorkflowTemplateServiceApi", () => {
  let instance: api.WorkflowTemplateServiceApi
  beforeEach(function() {
    instance = new api.WorkflowTemplateServiceApi(config)
  });

  test("workflowTemplateServiceCreateWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowTemplateCreateRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.workflowTemplateServiceCreateWorkflowTemplate(body, namespace, {})).resolves.toBe(null)
  })
  test("workflowTemplateServiceDeleteWorkflowTemplate", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const deleteOptionsGracePeriodSeconds: string = "deleteOptionsGracePeriodSeconds_example"
    const deleteOptionsPreconditionsUid: string = "deleteOptionsPreconditionsUid_example"
    const deleteOptionsPreconditionsResourceVersion: string = "deleteOptionsPreconditionsResourceVersion_example"
    const deleteOptionsOrphanDependents: boolean = true
    const deleteOptionsPropagationPolicy: string = "deleteOptionsPropagationPolicy_example"
    const deleteOptionsDryRun: Array<string> = []
    return expect(instance.workflowTemplateServiceDeleteWorkflowTemplate(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, {})).resolves.toBe(null)
  })
  test("workflowTemplateServiceGetWorkflowTemplate", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    const getOptionsResourceVersion: string = "getOptionsResourceVersion_example"
    return expect(instance.workflowTemplateServiceGetWorkflowTemplate(namespace, name, getOptionsResourceVersion, {})).resolves.toBe(null)
  })
  test("workflowTemplateServiceLintWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowTemplateLintRequest = {}
    const namespace: string = "namespace_example"
    return expect(instance.workflowTemplateServiceLintWorkflowTemplate(body, namespace, {})).resolves.toBe(null)
  })
  test("workflowTemplateServiceListWorkflowTemplates", () => {
    const namespace: string = "namespace_example"
    const namePattern: string = "namePattern_example"
    const listOptionsLabelSelector: string = "listOptionsLabelSelector_example"
    const listOptionsFieldSelector: string = "listOptionsFieldSelector_example"
    const listOptionsWatch: boolean = true
    const listOptionsAllowWatchBookmarks: boolean = true
    const listOptionsResourceVersion: string = "listOptionsResourceVersion_example"
    const listOptionsResourceVersionMatch: string = "listOptionsResourceVersionMatch_example"
    const listOptionsTimeoutSeconds: string = "listOptionsTimeoutSeconds_example"
    const listOptionsLimit: string = "listOptionsLimit_example"
    const listOptionsContinue: string = "listOptionsContinue_example"
    return expect(instance.workflowTemplateServiceListWorkflowTemplates(namespace, namePattern, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, {})).resolves.toBe(null)
  })
  test("workflowTemplateServiceUpdateWorkflowTemplate", () => {
    const body: api.IoArgoprojWorkflowV1alpha1WorkflowTemplateUpdateRequest = {}
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.workflowTemplateServiceUpdateWorkflowTemplate(body, namespace, name, {})).resolves.toBe(null)
  })
})

